
STM_licenta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a00  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006b94  08006b94  00007b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bdc  08006bdc  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006bdc  08006bdc  00007bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006be4  08006be4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be4  08006be4  00007be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006be8  08006be8  00007be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006bec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08006bf8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08006bf8  000081d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b92  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c0  00000000  00000000  00018bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001ae90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf5  00000000  00000000  0001bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002295d  00000000  00000000  0001c9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dd4  00000000  00000000  0003f322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7881  00000000  00000000  000510f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128977  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  001289bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  0012ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006b7c 	.word	0x08006b7c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08006b7c 	.word	0x08006b7c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f002 fa2e 	bl	8002964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f82e 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fa24 	bl	8000958 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f9f2 	bl	80008f8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000514:	f000 f9c0 	bl	8000898 <MX_UART4_Init>
  MX_TIM1_Init();
 8000518:	f000 f878 	bl	800060c <MX_TIM1_Init>
  MX_TIM2_Init();
 800051c:	f000 f946 	bl	80007ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart4, &rx_byte, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	490d      	ldr	r1, [pc, #52]	@ (8000558 <main+0x58>)
 8000524:	480d      	ldr	r0, [pc, #52]	@ (800055c <main+0x5c>)
 8000526:	f005 f81d 	bl	8005564 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800052a:	2100      	movs	r1, #0
 800052c:	480c      	ldr	r0, [pc, #48]	@ (8000560 <main+0x60>)
 800052e:	f004 f869 	bl	8004604 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000532:	2104      	movs	r1, #4
 8000534:	480a      	ldr	r0, [pc, #40]	@ (8000560 <main+0x60>)
 8000536:	f004 f865 	bl	8004604 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800053a:	2108      	movs	r1, #8
 800053c:	4808      	ldr	r0, [pc, #32]	@ (8000560 <main+0x60>)
 800053e:	f004 f861 	bl	8004604 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000542:	210c      	movs	r1, #12
 8000544:	4806      	ldr	r0, [pc, #24]	@ (8000560 <main+0x60>)
 8000546:	f004 f85d 	bl	8004604 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800054a:	2100      	movs	r1, #0
 800054c:	4805      	ldr	r0, [pc, #20]	@ (8000564 <main+0x64>)
 800054e:	f004 f859 	bl	8004604 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000552:	bf00      	nop
 8000554:	e7fd      	b.n	8000552 <main+0x52>
 8000556:	bf00      	nop
 8000558:	200001d0 	.word	0x200001d0
 800055c:	200000c0 	.word	0x200000c0
 8000560:	20000028 	.word	0x20000028
 8000564:	20000074 	.word	0x20000074

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b096      	sub	sp, #88	@ 0x58
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2244      	movs	r2, #68	@ 0x44
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f006 fad4 	bl	8006b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	463b      	mov	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800058e:	f002 fd95 	bl	80030bc <HAL_PWREx_ControlVoltageScaling>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000598:	f001 ffea 	bl	8002570 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80005a6:	2340      	movs	r3, #64	@ 0x40
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ae:	2302      	movs	r3, #2
 80005b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005b6:	230a      	movs	r3, #10
 80005b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fdcc 	bl	8003168 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005d6:	f001 ffcb 	bl	8002570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	2104      	movs	r1, #4
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f9cc 	bl	8003990 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fe:	f001 ffb7 	bl	8002570 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3758      	adds	r7, #88	@ 0x58
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b09a      	sub	sp, #104	@ 0x68
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000612:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000620:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
 800063c:	615a      	str	r2, [r3, #20]
 800063e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	222c      	movs	r2, #44	@ 0x2c
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f006 fa6c 	bl	8006b24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800064c:	4b55      	ldr	r3, [pc, #340]	@ (80007a4 <MX_TIM1_Init+0x198>)
 800064e:	4a56      	ldr	r2, [pc, #344]	@ (80007a8 <MX_TIM1_Init+0x19c>)
 8000650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4000-1;
 8000652:	4b54      	ldr	r3, [pc, #336]	@ (80007a4 <MX_TIM1_Init+0x198>)
 8000654:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000658:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b52      	ldr	r3, [pc, #328]	@ (80007a4 <MX_TIM1_Init+0x198>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000660:	4b50      	ldr	r3, [pc, #320]	@ (80007a4 <MX_TIM1_Init+0x198>)
 8000662:	2264      	movs	r2, #100	@ 0x64
 8000664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000666:	4b4f      	ldr	r3, [pc, #316]	@ (80007a4 <MX_TIM1_Init+0x198>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800066c:	4b4d      	ldr	r3, [pc, #308]	@ (80007a4 <MX_TIM1_Init+0x198>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	4b4c      	ldr	r3, [pc, #304]	@ (80007a4 <MX_TIM1_Init+0x198>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000678:	484a      	ldr	r0, [pc, #296]	@ (80007a4 <MX_TIM1_Init+0x198>)
 800067a:	f003 ff0b 	bl	8004494 <HAL_TIM_Base_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000684:	f001 ff74 	bl	8002570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800068e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000692:	4619      	mov	r1, r3
 8000694:	4843      	ldr	r0, [pc, #268]	@ (80007a4 <MX_TIM1_Init+0x198>)
 8000696:	f004 f9af 	bl	80049f8 <HAL_TIM_ConfigClockSource>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006a0:	f001 ff66 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006a4:	483f      	ldr	r0, [pc, #252]	@ (80007a4 <MX_TIM1_Init+0x198>)
 80006a6:	f003 ff4c 	bl	8004542 <HAL_TIM_PWM_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006b0:	f001 ff5e 	bl	8002570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006c4:	4619      	mov	r1, r3
 80006c6:	4837      	ldr	r0, [pc, #220]	@ (80007a4 <MX_TIM1_Init+0x198>)
 80006c8:	f004 fe18 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006d2:	f001 ff4d 	bl	8002570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d6:	2360      	movs	r3, #96	@ 0x60
 80006d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006de:	2300      	movs	r3, #0
 80006e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006e2:	2300      	movs	r3, #0
 80006e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	482a      	ldr	r0, [pc, #168]	@ (80007a4 <MX_TIM1_Init+0x198>)
 80006fc:	f004 f868 	bl	80047d0 <HAL_TIM_PWM_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000706:	f001 ff33 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800070a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800070e:	2204      	movs	r2, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4824      	ldr	r0, [pc, #144]	@ (80007a4 <MX_TIM1_Init+0x198>)
 8000714:	f004 f85c 	bl	80047d0 <HAL_TIM_PWM_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800071e:	f001 ff27 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000722:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000726:	2208      	movs	r2, #8
 8000728:	4619      	mov	r1, r3
 800072a:	481e      	ldr	r0, [pc, #120]	@ (80007a4 <MX_TIM1_Init+0x198>)
 800072c:	f004 f850 	bl	80047d0 <HAL_TIM_PWM_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000736:	f001 ff1b 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800073a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800073e:	220c      	movs	r2, #12
 8000740:	4619      	mov	r1, r3
 8000742:	4818      	ldr	r0, [pc, #96]	@ (80007a4 <MX_TIM1_Init+0x198>)
 8000744:	f004 f844 	bl	80047d0 <HAL_TIM_PWM_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800074e:	f001 ff0f 	bl	8002570 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000766:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000774:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4807      	ldr	r0, [pc, #28]	@ (80007a4 <MX_TIM1_Init+0x198>)
 8000788:	f004 fe26 	bl	80053d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000792:	f001 feed 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000796:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <MX_TIM1_Init+0x198>)
 8000798:	f001 ff46 	bl	8002628 <HAL_TIM_MspPostInit>

}
 800079c:	bf00      	nop
 800079e:	3768      	adds	r7, #104	@ 0x68
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000028 	.word	0x20000028
 80007a8:	40012c00 	.word	0x40012c00

080007ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	@ 0x38
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_TIM2_Init+0xe8>)
 80007e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 80007e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <MX_TIM2_Init+0xe8>)
 80007e8:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80007ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ee:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <MX_TIM2_Init+0xe8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80007f4:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_TIM2_Init+0xe8>)
 80007f6:	2264      	movs	r2, #100	@ 0x64
 80007f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <MX_TIM2_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000806:	4823      	ldr	r0, [pc, #140]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000808:	f003 fe44 	bl	8004494 <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000812:	f001 fead 	bl	8002570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000820:	4619      	mov	r1, r3
 8000822:	481c      	ldr	r0, [pc, #112]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000824:	f004 f8e8 	bl	80049f8 <HAL_TIM_ConfigClockSource>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800082e:	f001 fe9f 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000832:	4818      	ldr	r0, [pc, #96]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000834:	f003 fe85 	bl	8004542 <HAL_TIM_PWM_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800083e:	f001 fe97 	bl	8002570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4810      	ldr	r0, [pc, #64]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000852:	f004 fd53 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800085c:	f001 fe88 	bl	8002570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000860:	2360      	movs	r3, #96	@ 0x60
 8000862:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	4807      	ldr	r0, [pc, #28]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000878:	f003 ffaa 	bl	80047d0 <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000882:	f001 fe75 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000886:	4803      	ldr	r0, [pc, #12]	@ (8000894 <MX_TIM2_Init+0xe8>)
 8000888:	f001 fece 	bl	8002628 <HAL_TIM_MspPostInit>

}
 800088c:	bf00      	nop
 800088e:	3738      	adds	r7, #56	@ 0x38
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000074 	.word	0x20000074

08000898 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_UART4_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	@ (80008f4 <MX_UART4_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008a2:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_UART4_Init+0x58>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_UART4_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_UART4_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_UART4_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_UART4_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_UART4_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_UART4_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_UART4_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_UART4_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_UART4_Init+0x58>)
 80008dc:	f004 fdf4 	bl	80054c8 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80008e6:	f001 fe43 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000c0 	.word	0x200000c0
 80008f4:	40004c00 	.word	0x40004c00

080008f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	@ (8000954 <MX_USART2_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800093c:	f004 fdc4 	bl	80054c8 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f001 fe13 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000148 	.word	0x20000148
 8000954:	40004400 	.word	0x40004400

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b47      	ldr	r3, [pc, #284]	@ (8000a8c <MX_GPIO_Init+0x134>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	4a46      	ldr	r2, [pc, #280]	@ (8000a8c <MX_GPIO_Init+0x134>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097a:	4b44      	ldr	r3, [pc, #272]	@ (8000a8c <MX_GPIO_Init+0x134>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	4b41      	ldr	r3, [pc, #260]	@ (8000a8c <MX_GPIO_Init+0x134>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	4a40      	ldr	r2, [pc, #256]	@ (8000a8c <MX_GPIO_Init+0x134>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000992:	4b3e      	ldr	r3, [pc, #248]	@ (8000a8c <MX_GPIO_Init+0x134>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a8c <MX_GPIO_Init+0x134>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	4a3a      	ldr	r2, [pc, #232]	@ (8000a8c <MX_GPIO_Init+0x134>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009aa:	4b38      	ldr	r3, [pc, #224]	@ (8000a8c <MX_GPIO_Init+0x134>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b35      	ldr	r3, [pc, #212]	@ (8000a8c <MX_GPIO_Init+0x134>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	4a34      	ldr	r2, [pc, #208]	@ (8000a8c <MX_GPIO_Init+0x134>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c2:	4b32      	ldr	r3, [pc, #200]	@ (8000a8c <MX_GPIO_Init+0x134>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_2_Pin|IN2_2_Pin|IN3_2_Pin|IN4_2_Pin
 80009ce:	2200      	movs	r2, #0
 80009d0:	f240 31cf 	movw	r1, #975	@ 0x3cf
 80009d4:	482e      	ldr	r0, [pc, #184]	@ (8000a90 <MX_GPIO_Init+0x138>)
 80009d6:	f002 fb4b 	bl	8003070 <HAL_GPIO_WritePin>
                          |IN4_1_Pin|IN3_1_Pin|IN2_1_Pin|IN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2130      	movs	r1, #48	@ 0x30
 80009de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e2:	f002 fb45 	bl	8003070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ec:	4829      	ldr	r0, [pc, #164]	@ (8000a94 <MX_GPIO_Init+0x13c>)
 80009ee:	f002 fb3f 	bl	8003070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4821      	ldr	r0, [pc, #132]	@ (8000a90 <MX_GPIO_Init+0x138>)
 8000a0a:	f002 f9b7 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_2_Pin IN2_2_Pin IN3_2_Pin IN4_2_Pin
                           IN4_1_Pin IN3_1_Pin IN2_1_Pin IN1_1_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin|IN2_2_Pin|IN3_2_Pin|IN4_2_Pin
 8000a0e:	f240 33cf 	movw	r3, #975	@ 0x3cf
 8000a12:	617b      	str	r3, [r7, #20]
                          |IN4_1_Pin|IN3_1_Pin|IN2_1_Pin|IN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	481a      	ldr	r0, [pc, #104]	@ (8000a90 <MX_GPIO_Init+0x138>)
 8000a28:	f002 f9a8 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin PA5 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|GPIO_PIN_5;
 8000a2c:	2330      	movs	r3, #48	@ 0x30
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a46:	f002 f999 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a4a:	2340      	movs	r3, #64	@ 0x40
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a60:	f002 f98c 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_GPIO_Init+0x13c>)
 8000a7e:	f002 f97d 	bl	8002d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000800 	.word	0x48000800
 8000a94:	48000400 	.word	0x48000400

08000a98 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == UART4){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4abe      	ldr	r2, [pc, #760]	@ (8000da0 <HAL_UART_RxCpltCallback+0x308>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	f041 8553 	bne.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  HAL_UART_Receive_IT(&huart4, &rx_byte, sizeof(rx_byte));
 8000aac:	2201      	movs	r2, #1
 8000aae:	49bd      	ldr	r1, [pc, #756]	@ (8000da4 <HAL_UART_RxCpltCallback+0x30c>)
 8000ab0:	48bd      	ldr	r0, [pc, #756]	@ (8000da8 <HAL_UART_RxCpltCallback+0x310>)
 8000ab2:	f004 fd57 	bl	8005564 <HAL_UART_Receive_IT>
	  if (rx_byte == 0x01){
 8000ab6:	4bbb      	ldr	r3, [pc, #748]	@ (8000da4 <HAL_UART_RxCpltCallback+0x30c>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d139      	bne.n	8000b32 <HAL_UART_RxCpltCallback+0x9a>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac4:	48b9      	ldr	r0, [pc, #740]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000ac6:	f002 fad3 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ad0:	48b6      	ldr	r0, [pc, #728]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000ad2:	f002 facd 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	48b4      	ldr	r0, [pc, #720]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000adc:	f002 fac8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2140      	movs	r1, #64	@ 0x40
 8000ae4:	48b1      	ldr	r0, [pc, #708]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000ae6:	f002 fac3 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	48af      	ldr	r0, [pc, #700]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000af0:	f002 fabe 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2102      	movs	r1, #2
 8000af8:	48ac      	ldr	r0, [pc, #688]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000afa:	f002 fab9 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2104      	movs	r1, #4
 8000b02:	48aa      	ldr	r0, [pc, #680]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000b04:	f002 fab4 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	48a7      	ldr	r0, [pc, #668]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000b0e:	f002 faaf 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b18:	48a5      	ldr	r0, [pc, #660]	@ (8000db0 <HAL_UART_RxCpltCallback+0x318>)
 8000b1a:	f002 faa9 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 8000b1e:	4ba5      	ldr	r3, [pc, #660]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2214      	movs	r2, #20
 8000b24:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 8000b26:	4ba3      	ldr	r3, [pc, #652]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2214      	movs	r2, #20
 8000b2c:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
    	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
      }
    }
}
 8000b2e:	f001 bd10 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x02){
 8000b32:	4b9c      	ldr	r3, [pc, #624]	@ (8000da4 <HAL_UART_RxCpltCallback+0x30c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d139      	bne.n	8000bae <HAL_UART_RxCpltCallback+0x116>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b40:	489a      	ldr	r0, [pc, #616]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000b42:	f002 fa95 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b4c:	4897      	ldr	r0, [pc, #604]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000b4e:	f002 fa8f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	4895      	ldr	r0, [pc, #596]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000b58:	f002 fa8a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2140      	movs	r1, #64	@ 0x40
 8000b60:	4892      	ldr	r0, [pc, #584]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000b62:	f002 fa85 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4890      	ldr	r0, [pc, #576]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000b6c:	f002 fa80 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2102      	movs	r1, #2
 8000b74:	488d      	ldr	r0, [pc, #564]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000b76:	f002 fa7b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	488b      	ldr	r0, [pc, #556]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000b80:	f002 fa76 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2108      	movs	r1, #8
 8000b88:	4888      	ldr	r0, [pc, #544]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000b8a:	f002 fa71 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b94:	4886      	ldr	r0, [pc, #536]	@ (8000db0 <HAL_UART_RxCpltCallback+0x318>)
 8000b96:	f002 fa6b 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 8000b9a:	4b86      	ldr	r3, [pc, #536]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2228      	movs	r2, #40	@ 0x28
 8000ba0:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 8000ba2:	4b84      	ldr	r3, [pc, #528]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2228      	movs	r2, #40	@ 0x28
 8000ba8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000baa:	f001 bcd2 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x03){
 8000bae:	4b7d      	ldr	r3, [pc, #500]	@ (8000da4 <HAL_UART_RxCpltCallback+0x30c>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d139      	bne.n	8000c2a <HAL_UART_RxCpltCallback+0x192>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bbc:	487b      	ldr	r0, [pc, #492]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000bbe:	f002 fa57 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bc8:	4878      	ldr	r0, [pc, #480]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000bca:	f002 fa51 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2180      	movs	r1, #128	@ 0x80
 8000bd2:	4876      	ldr	r0, [pc, #472]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000bd4:	f002 fa4c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	@ 0x40
 8000bdc:	4873      	ldr	r0, [pc, #460]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000bde:	f002 fa47 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2101      	movs	r1, #1
 8000be6:	4871      	ldr	r0, [pc, #452]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000be8:	f002 fa42 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2102      	movs	r1, #2
 8000bf0:	486e      	ldr	r0, [pc, #440]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000bf2:	f002 fa3d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	486c      	ldr	r0, [pc, #432]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000bfc:	f002 fa38 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2108      	movs	r1, #8
 8000c04:	4869      	ldr	r0, [pc, #420]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000c06:	f002 fa33 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c10:	4867      	ldr	r0, [pc, #412]	@ (8000db0 <HAL_UART_RxCpltCallback+0x318>)
 8000c12:	f002 fa2d 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 8000c16:	4b67      	ldr	r3, [pc, #412]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	223c      	movs	r2, #60	@ 0x3c
 8000c1c:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 8000c1e:	4b65      	ldr	r3, [pc, #404]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	223c      	movs	r2, #60	@ 0x3c
 8000c24:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000c26:	f001 bc94 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x04){
 8000c2a:	4b5e      	ldr	r3, [pc, #376]	@ (8000da4 <HAL_UART_RxCpltCallback+0x30c>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d139      	bne.n	8000ca6 <HAL_UART_RxCpltCallback+0x20e>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c38:	485c      	ldr	r0, [pc, #368]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000c3a:	f002 fa19 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c44:	4859      	ldr	r0, [pc, #356]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000c46:	f002 fa13 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	4857      	ldr	r0, [pc, #348]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000c50:	f002 fa0e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2140      	movs	r1, #64	@ 0x40
 8000c58:	4854      	ldr	r0, [pc, #336]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000c5a:	f002 fa09 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2101      	movs	r1, #1
 8000c62:	4852      	ldr	r0, [pc, #328]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000c64:	f002 fa04 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	484f      	ldr	r0, [pc, #316]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000c6e:	f002 f9ff 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2104      	movs	r1, #4
 8000c76:	484d      	ldr	r0, [pc, #308]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000c78:	f002 f9fa 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2108      	movs	r1, #8
 8000c80:	484a      	ldr	r0, [pc, #296]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000c82:	f002 f9f5 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c8c:	4848      	ldr	r0, [pc, #288]	@ (8000db0 <HAL_UART_RxCpltCallback+0x318>)
 8000c8e:	f002 f9ef 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 8000c92:	4b48      	ldr	r3, [pc, #288]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2250      	movs	r2, #80	@ 0x50
 8000c98:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 8000c9a:	4b46      	ldr	r3, [pc, #280]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2250      	movs	r2, #80	@ 0x50
 8000ca0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000ca2:	f001 bc56 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x05){
 8000ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8000da4 <HAL_UART_RxCpltCallback+0x30c>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	d139      	bne.n	8000d22 <HAL_UART_RxCpltCallback+0x28a>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cb4:	483d      	ldr	r0, [pc, #244]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000cb6:	f002 f9db 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc0:	483a      	ldr	r0, [pc, #232]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000cc2:	f002 f9d5 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2180      	movs	r1, #128	@ 0x80
 8000cca:	4838      	ldr	r0, [pc, #224]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000ccc:	f002 f9d0 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2140      	movs	r1, #64	@ 0x40
 8000cd4:	4835      	ldr	r0, [pc, #212]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000cd6:	f002 f9cb 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4833      	ldr	r0, [pc, #204]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000ce0:	f002 f9c6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	4830      	ldr	r0, [pc, #192]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000cea:	f002 f9c1 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	482e      	ldr	r0, [pc, #184]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000cf4:	f002 f9bc 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	482b      	ldr	r0, [pc, #172]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000cfe:	f002 f9b7 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d08:	4829      	ldr	r0, [pc, #164]	@ (8000db0 <HAL_UART_RxCpltCallback+0x318>)
 8000d0a:	f002 f9b1 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 8000d0e:	4b29      	ldr	r3, [pc, #164]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2264      	movs	r2, #100	@ 0x64
 8000d14:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8000d16:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2264      	movs	r2, #100	@ 0x64
 8000d1c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000d1e:	f001 bc18 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x06){
 8000d22:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <HAL_UART_RxCpltCallback+0x30c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d146      	bne.n	8000db8 <HAL_UART_RxCpltCallback+0x320>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d30:	481e      	ldr	r0, [pc, #120]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000d32:	f002 f99d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d3c:	481b      	ldr	r0, [pc, #108]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000d3e:	f002 f997 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2180      	movs	r1, #128	@ 0x80
 8000d46:	4819      	ldr	r0, [pc, #100]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000d48:	f002 f992 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2140      	movs	r1, #64	@ 0x40
 8000d50:	4816      	ldr	r0, [pc, #88]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000d52:	f002 f98d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4814      	ldr	r0, [pc, #80]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000d5c:	f002 f988 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2102      	movs	r1, #2
 8000d64:	4811      	ldr	r0, [pc, #68]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000d66:	f002 f983 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	480f      	ldr	r0, [pc, #60]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000d70:	f002 f97e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2108      	movs	r1, #8
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <HAL_UART_RxCpltCallback+0x314>)
 8000d7a:	f002 f979 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d84:	480a      	ldr	r0, [pc, #40]	@ (8000db0 <HAL_UART_RxCpltCallback+0x318>)
 8000d86:	f002 f973 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2214      	movs	r2, #20
 8000d90:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <HAL_UART_RxCpltCallback+0x31c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2214      	movs	r2, #20
 8000d98:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000d9a:	f001 bbda 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
 8000d9e:	bf00      	nop
 8000da0:	40004c00 	.word	0x40004c00
 8000da4:	200001d0 	.word	0x200001d0
 8000da8:	200000c0 	.word	0x200000c0
 8000dac:	48000800 	.word	0x48000800
 8000db0:	48000400 	.word	0x48000400
 8000db4:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x07){
 8000db8:	4bb9      	ldr	r3, [pc, #740]	@ (80010a0 <HAL_UART_RxCpltCallback+0x608>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b07      	cmp	r3, #7
 8000dbe:	d139      	bne.n	8000e34 <HAL_UART_RxCpltCallback+0x39c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc6:	48b7      	ldr	r0, [pc, #732]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000dc8:	f002 f952 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dd2:	48b4      	ldr	r0, [pc, #720]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000dd4:	f002 f94c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2180      	movs	r1, #128	@ 0x80
 8000ddc:	48b1      	ldr	r0, [pc, #708]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000dde:	f002 f947 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2140      	movs	r1, #64	@ 0x40
 8000de6:	48af      	ldr	r0, [pc, #700]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000de8:	f002 f942 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	48ac      	ldr	r0, [pc, #688]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000df2:	f002 f93d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2102      	movs	r1, #2
 8000dfa:	48aa      	ldr	r0, [pc, #680]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000dfc:	f002 f938 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2104      	movs	r1, #4
 8000e04:	48a7      	ldr	r0, [pc, #668]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000e06:	f002 f933 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	48a5      	ldr	r0, [pc, #660]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000e10:	f002 f92e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e1a:	48a3      	ldr	r0, [pc, #652]	@ (80010a8 <HAL_UART_RxCpltCallback+0x610>)
 8000e1c:	f002 f928 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 8000e20:	4ba2      	ldr	r3, [pc, #648]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2228      	movs	r2, #40	@ 0x28
 8000e26:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 8000e28:	4ba0      	ldr	r3, [pc, #640]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2228      	movs	r2, #40	@ 0x28
 8000e2e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000e30:	f001 bb8f 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x08){
 8000e34:	4b9a      	ldr	r3, [pc, #616]	@ (80010a0 <HAL_UART_RxCpltCallback+0x608>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d139      	bne.n	8000eb0 <HAL_UART_RxCpltCallback+0x418>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e42:	4898      	ldr	r0, [pc, #608]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000e44:	f002 f914 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e4e:	4895      	ldr	r0, [pc, #596]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000e50:	f002 f90e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2180      	movs	r1, #128	@ 0x80
 8000e58:	4892      	ldr	r0, [pc, #584]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000e5a:	f002 f909 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2140      	movs	r1, #64	@ 0x40
 8000e62:	4890      	ldr	r0, [pc, #576]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000e64:	f002 f904 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	488d      	ldr	r0, [pc, #564]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000e6e:	f002 f8ff 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2102      	movs	r1, #2
 8000e76:	488b      	ldr	r0, [pc, #556]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000e78:	f002 f8fa 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2104      	movs	r1, #4
 8000e80:	4888      	ldr	r0, [pc, #544]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000e82:	f002 f8f5 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2108      	movs	r1, #8
 8000e8a:	4886      	ldr	r0, [pc, #536]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000e8c:	f002 f8f0 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e96:	4884      	ldr	r0, [pc, #528]	@ (80010a8 <HAL_UART_RxCpltCallback+0x610>)
 8000e98:	f002 f8ea 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 8000e9c:	4b83      	ldr	r3, [pc, #524]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	223c      	movs	r2, #60	@ 0x3c
 8000ea2:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 8000ea4:	4b81      	ldr	r3, [pc, #516]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	223c      	movs	r2, #60	@ 0x3c
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	f001 bb51 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x09){
 8000eb0:	4b7b      	ldr	r3, [pc, #492]	@ (80010a0 <HAL_UART_RxCpltCallback+0x608>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b09      	cmp	r3, #9
 8000eb6:	d139      	bne.n	8000f2c <HAL_UART_RxCpltCallback+0x494>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ebe:	4879      	ldr	r0, [pc, #484]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000ec0:	f002 f8d6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eca:	4876      	ldr	r0, [pc, #472]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000ecc:	f002 f8d0 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2180      	movs	r1, #128	@ 0x80
 8000ed4:	4873      	ldr	r0, [pc, #460]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000ed6:	f002 f8cb 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2140      	movs	r1, #64	@ 0x40
 8000ede:	4871      	ldr	r0, [pc, #452]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000ee0:	f002 f8c6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	486e      	ldr	r0, [pc, #440]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000eea:	f002 f8c1 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	486c      	ldr	r0, [pc, #432]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000ef4:	f002 f8bc 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2104      	movs	r1, #4
 8000efc:	4869      	ldr	r0, [pc, #420]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000efe:	f002 f8b7 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2108      	movs	r1, #8
 8000f06:	4867      	ldr	r0, [pc, #412]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000f08:	f002 f8b2 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f12:	4865      	ldr	r0, [pc, #404]	@ (80010a8 <HAL_UART_RxCpltCallback+0x610>)
 8000f14:	f002 f8ac 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 8000f18:	4b64      	ldr	r3, [pc, #400]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2250      	movs	r2, #80	@ 0x50
 8000f1e:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 8000f20:	4b62      	ldr	r3, [pc, #392]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2250      	movs	r2, #80	@ 0x50
 8000f26:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f28:	f001 bb13 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x0A){
 8000f2c:	4b5c      	ldr	r3, [pc, #368]	@ (80010a0 <HAL_UART_RxCpltCallback+0x608>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b0a      	cmp	r3, #10
 8000f32:	d139      	bne.n	8000fa8 <HAL_UART_RxCpltCallback+0x510>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3a:	485a      	ldr	r0, [pc, #360]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000f3c:	f002 f898 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f46:	4857      	ldr	r0, [pc, #348]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000f48:	f002 f892 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2180      	movs	r1, #128	@ 0x80
 8000f50:	4854      	ldr	r0, [pc, #336]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000f52:	f002 f88d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2140      	movs	r1, #64	@ 0x40
 8000f5a:	4852      	ldr	r0, [pc, #328]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000f5c:	f002 f888 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	484f      	ldr	r0, [pc, #316]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000f66:	f002 f883 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	484d      	ldr	r0, [pc, #308]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000f70:	f002 f87e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2104      	movs	r1, #4
 8000f78:	484a      	ldr	r0, [pc, #296]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000f7a:	f002 f879 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2108      	movs	r1, #8
 8000f82:	4848      	ldr	r0, [pc, #288]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000f84:	f002 f874 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f8e:	4846      	ldr	r0, [pc, #280]	@ (80010a8 <HAL_UART_RxCpltCallback+0x610>)
 8000f90:	f002 f86e 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 8000f94:	4b45      	ldr	r3, [pc, #276]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2264      	movs	r2, #100	@ 0x64
 8000f9a:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8000f9c:	4b43      	ldr	r3, [pc, #268]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2264      	movs	r2, #100	@ 0x64
 8000fa2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000fa4:	f001 bad5 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x0B){
 8000fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80010a0 <HAL_UART_RxCpltCallback+0x608>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b0b      	cmp	r3, #11
 8000fae:	d139      	bne.n	8001024 <HAL_UART_RxCpltCallback+0x58c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fb6:	483b      	ldr	r0, [pc, #236]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000fb8:	f002 f85a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc2:	4838      	ldr	r0, [pc, #224]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000fc4:	f002 f854 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2180      	movs	r1, #128	@ 0x80
 8000fcc:	4835      	ldr	r0, [pc, #212]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000fce:	f002 f84f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2140      	movs	r1, #64	@ 0x40
 8000fd6:	4833      	ldr	r0, [pc, #204]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000fd8:	f002 f84a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4830      	ldr	r0, [pc, #192]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000fe2:	f002 f845 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2102      	movs	r1, #2
 8000fea:	482e      	ldr	r0, [pc, #184]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000fec:	f002 f840 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	482b      	ldr	r0, [pc, #172]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8000ff6:	f002 f83b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2108      	movs	r1, #8
 8000ffe:	4829      	ldr	r0, [pc, #164]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8001000:	f002 f836 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800100a:	4827      	ldr	r0, [pc, #156]	@ (80010a8 <HAL_UART_RxCpltCallback+0x610>)
 800100c:	f002 f830 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 8001010:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2214      	movs	r2, #20
 8001016:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 8001018:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2214      	movs	r2, #20
 800101e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001020:	f001 ba97 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x0C){
 8001024:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <HAL_UART_RxCpltCallback+0x608>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b0c      	cmp	r3, #12
 800102a:	d141      	bne.n	80010b0 <HAL_UART_RxCpltCallback+0x618>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001032:	481c      	ldr	r0, [pc, #112]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8001034:	f002 f81c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800103e:	4819      	ldr	r0, [pc, #100]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8001040:	f002 f816 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2180      	movs	r1, #128	@ 0x80
 8001048:	4816      	ldr	r0, [pc, #88]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 800104a:	f002 f811 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2140      	movs	r1, #64	@ 0x40
 8001052:	4814      	ldr	r0, [pc, #80]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8001054:	f002 f80c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2101      	movs	r1, #1
 800105c:	4811      	ldr	r0, [pc, #68]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 800105e:	f002 f807 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2102      	movs	r1, #2
 8001066:	480f      	ldr	r0, [pc, #60]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8001068:	f002 f802 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2104      	movs	r1, #4
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 8001072:	f001 fffd 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2108      	movs	r1, #8
 800107a:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <HAL_UART_RxCpltCallback+0x60c>)
 800107c:	f001 fff8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001086:	4808      	ldr	r0, [pc, #32]	@ (80010a8 <HAL_UART_RxCpltCallback+0x610>)
 8001088:	f001 fff2 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2228      	movs	r2, #40	@ 0x28
 8001092:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <HAL_UART_RxCpltCallback+0x614>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2228      	movs	r2, #40	@ 0x28
 800109a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800109c:	f001 ba59 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
 80010a0:	200001d0 	.word	0x200001d0
 80010a4:	48000800 	.word	0x48000800
 80010a8:	48000400 	.word	0x48000400
 80010ac:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x0D){
 80010b0:	4bb9      	ldr	r3, [pc, #740]	@ (8001398 <HAL_UART_RxCpltCallback+0x900>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b0d      	cmp	r3, #13
 80010b6:	d139      	bne.n	800112c <HAL_UART_RxCpltCallback+0x694>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010be:	48b7      	ldr	r0, [pc, #732]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80010c0:	f001 ffd6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ca:	48b4      	ldr	r0, [pc, #720]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80010cc:	f001 ffd0 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2180      	movs	r1, #128	@ 0x80
 80010d4:	48b1      	ldr	r0, [pc, #708]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80010d6:	f001 ffcb 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2140      	movs	r1, #64	@ 0x40
 80010de:	48af      	ldr	r0, [pc, #700]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80010e0:	f001 ffc6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2101      	movs	r1, #1
 80010e8:	48ac      	ldr	r0, [pc, #688]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80010ea:	f001 ffc1 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2102      	movs	r1, #2
 80010f2:	48aa      	ldr	r0, [pc, #680]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80010f4:	f001 ffbc 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2104      	movs	r1, #4
 80010fc:	48a7      	ldr	r0, [pc, #668]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80010fe:	f001 ffb7 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2108      	movs	r1, #8
 8001106:	48a5      	ldr	r0, [pc, #660]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001108:	f001 ffb2 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001112:	48a3      	ldr	r0, [pc, #652]	@ (80013a0 <HAL_UART_RxCpltCallback+0x908>)
 8001114:	f001 ffac 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 8001118:	4ba2      	ldr	r3, [pc, #648]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	223c      	movs	r2, #60	@ 0x3c
 800111e:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 8001120:	4ba0      	ldr	r3, [pc, #640]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	223c      	movs	r2, #60	@ 0x3c
 8001126:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001128:	f001 ba13 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x0E){
 800112c:	4b9a      	ldr	r3, [pc, #616]	@ (8001398 <HAL_UART_RxCpltCallback+0x900>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b0e      	cmp	r3, #14
 8001132:	d139      	bne.n	80011a8 <HAL_UART_RxCpltCallback+0x710>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800113a:	4898      	ldr	r0, [pc, #608]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 800113c:	f001 ff98 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001146:	4895      	ldr	r0, [pc, #596]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001148:	f001 ff92 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2180      	movs	r1, #128	@ 0x80
 8001150:	4892      	ldr	r0, [pc, #584]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001152:	f001 ff8d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2140      	movs	r1, #64	@ 0x40
 800115a:	4890      	ldr	r0, [pc, #576]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 800115c:	f001 ff88 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2101      	movs	r1, #1
 8001164:	488d      	ldr	r0, [pc, #564]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001166:	f001 ff83 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2102      	movs	r1, #2
 800116e:	488b      	ldr	r0, [pc, #556]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001170:	f001 ff7e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2104      	movs	r1, #4
 8001178:	4888      	ldr	r0, [pc, #544]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 800117a:	f001 ff79 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2108      	movs	r1, #8
 8001182:	4886      	ldr	r0, [pc, #536]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001184:	f001 ff74 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800118e:	4884      	ldr	r0, [pc, #528]	@ (80013a0 <HAL_UART_RxCpltCallback+0x908>)
 8001190:	f001 ff6e 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 8001194:	4b83      	ldr	r3, [pc, #524]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2250      	movs	r2, #80	@ 0x50
 800119a:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 800119c:	4b81      	ldr	r3, [pc, #516]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2250      	movs	r2, #80	@ 0x50
 80011a2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011a4:	f001 b9d5 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x0F){
 80011a8:	4b7b      	ldr	r3, [pc, #492]	@ (8001398 <HAL_UART_RxCpltCallback+0x900>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d139      	bne.n	8001224 <HAL_UART_RxCpltCallback+0x78c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011b6:	4879      	ldr	r0, [pc, #484]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80011b8:	f001 ff5a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011c2:	4876      	ldr	r0, [pc, #472]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80011c4:	f001 ff54 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2180      	movs	r1, #128	@ 0x80
 80011cc:	4873      	ldr	r0, [pc, #460]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80011ce:	f001 ff4f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2140      	movs	r1, #64	@ 0x40
 80011d6:	4871      	ldr	r0, [pc, #452]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80011d8:	f001 ff4a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2101      	movs	r1, #1
 80011e0:	486e      	ldr	r0, [pc, #440]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80011e2:	f001 ff45 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2102      	movs	r1, #2
 80011ea:	486c      	ldr	r0, [pc, #432]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80011ec:	f001 ff40 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2104      	movs	r1, #4
 80011f4:	4869      	ldr	r0, [pc, #420]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80011f6:	f001 ff3b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2108      	movs	r1, #8
 80011fe:	4867      	ldr	r0, [pc, #412]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001200:	f001 ff36 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800120a:	4865      	ldr	r0, [pc, #404]	@ (80013a0 <HAL_UART_RxCpltCallback+0x908>)
 800120c:	f001 ff30 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 8001210:	4b64      	ldr	r3, [pc, #400]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2264      	movs	r2, #100	@ 0x64
 8001216:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001218:	4b62      	ldr	r3, [pc, #392]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2264      	movs	r2, #100	@ 0x64
 800121e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001220:	f001 b997 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x10){
 8001224:	4b5c      	ldr	r3, [pc, #368]	@ (8001398 <HAL_UART_RxCpltCallback+0x900>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b10      	cmp	r3, #16
 800122a:	d139      	bne.n	80012a0 <HAL_UART_RxCpltCallback+0x808>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001232:	485a      	ldr	r0, [pc, #360]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001234:	f001 ff1c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800123e:	4857      	ldr	r0, [pc, #348]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001240:	f001 ff16 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2180      	movs	r1, #128	@ 0x80
 8001248:	4854      	ldr	r0, [pc, #336]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 800124a:	f001 ff11 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2140      	movs	r1, #64	@ 0x40
 8001252:	4852      	ldr	r0, [pc, #328]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001254:	f001 ff0c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2101      	movs	r1, #1
 800125c:	484f      	ldr	r0, [pc, #316]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 800125e:	f001 ff07 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2102      	movs	r1, #2
 8001266:	484d      	ldr	r0, [pc, #308]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001268:	f001 ff02 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2104      	movs	r1, #4
 8001270:	484a      	ldr	r0, [pc, #296]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001272:	f001 fefd 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2108      	movs	r1, #8
 800127a:	4848      	ldr	r0, [pc, #288]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 800127c:	f001 fef8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001286:	4846      	ldr	r0, [pc, #280]	@ (80013a0 <HAL_UART_RxCpltCallback+0x908>)
 8001288:	f001 fef2 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 800128c:	4b45      	ldr	r3, [pc, #276]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2214      	movs	r2, #20
 8001292:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 8001294:	4b43      	ldr	r3, [pc, #268]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2214      	movs	r2, #20
 800129a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800129c:	f001 b959 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x11){
 80012a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001398 <HAL_UART_RxCpltCallback+0x900>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b11      	cmp	r3, #17
 80012a6:	d139      	bne.n	800131c <HAL_UART_RxCpltCallback+0x884>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ae:	483b      	ldr	r0, [pc, #236]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80012b0:	f001 fede 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ba:	4838      	ldr	r0, [pc, #224]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80012bc:	f001 fed8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2180      	movs	r1, #128	@ 0x80
 80012c4:	4835      	ldr	r0, [pc, #212]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80012c6:	f001 fed3 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2140      	movs	r1, #64	@ 0x40
 80012ce:	4833      	ldr	r0, [pc, #204]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80012d0:	f001 fece 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4830      	ldr	r0, [pc, #192]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80012da:	f001 fec9 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2102      	movs	r1, #2
 80012e2:	482e      	ldr	r0, [pc, #184]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80012e4:	f001 fec4 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2104      	movs	r1, #4
 80012ec:	482b      	ldr	r0, [pc, #172]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80012ee:	f001 febf 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	2108      	movs	r1, #8
 80012f6:	4829      	ldr	r0, [pc, #164]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 80012f8:	f001 feba 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001302:	4827      	ldr	r0, [pc, #156]	@ (80013a0 <HAL_UART_RxCpltCallback+0x908>)
 8001304:	f001 feb4 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 8001308:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2228      	movs	r2, #40	@ 0x28
 800130e:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 8001310:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2228      	movs	r2, #40	@ 0x28
 8001316:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001318:	f001 b91b 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x12){
 800131c:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <HAL_UART_RxCpltCallback+0x900>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b12      	cmp	r3, #18
 8001322:	d141      	bne.n	80013a8 <HAL_UART_RxCpltCallback+0x910>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800132a:	481c      	ldr	r0, [pc, #112]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 800132c:	f001 fea0 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001336:	4819      	ldr	r0, [pc, #100]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001338:	f001 fe9a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	2180      	movs	r1, #128	@ 0x80
 8001340:	4816      	ldr	r0, [pc, #88]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001342:	f001 fe95 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2140      	movs	r1, #64	@ 0x40
 800134a:	4814      	ldr	r0, [pc, #80]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 800134c:	f001 fe90 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	2101      	movs	r1, #1
 8001354:	4811      	ldr	r0, [pc, #68]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001356:	f001 fe8b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2102      	movs	r1, #2
 800135e:	480f      	ldr	r0, [pc, #60]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001360:	f001 fe86 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2104      	movs	r1, #4
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 800136a:	f001 fe81 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 800136e:	2201      	movs	r2, #1
 8001370:	2108      	movs	r1, #8
 8001372:	480a      	ldr	r0, [pc, #40]	@ (800139c <HAL_UART_RxCpltCallback+0x904>)
 8001374:	f001 fe7c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137e:	4808      	ldr	r0, [pc, #32]	@ (80013a0 <HAL_UART_RxCpltCallback+0x908>)
 8001380:	f001 fe76 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	223c      	movs	r2, #60	@ 0x3c
 800138a:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_UART_RxCpltCallback+0x90c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	223c      	movs	r2, #60	@ 0x3c
 8001392:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001394:	f001 b8dd 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
 8001398:	200001d0 	.word	0x200001d0
 800139c:	48000800 	.word	0x48000800
 80013a0:	48000400 	.word	0x48000400
 80013a4:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x13){
 80013a8:	4bb9      	ldr	r3, [pc, #740]	@ (8001690 <HAL_UART_RxCpltCallback+0xbf8>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b13      	cmp	r3, #19
 80013ae:	d139      	bne.n	8001424 <HAL_UART_RxCpltCallback+0x98c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013b6:	48b7      	ldr	r0, [pc, #732]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80013b8:	f001 fe5a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013c2:	48b4      	ldr	r0, [pc, #720]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80013c4:	f001 fe54 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2180      	movs	r1, #128	@ 0x80
 80013cc:	48b1      	ldr	r0, [pc, #708]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80013ce:	f001 fe4f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2140      	movs	r1, #64	@ 0x40
 80013d6:	48af      	ldr	r0, [pc, #700]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80013d8:	f001 fe4a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	48ac      	ldr	r0, [pc, #688]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80013e2:	f001 fe45 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2102      	movs	r1, #2
 80013ea:	48aa      	ldr	r0, [pc, #680]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80013ec:	f001 fe40 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2104      	movs	r1, #4
 80013f4:	48a7      	ldr	r0, [pc, #668]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80013f6:	f001 fe3b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2108      	movs	r1, #8
 80013fe:	48a5      	ldr	r0, [pc, #660]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001400:	f001 fe36 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800140a:	48a3      	ldr	r0, [pc, #652]	@ (8001698 <HAL_UART_RxCpltCallback+0xc00>)
 800140c:	f001 fe30 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 8001410:	4ba2      	ldr	r3, [pc, #648]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2250      	movs	r2, #80	@ 0x50
 8001416:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 8001418:	4ba0      	ldr	r3, [pc, #640]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2250      	movs	r2, #80	@ 0x50
 800141e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001420:	f001 b897 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x14){
 8001424:	4b9a      	ldr	r3, [pc, #616]	@ (8001690 <HAL_UART_RxCpltCallback+0xbf8>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b14      	cmp	r3, #20
 800142a:	d139      	bne.n	80014a0 <HAL_UART_RxCpltCallback+0xa08>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001432:	4898      	ldr	r0, [pc, #608]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001434:	f001 fe1c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143e:	4895      	ldr	r0, [pc, #596]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001440:	f001 fe16 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2180      	movs	r1, #128	@ 0x80
 8001448:	4892      	ldr	r0, [pc, #584]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 800144a:	f001 fe11 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2140      	movs	r1, #64	@ 0x40
 8001452:	4890      	ldr	r0, [pc, #576]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001454:	f001 fe0c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2101      	movs	r1, #1
 800145c:	488d      	ldr	r0, [pc, #564]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 800145e:	f001 fe07 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2102      	movs	r1, #2
 8001466:	488b      	ldr	r0, [pc, #556]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001468:	f001 fe02 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2104      	movs	r1, #4
 8001470:	4888      	ldr	r0, [pc, #544]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001472:	f001 fdfd 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2108      	movs	r1, #8
 800147a:	4886      	ldr	r0, [pc, #536]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 800147c:	f001 fdf8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001486:	4884      	ldr	r0, [pc, #528]	@ (8001698 <HAL_UART_RxCpltCallback+0xc00>)
 8001488:	f001 fdf2 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 800148c:	4b83      	ldr	r3, [pc, #524]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2264      	movs	r2, #100	@ 0x64
 8001492:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001494:	4b81      	ldr	r3, [pc, #516]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2264      	movs	r2, #100	@ 0x64
 800149a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800149c:	f001 b859 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x15){
 80014a0:	4b7b      	ldr	r3, [pc, #492]	@ (8001690 <HAL_UART_RxCpltCallback+0xbf8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b15      	cmp	r3, #21
 80014a6:	d139      	bne.n	800151c <HAL_UART_RxCpltCallback+0xa84>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ae:	4879      	ldr	r0, [pc, #484]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80014b0:	f001 fdde 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ba:	4876      	ldr	r0, [pc, #472]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80014bc:	f001 fdd8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2180      	movs	r1, #128	@ 0x80
 80014c4:	4873      	ldr	r0, [pc, #460]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80014c6:	f001 fdd3 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2140      	movs	r1, #64	@ 0x40
 80014ce:	4871      	ldr	r0, [pc, #452]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80014d0:	f001 fdce 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2101      	movs	r1, #1
 80014d8:	486e      	ldr	r0, [pc, #440]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80014da:	f001 fdc9 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2102      	movs	r1, #2
 80014e2:	486c      	ldr	r0, [pc, #432]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80014e4:	f001 fdc4 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2104      	movs	r1, #4
 80014ec:	4869      	ldr	r0, [pc, #420]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80014ee:	f001 fdbf 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2108      	movs	r1, #8
 80014f6:	4867      	ldr	r0, [pc, #412]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80014f8:	f001 fdba 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001502:	4865      	ldr	r0, [pc, #404]	@ (8001698 <HAL_UART_RxCpltCallback+0xc00>)
 8001504:	f001 fdb4 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 8001508:	4b64      	ldr	r3, [pc, #400]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2214      	movs	r2, #20
 800150e:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 8001510:	4b62      	ldr	r3, [pc, #392]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2214      	movs	r2, #20
 8001516:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001518:	f001 b81b 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x16){
 800151c:	4b5c      	ldr	r3, [pc, #368]	@ (8001690 <HAL_UART_RxCpltCallback+0xbf8>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b16      	cmp	r3, #22
 8001522:	d139      	bne.n	8001598 <HAL_UART_RxCpltCallback+0xb00>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800152a:	485a      	ldr	r0, [pc, #360]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 800152c:	f001 fda0 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001536:	4857      	ldr	r0, [pc, #348]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001538:	f001 fd9a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	2180      	movs	r1, #128	@ 0x80
 8001540:	4854      	ldr	r0, [pc, #336]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001542:	f001 fd95 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2140      	movs	r1, #64	@ 0x40
 800154a:	4852      	ldr	r0, [pc, #328]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 800154c:	f001 fd90 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2101      	movs	r1, #1
 8001554:	484f      	ldr	r0, [pc, #316]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001556:	f001 fd8b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2102      	movs	r1, #2
 800155e:	484d      	ldr	r0, [pc, #308]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001560:	f001 fd86 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8001564:	2201      	movs	r2, #1
 8001566:	2104      	movs	r1, #4
 8001568:	484a      	ldr	r0, [pc, #296]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 800156a:	f001 fd81 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2108      	movs	r1, #8
 8001572:	4848      	ldr	r0, [pc, #288]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001574:	f001 fd7c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800157e:	4846      	ldr	r0, [pc, #280]	@ (8001698 <HAL_UART_RxCpltCallback+0xc00>)
 8001580:	f001 fd76 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 8001584:	4b45      	ldr	r3, [pc, #276]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2228      	movs	r2, #40	@ 0x28
 800158a:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 800158c:	4b43      	ldr	r3, [pc, #268]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2228      	movs	r2, #40	@ 0x28
 8001592:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001594:	f000 bfdd 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x17){
 8001598:	4b3d      	ldr	r3, [pc, #244]	@ (8001690 <HAL_UART_RxCpltCallback+0xbf8>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b17      	cmp	r3, #23
 800159e:	d139      	bne.n	8001614 <HAL_UART_RxCpltCallback+0xb7c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015a6:	483b      	ldr	r0, [pc, #236]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80015a8:	f001 fd62 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b2:	4838      	ldr	r0, [pc, #224]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80015b4:	f001 fd5c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2180      	movs	r1, #128	@ 0x80
 80015bc:	4835      	ldr	r0, [pc, #212]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80015be:	f001 fd57 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2140      	movs	r1, #64	@ 0x40
 80015c6:	4833      	ldr	r0, [pc, #204]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80015c8:	f001 fd52 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2101      	movs	r1, #1
 80015d0:	4830      	ldr	r0, [pc, #192]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80015d2:	f001 fd4d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2102      	movs	r1, #2
 80015da:	482e      	ldr	r0, [pc, #184]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80015dc:	f001 fd48 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2104      	movs	r1, #4
 80015e4:	482b      	ldr	r0, [pc, #172]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80015e6:	f001 fd43 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2108      	movs	r1, #8
 80015ee:	4829      	ldr	r0, [pc, #164]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 80015f0:	f001 fd3e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015fa:	4827      	ldr	r0, [pc, #156]	@ (8001698 <HAL_UART_RxCpltCallback+0xc00>)
 80015fc:	f001 fd38 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 8001600:	4b26      	ldr	r3, [pc, #152]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	223c      	movs	r2, #60	@ 0x3c
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 8001608:	4b24      	ldr	r3, [pc, #144]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	223c      	movs	r2, #60	@ 0x3c
 800160e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001610:	f000 bf9f 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x18){
 8001614:	4b1e      	ldr	r3, [pc, #120]	@ (8001690 <HAL_UART_RxCpltCallback+0xbf8>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b18      	cmp	r3, #24
 800161a:	d141      	bne.n	80016a0 <HAL_UART_RxCpltCallback+0xc08>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001622:	481c      	ldr	r0, [pc, #112]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001624:	f001 fd24 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800162e:	4819      	ldr	r0, [pc, #100]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001630:	f001 fd1e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2180      	movs	r1, #128	@ 0x80
 8001638:	4816      	ldr	r0, [pc, #88]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 800163a:	f001 fd19 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2140      	movs	r1, #64	@ 0x40
 8001642:	4814      	ldr	r0, [pc, #80]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001644:	f001 fd14 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2101      	movs	r1, #1
 800164c:	4811      	ldr	r0, [pc, #68]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 800164e:	f001 fd0f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	2102      	movs	r1, #2
 8001656:	480f      	ldr	r0, [pc, #60]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001658:	f001 fd0a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	2104      	movs	r1, #4
 8001660:	480c      	ldr	r0, [pc, #48]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 8001662:	f001 fd05 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2108      	movs	r1, #8
 800166a:	480a      	ldr	r0, [pc, #40]	@ (8001694 <HAL_UART_RxCpltCallback+0xbfc>)
 800166c:	f001 fd00 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001676:	4808      	ldr	r0, [pc, #32]	@ (8001698 <HAL_UART_RxCpltCallback+0xc00>)
 8001678:	f001 fcfa 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2250      	movs	r2, #80	@ 0x50
 8001682:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <HAL_UART_RxCpltCallback+0xc04>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2250      	movs	r2, #80	@ 0x50
 800168a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800168c:	f000 bf61 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
 8001690:	200001d0 	.word	0x200001d0
 8001694:	48000800 	.word	0x48000800
 8001698:	48000400 	.word	0x48000400
 800169c:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x19){
 80016a0:	4bb9      	ldr	r3, [pc, #740]	@ (8001988 <HAL_UART_RxCpltCallback+0xef0>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b19      	cmp	r3, #25
 80016a6:	d139      	bne.n	800171c <HAL_UART_RxCpltCallback+0xc84>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ae:	48b7      	ldr	r0, [pc, #732]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80016b0:	f001 fcde 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ba:	48b4      	ldr	r0, [pc, #720]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80016bc:	f001 fcd8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2180      	movs	r1, #128	@ 0x80
 80016c4:	48b1      	ldr	r0, [pc, #708]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80016c6:	f001 fcd3 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2140      	movs	r1, #64	@ 0x40
 80016ce:	48af      	ldr	r0, [pc, #700]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80016d0:	f001 fcce 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2101      	movs	r1, #1
 80016d8:	48ac      	ldr	r0, [pc, #688]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80016da:	f001 fcc9 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2102      	movs	r1, #2
 80016e2:	48aa      	ldr	r0, [pc, #680]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80016e4:	f001 fcc4 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2104      	movs	r1, #4
 80016ec:	48a7      	ldr	r0, [pc, #668]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80016ee:	f001 fcbf 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2108      	movs	r1, #8
 80016f6:	48a5      	ldr	r0, [pc, #660]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80016f8:	f001 fcba 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001702:	48a3      	ldr	r0, [pc, #652]	@ (8001990 <HAL_UART_RxCpltCallback+0xef8>)
 8001704:	f001 fcb4 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 8001708:	4ba2      	ldr	r3, [pc, #648]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2264      	movs	r2, #100	@ 0x64
 800170e:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001710:	4ba0      	ldr	r3, [pc, #640]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2264      	movs	r2, #100	@ 0x64
 8001716:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001718:	f000 bf1b 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x1A){
 800171c:	4b9a      	ldr	r3, [pc, #616]	@ (8001988 <HAL_UART_RxCpltCallback+0xef0>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b1a      	cmp	r3, #26
 8001722:	d139      	bne.n	8001798 <HAL_UART_RxCpltCallback+0xd00>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800172a:	4898      	ldr	r0, [pc, #608]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 800172c:	f001 fca0 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001736:	4895      	ldr	r0, [pc, #596]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001738:	f001 fc9a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	2180      	movs	r1, #128	@ 0x80
 8001740:	4892      	ldr	r0, [pc, #584]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001742:	f001 fc95 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2140      	movs	r1, #64	@ 0x40
 800174a:	4890      	ldr	r0, [pc, #576]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 800174c:	f001 fc90 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2101      	movs	r1, #1
 8001754:	488d      	ldr	r0, [pc, #564]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001756:	f001 fc8b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2102      	movs	r1, #2
 800175e:	488b      	ldr	r0, [pc, #556]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001760:	f001 fc86 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2104      	movs	r1, #4
 8001768:	4888      	ldr	r0, [pc, #544]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 800176a:	f001 fc81 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	2108      	movs	r1, #8
 8001772:	4886      	ldr	r0, [pc, #536]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001774:	f001 fc7c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800177e:	4884      	ldr	r0, [pc, #528]	@ (8001990 <HAL_UART_RxCpltCallback+0xef8>)
 8001780:	f001 fc76 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 8001784:	4b83      	ldr	r3, [pc, #524]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2214      	movs	r2, #20
 800178a:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 800178c:	4b81      	ldr	r3, [pc, #516]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2214      	movs	r2, #20
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001794:	f000 bedd 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x1B){
 8001798:	4b7b      	ldr	r3, [pc, #492]	@ (8001988 <HAL_UART_RxCpltCallback+0xef0>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b1b      	cmp	r3, #27
 800179e:	d139      	bne.n	8001814 <HAL_UART_RxCpltCallback+0xd7c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a6:	4879      	ldr	r0, [pc, #484]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80017a8:	f001 fc62 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017b2:	4876      	ldr	r0, [pc, #472]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80017b4:	f001 fc5c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2180      	movs	r1, #128	@ 0x80
 80017bc:	4873      	ldr	r0, [pc, #460]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80017be:	f001 fc57 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2140      	movs	r1, #64	@ 0x40
 80017c6:	4871      	ldr	r0, [pc, #452]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80017c8:	f001 fc52 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2101      	movs	r1, #1
 80017d0:	486e      	ldr	r0, [pc, #440]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80017d2:	f001 fc4d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2102      	movs	r1, #2
 80017da:	486c      	ldr	r0, [pc, #432]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80017dc:	f001 fc48 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2104      	movs	r1, #4
 80017e4:	4869      	ldr	r0, [pc, #420]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80017e6:	f001 fc43 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80017ea:	2201      	movs	r2, #1
 80017ec:	2108      	movs	r1, #8
 80017ee:	4867      	ldr	r0, [pc, #412]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80017f0:	f001 fc3e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017fa:	4865      	ldr	r0, [pc, #404]	@ (8001990 <HAL_UART_RxCpltCallback+0xef8>)
 80017fc:	f001 fc38 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 8001800:	4b64      	ldr	r3, [pc, #400]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2228      	movs	r2, #40	@ 0x28
 8001806:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 8001808:	4b62      	ldr	r3, [pc, #392]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2228      	movs	r2, #40	@ 0x28
 800180e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001810:	f000 be9f 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x1C){
 8001814:	4b5c      	ldr	r3, [pc, #368]	@ (8001988 <HAL_UART_RxCpltCallback+0xef0>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b1c      	cmp	r3, #28
 800181a:	d139      	bne.n	8001890 <HAL_UART_RxCpltCallback+0xdf8>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001822:	485a      	ldr	r0, [pc, #360]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001824:	f001 fc24 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800182e:	4857      	ldr	r0, [pc, #348]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001830:	f001 fc1e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	2180      	movs	r1, #128	@ 0x80
 8001838:	4854      	ldr	r0, [pc, #336]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 800183a:	f001 fc19 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2140      	movs	r1, #64	@ 0x40
 8001842:	4852      	ldr	r0, [pc, #328]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001844:	f001 fc14 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2101      	movs	r1, #1
 800184c:	484f      	ldr	r0, [pc, #316]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 800184e:	f001 fc0f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2102      	movs	r1, #2
 8001856:	484d      	ldr	r0, [pc, #308]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001858:	f001 fc0a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2104      	movs	r1, #4
 8001860:	484a      	ldr	r0, [pc, #296]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001862:	f001 fc05 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	2108      	movs	r1, #8
 800186a:	4848      	ldr	r0, [pc, #288]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 800186c:	f001 fc00 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001876:	4846      	ldr	r0, [pc, #280]	@ (8001990 <HAL_UART_RxCpltCallback+0xef8>)
 8001878:	f001 fbfa 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 800187c:	4b45      	ldr	r3, [pc, #276]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	223c      	movs	r2, #60	@ 0x3c
 8001882:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 8001884:	4b43      	ldr	r3, [pc, #268]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	223c      	movs	r2, #60	@ 0x3c
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800188c:	f000 be61 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x1D){
 8001890:	4b3d      	ldr	r3, [pc, #244]	@ (8001988 <HAL_UART_RxCpltCallback+0xef0>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b1d      	cmp	r3, #29
 8001896:	d139      	bne.n	800190c <HAL_UART_RxCpltCallback+0xe74>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800189e:	483b      	ldr	r0, [pc, #236]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80018a0:	f001 fbe6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018aa:	4838      	ldr	r0, [pc, #224]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80018ac:	f001 fbe0 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	4835      	ldr	r0, [pc, #212]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80018b6:	f001 fbdb 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2140      	movs	r1, #64	@ 0x40
 80018be:	4833      	ldr	r0, [pc, #204]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80018c0:	f001 fbd6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2101      	movs	r1, #1
 80018c8:	4830      	ldr	r0, [pc, #192]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80018ca:	f001 fbd1 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2102      	movs	r1, #2
 80018d2:	482e      	ldr	r0, [pc, #184]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80018d4:	f001 fbcc 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2104      	movs	r1, #4
 80018dc:	482b      	ldr	r0, [pc, #172]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80018de:	f001 fbc7 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2108      	movs	r1, #8
 80018e6:	4829      	ldr	r0, [pc, #164]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 80018e8:	f001 fbc2 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018f2:	4827      	ldr	r0, [pc, #156]	@ (8001990 <HAL_UART_RxCpltCallback+0xef8>)
 80018f4:	f001 fbbc 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 80018f8:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2250      	movs	r2, #80	@ 0x50
 80018fe:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 8001900:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2250      	movs	r2, #80	@ 0x50
 8001906:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001908:	f000 be23 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x1E){
 800190c:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <HAL_UART_RxCpltCallback+0xef0>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b1e      	cmp	r3, #30
 8001912:	d141      	bne.n	8001998 <HAL_UART_RxCpltCallback+0xf00>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800191a:	481c      	ldr	r0, [pc, #112]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 800191c:	f001 fba8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001926:	4819      	ldr	r0, [pc, #100]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001928:	f001 fba2 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	2180      	movs	r1, #128	@ 0x80
 8001930:	4816      	ldr	r0, [pc, #88]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001932:	f001 fb9d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2140      	movs	r1, #64	@ 0x40
 800193a:	4814      	ldr	r0, [pc, #80]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 800193c:	f001 fb98 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	2101      	movs	r1, #1
 8001944:	4811      	ldr	r0, [pc, #68]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001946:	f001 fb93 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2102      	movs	r1, #2
 800194e:	480f      	ldr	r0, [pc, #60]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001950:	f001 fb8e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2104      	movs	r1, #4
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 800195a:	f001 fb89 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2108      	movs	r1, #8
 8001962:	480a      	ldr	r0, [pc, #40]	@ (800198c <HAL_UART_RxCpltCallback+0xef4>)
 8001964:	f001 fb84 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800196e:	4808      	ldr	r0, [pc, #32]	@ (8001990 <HAL_UART_RxCpltCallback+0xef8>)
 8001970:	f001 fb7e 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 8001974:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2264      	movs	r2, #100	@ 0x64
 800197a:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_UART_RxCpltCallback+0xefc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2264      	movs	r2, #100	@ 0x64
 8001982:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001984:	f000 bde5 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
 8001988:	200001d0 	.word	0x200001d0
 800198c:	48000800 	.word	0x48000800
 8001990:	48000400 	.word	0x48000400
 8001994:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x1F){
 8001998:	4bb9      	ldr	r3, [pc, #740]	@ (8001c80 <HAL_UART_RxCpltCallback+0x11e8>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b1f      	cmp	r3, #31
 800199e:	d139      	bne.n	8001a14 <HAL_UART_RxCpltCallback+0xf7c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019a6:	48b7      	ldr	r0, [pc, #732]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 80019a8:	f001 fb62 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019b2:	48b4      	ldr	r0, [pc, #720]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 80019b4:	f001 fb5c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	2180      	movs	r1, #128	@ 0x80
 80019bc:	48b1      	ldr	r0, [pc, #708]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 80019be:	f001 fb57 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2140      	movs	r1, #64	@ 0x40
 80019c6:	48af      	ldr	r0, [pc, #700]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 80019c8:	f001 fb52 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2101      	movs	r1, #1
 80019d0:	48ac      	ldr	r0, [pc, #688]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 80019d2:	f001 fb4d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2102      	movs	r1, #2
 80019da:	48aa      	ldr	r0, [pc, #680]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 80019dc:	f001 fb48 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2104      	movs	r1, #4
 80019e4:	48a7      	ldr	r0, [pc, #668]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 80019e6:	f001 fb43 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2108      	movs	r1, #8
 80019ee:	48a5      	ldr	r0, [pc, #660]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 80019f0:	f001 fb3e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019fa:	48a3      	ldr	r0, [pc, #652]	@ (8001c88 <HAL_UART_RxCpltCallback+0x11f0>)
 80019fc:	f001 fb38 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 8001a00:	4ba2      	ldr	r3, [pc, #648]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2214      	movs	r2, #20
 8001a06:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 8001a08:	4ba0      	ldr	r3, [pc, #640]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2214      	movs	r2, #20
 8001a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001a10:	f000 bd9f 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x20){
 8001a14:	4b9a      	ldr	r3, [pc, #616]	@ (8001c80 <HAL_UART_RxCpltCallback+0x11e8>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b20      	cmp	r3, #32
 8001a1a:	d139      	bne.n	8001a90 <HAL_UART_RxCpltCallback+0xff8>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a22:	4898      	ldr	r0, [pc, #608]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a24:	f001 fb24 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a2e:	4895      	ldr	r0, [pc, #596]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a30:	f001 fb1e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2180      	movs	r1, #128	@ 0x80
 8001a38:	4892      	ldr	r0, [pc, #584]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a3a:	f001 fb19 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2140      	movs	r1, #64	@ 0x40
 8001a42:	4890      	ldr	r0, [pc, #576]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a44:	f001 fb14 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	488d      	ldr	r0, [pc, #564]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a4e:	f001 fb0f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2102      	movs	r1, #2
 8001a56:	488b      	ldr	r0, [pc, #556]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a58:	f001 fb0a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2104      	movs	r1, #4
 8001a60:	4888      	ldr	r0, [pc, #544]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a62:	f001 fb05 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2108      	movs	r1, #8
 8001a6a:	4886      	ldr	r0, [pc, #536]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a6c:	f001 fb00 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a76:	4884      	ldr	r0, [pc, #528]	@ (8001c88 <HAL_UART_RxCpltCallback+0x11f0>)
 8001a78:	f001 fafa 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 8001a7c:	4b83      	ldr	r3, [pc, #524]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2228      	movs	r2, #40	@ 0x28
 8001a82:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 8001a84:	4b81      	ldr	r3, [pc, #516]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2228      	movs	r2, #40	@ 0x28
 8001a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001a8c:	f000 bd61 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x21){
 8001a90:	4b7b      	ldr	r3, [pc, #492]	@ (8001c80 <HAL_UART_RxCpltCallback+0x11e8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b21      	cmp	r3, #33	@ 0x21
 8001a96:	d139      	bne.n	8001b0c <HAL_UART_RxCpltCallback+0x1074>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a9e:	4879      	ldr	r0, [pc, #484]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001aa0:	f001 fae6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aaa:	4876      	ldr	r0, [pc, #472]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001aac:	f001 fae0 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2180      	movs	r1, #128	@ 0x80
 8001ab4:	4873      	ldr	r0, [pc, #460]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001ab6:	f001 fadb 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2140      	movs	r1, #64	@ 0x40
 8001abe:	4871      	ldr	r0, [pc, #452]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001ac0:	f001 fad6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	486e      	ldr	r0, [pc, #440]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001aca:	f001 fad1 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	486c      	ldr	r0, [pc, #432]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001ad4:	f001 facc 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2104      	movs	r1, #4
 8001adc:	4869      	ldr	r0, [pc, #420]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001ade:	f001 fac7 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2108      	movs	r1, #8
 8001ae6:	4867      	ldr	r0, [pc, #412]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001ae8:	f001 fac2 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001af2:	4865      	ldr	r0, [pc, #404]	@ (8001c88 <HAL_UART_RxCpltCallback+0x11f0>)
 8001af4:	f001 fabc 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 8001af8:	4b64      	ldr	r3, [pc, #400]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	223c      	movs	r2, #60	@ 0x3c
 8001afe:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 8001b00:	4b62      	ldr	r3, [pc, #392]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	223c      	movs	r2, #60	@ 0x3c
 8001b06:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001b08:	f000 bd23 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x22){
 8001b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8001c80 <HAL_UART_RxCpltCallback+0x11e8>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b22      	cmp	r3, #34	@ 0x22
 8001b12:	d139      	bne.n	8001b88 <HAL_UART_RxCpltCallback+0x10f0>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b1a:	485a      	ldr	r0, [pc, #360]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b1c:	f001 faa8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b26:	4857      	ldr	r0, [pc, #348]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b28:	f001 faa2 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2180      	movs	r1, #128	@ 0x80
 8001b30:	4854      	ldr	r0, [pc, #336]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b32:	f001 fa9d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2140      	movs	r1, #64	@ 0x40
 8001b3a:	4852      	ldr	r0, [pc, #328]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b3c:	f001 fa98 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2101      	movs	r1, #1
 8001b44:	484f      	ldr	r0, [pc, #316]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b46:	f001 fa93 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	484d      	ldr	r0, [pc, #308]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b50:	f001 fa8e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2104      	movs	r1, #4
 8001b58:	484a      	ldr	r0, [pc, #296]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b5a:	f001 fa89 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2108      	movs	r1, #8
 8001b62:	4848      	ldr	r0, [pc, #288]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b64:	f001 fa84 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b6e:	4846      	ldr	r0, [pc, #280]	@ (8001c88 <HAL_UART_RxCpltCallback+0x11f0>)
 8001b70:	f001 fa7e 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 8001b74:	4b45      	ldr	r3, [pc, #276]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2250      	movs	r2, #80	@ 0x50
 8001b7a:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2250      	movs	r2, #80	@ 0x50
 8001b82:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001b84:	f000 bce5 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x23){
 8001b88:	4b3d      	ldr	r3, [pc, #244]	@ (8001c80 <HAL_UART_RxCpltCallback+0x11e8>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b23      	cmp	r3, #35	@ 0x23
 8001b8e:	d139      	bne.n	8001c04 <HAL_UART_RxCpltCallback+0x116c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b96:	483b      	ldr	r0, [pc, #236]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b98:	f001 fa6a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ba2:	4838      	ldr	r0, [pc, #224]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001ba4:	f001 fa64 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2180      	movs	r1, #128	@ 0x80
 8001bac:	4835      	ldr	r0, [pc, #212]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001bae:	f001 fa5f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2140      	movs	r1, #64	@ 0x40
 8001bb6:	4833      	ldr	r0, [pc, #204]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001bb8:	f001 fa5a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4830      	ldr	r0, [pc, #192]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001bc2:	f001 fa55 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2102      	movs	r1, #2
 8001bca:	482e      	ldr	r0, [pc, #184]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001bcc:	f001 fa50 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	482b      	ldr	r0, [pc, #172]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001bd6:	f001 fa4b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2108      	movs	r1, #8
 8001bde:	4829      	ldr	r0, [pc, #164]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001be0:	f001 fa46 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bea:	4827      	ldr	r0, [pc, #156]	@ (8001c88 <HAL_UART_RxCpltCallback+0x11f0>)
 8001bec:	f001 fa40 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8001bf0:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2264      	movs	r2, #100	@ 0x64
 8001bf6:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2264      	movs	r2, #100	@ 0x64
 8001bfe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001c00:	f000 bca7 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x24){
 8001c04:	4b1e      	ldr	r3, [pc, #120]	@ (8001c80 <HAL_UART_RxCpltCallback+0x11e8>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b24      	cmp	r3, #36	@ 0x24
 8001c0a:	d141      	bne.n	8001c90 <HAL_UART_RxCpltCallback+0x11f8>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c12:	481c      	ldr	r0, [pc, #112]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c14:	f001 fa2c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c1e:	4819      	ldr	r0, [pc, #100]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c20:	f001 fa26 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2180      	movs	r1, #128	@ 0x80
 8001c28:	4816      	ldr	r0, [pc, #88]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c2a:	f001 fa21 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2140      	movs	r1, #64	@ 0x40
 8001c32:	4814      	ldr	r0, [pc, #80]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c34:	f001 fa1c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	4811      	ldr	r0, [pc, #68]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c3e:	f001 fa17 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001c42:	2201      	movs	r2, #1
 8001c44:	2102      	movs	r1, #2
 8001c46:	480f      	ldr	r0, [pc, #60]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c48:	f001 fa12 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2104      	movs	r1, #4
 8001c50:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c52:	f001 fa0d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2108      	movs	r1, #8
 8001c5a:	480a      	ldr	r0, [pc, #40]	@ (8001c84 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c5c:	f001 fa08 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c66:	4808      	ldr	r0, [pc, #32]	@ (8001c88 <HAL_UART_RxCpltCallback+0x11f0>)
 8001c68:	f001 fa02 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 8001c6c:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2214      	movs	r2, #20
 8001c72:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 8001c74:	4b05      	ldr	r3, [pc, #20]	@ (8001c8c <HAL_UART_RxCpltCallback+0x11f4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2214      	movs	r2, #20
 8001c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001c7c:	f000 bc69 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
 8001c80:	200001d0 	.word	0x200001d0
 8001c84:	48000800 	.word	0x48000800
 8001c88:	48000400 	.word	0x48000400
 8001c8c:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x25){
 8001c90:	4b9c      	ldr	r3, [pc, #624]	@ (8001f04 <HAL_UART_RxCpltCallback+0x146c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b25      	cmp	r3, #37	@ 0x25
 8001c96:	d139      	bne.n	8001d0c <HAL_UART_RxCpltCallback+0x1274>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c9e:	489a      	ldr	r0, [pc, #616]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001ca0:	f001 f9e6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001caa:	4897      	ldr	r0, [pc, #604]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001cac:	f001 f9e0 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2180      	movs	r1, #128	@ 0x80
 8001cb4:	4894      	ldr	r0, [pc, #592]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001cb6:	f001 f9db 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2140      	movs	r1, #64	@ 0x40
 8001cbe:	4892      	ldr	r0, [pc, #584]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001cc0:	f001 f9d6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	488f      	ldr	r0, [pc, #572]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001cca:	f001 f9d1 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	488d      	ldr	r0, [pc, #564]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001cd4:	f001 f9cc 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2104      	movs	r1, #4
 8001cdc:	488a      	ldr	r0, [pc, #552]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001cde:	f001 f9c7 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2108      	movs	r1, #8
 8001ce6:	4888      	ldr	r0, [pc, #544]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001ce8:	f001 f9c2 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cf2:	4886      	ldr	r0, [pc, #536]	@ (8001f0c <HAL_UART_RxCpltCallback+0x1474>)
 8001cf4:	f001 f9bc 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 8001cf8:	4b85      	ldr	r3, [pc, #532]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2228      	movs	r2, #40	@ 0x28
 8001cfe:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 8001d00:	4b83      	ldr	r3, [pc, #524]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2228      	movs	r2, #40	@ 0x28
 8001d06:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001d08:	f000 bc23 	b.w	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x26){
 8001d0c:	4b7d      	ldr	r3, [pc, #500]	@ (8001f04 <HAL_UART_RxCpltCallback+0x146c>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b26      	cmp	r3, #38	@ 0x26
 8001d12:	d138      	bne.n	8001d86 <HAL_UART_RxCpltCallback+0x12ee>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d1a:	487b      	ldr	r0, [pc, #492]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001d1c:	f001 f9a8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d26:	4878      	ldr	r0, [pc, #480]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001d28:	f001 f9a2 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2180      	movs	r1, #128	@ 0x80
 8001d30:	4875      	ldr	r0, [pc, #468]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001d32:	f001 f99d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	2140      	movs	r1, #64	@ 0x40
 8001d3a:	4873      	ldr	r0, [pc, #460]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001d3c:	f001 f998 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2101      	movs	r1, #1
 8001d44:	4870      	ldr	r0, [pc, #448]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001d46:	f001 f993 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	486e      	ldr	r0, [pc, #440]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001d50:	f001 f98e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2104      	movs	r1, #4
 8001d58:	486b      	ldr	r0, [pc, #428]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001d5a:	f001 f989 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2108      	movs	r1, #8
 8001d62:	4869      	ldr	r0, [pc, #420]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001d64:	f001 f984 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d6e:	4867      	ldr	r0, [pc, #412]	@ (8001f0c <HAL_UART_RxCpltCallback+0x1474>)
 8001d70:	f001 f97e 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 8001d74:	4b66      	ldr	r3, [pc, #408]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	223c      	movs	r2, #60	@ 0x3c
 8001d7a:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 8001d7c:	4b64      	ldr	r3, [pc, #400]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	223c      	movs	r2, #60	@ 0x3c
 8001d82:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001d84:	e3e5      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x27){
 8001d86:	4b5f      	ldr	r3, [pc, #380]	@ (8001f04 <HAL_UART_RxCpltCallback+0x146c>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b27      	cmp	r3, #39	@ 0x27
 8001d8c:	d138      	bne.n	8001e00 <HAL_UART_RxCpltCallback+0x1368>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d94:	485c      	ldr	r0, [pc, #368]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001d96:	f001 f96b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001da0:	4859      	ldr	r0, [pc, #356]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001da2:	f001 f965 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2180      	movs	r1, #128	@ 0x80
 8001daa:	4857      	ldr	r0, [pc, #348]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001dac:	f001 f960 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8001db0:	2201      	movs	r2, #1
 8001db2:	2140      	movs	r1, #64	@ 0x40
 8001db4:	4854      	ldr	r0, [pc, #336]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001db6:	f001 f95b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	4852      	ldr	r0, [pc, #328]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001dc0:	f001 f956 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	484f      	ldr	r0, [pc, #316]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001dca:	f001 f951 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	484d      	ldr	r0, [pc, #308]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001dd4:	f001 f94c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2108      	movs	r1, #8
 8001ddc:	484a      	ldr	r0, [pc, #296]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001dde:	f001 f947 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001de8:	4848      	ldr	r0, [pc, #288]	@ (8001f0c <HAL_UART_RxCpltCallback+0x1474>)
 8001dea:	f001 f941 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 8001dee:	4b48      	ldr	r3, [pc, #288]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2250      	movs	r2, #80	@ 0x50
 8001df4:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 8001df6:	4b46      	ldr	r3, [pc, #280]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2250      	movs	r2, #80	@ 0x50
 8001dfc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001dfe:	e3a8      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x28){
 8001e00:	4b40      	ldr	r3, [pc, #256]	@ (8001f04 <HAL_UART_RxCpltCallback+0x146c>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b28      	cmp	r3, #40	@ 0x28
 8001e06:	d138      	bne.n	8001e7a <HAL_UART_RxCpltCallback+0x13e2>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e0e:	483e      	ldr	r0, [pc, #248]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001e10:	f001 f92e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001e14:	2200      	movs	r2, #0
 8001e16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e1a:	483b      	ldr	r0, [pc, #236]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001e1c:	f001 f928 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2180      	movs	r1, #128	@ 0x80
 8001e24:	4838      	ldr	r0, [pc, #224]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001e26:	f001 f923 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2140      	movs	r1, #64	@ 0x40
 8001e2e:	4836      	ldr	r0, [pc, #216]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001e30:	f001 f91e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2101      	movs	r1, #1
 8001e38:	4833      	ldr	r0, [pc, #204]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001e3a:	f001 f919 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2102      	movs	r1, #2
 8001e42:	4831      	ldr	r0, [pc, #196]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001e44:	f001 f914 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	482e      	ldr	r0, [pc, #184]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001e4e:	f001 f90f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2108      	movs	r1, #8
 8001e56:	482c      	ldr	r0, [pc, #176]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001e58:	f001 f90a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e62:	482a      	ldr	r0, [pc, #168]	@ (8001f0c <HAL_UART_RxCpltCallback+0x1474>)
 8001e64:	f001 f904 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2264      	movs	r2, #100	@ 0x64
 8001e6e:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 8001e70:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2264      	movs	r2, #100	@ 0x64
 8001e76:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001e78:	e36b      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x29){
 8001e7a:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <HAL_UART_RxCpltCallback+0x146c>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b29      	cmp	r3, #41	@ 0x29
 8001e80:	d148      	bne.n	8001f14 <HAL_UART_RxCpltCallback+0x147c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8001e82:	2201      	movs	r2, #1
 8001e84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e88:	481f      	ldr	r0, [pc, #124]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001e8a:	f001 f8f1 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e94:	481c      	ldr	r0, [pc, #112]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001e96:	f001 f8eb 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2180      	movs	r1, #128	@ 0x80
 8001e9e:	481a      	ldr	r0, [pc, #104]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001ea0:	f001 f8e6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2140      	movs	r1, #64	@ 0x40
 8001ea8:	4817      	ldr	r0, [pc, #92]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001eaa:	f001 f8e1 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4815      	ldr	r0, [pc, #84]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001eb4:	f001 f8dc 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2102      	movs	r1, #2
 8001ebc:	4812      	ldr	r0, [pc, #72]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001ebe:	f001 f8d7 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	4810      	ldr	r0, [pc, #64]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001ec8:	f001 f8d2 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2108      	movs	r1, #8
 8001ed0:	480d      	ldr	r0, [pc, #52]	@ (8001f08 <HAL_UART_RxCpltCallback+0x1470>)
 8001ed2:	f001 f8cd 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001edc:	480b      	ldr	r0, [pc, #44]	@ (8001f0c <HAL_UART_RxCpltCallback+0x1474>)
 8001ede:	f001 f8c7 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2214      	movs	r2, #20
 8001ee8:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2214      	movs	r2, #20
 8001ef0:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 8001ef2:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2214      	movs	r2, #20
 8001ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 8001efa:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_UART_RxCpltCallback+0x1478>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2214      	movs	r2, #20
 8001f00:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001f02:	e326      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
 8001f04:	200001d0 	.word	0x200001d0
 8001f08:	48000800 	.word	0x48000800
 8001f0c:	48000400 	.word	0x48000400
 8001f10:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x2A){
 8001f14:	4bac      	ldr	r3, [pc, #688]	@ (80021c8 <HAL_UART_RxCpltCallback+0x1730>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f1a:	d140      	bne.n	8001f9e <HAL_UART_RxCpltCallback+0x1506>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f22:	48aa      	ldr	r0, [pc, #680]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001f24:	f001 f8a4 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f2e:	48a7      	ldr	r0, [pc, #668]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001f30:	f001 f89e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001f34:	2201      	movs	r2, #1
 8001f36:	2180      	movs	r1, #128	@ 0x80
 8001f38:	48a4      	ldr	r0, [pc, #656]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001f3a:	f001 f899 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2140      	movs	r1, #64	@ 0x40
 8001f42:	48a2      	ldr	r0, [pc, #648]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001f44:	f001 f894 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	489f      	ldr	r0, [pc, #636]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001f4e:	f001 f88f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2102      	movs	r1, #2
 8001f56:	489d      	ldr	r0, [pc, #628]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001f58:	f001 f88a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	2104      	movs	r1, #4
 8001f60:	489a      	ldr	r0, [pc, #616]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001f62:	f001 f885 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2108      	movs	r1, #8
 8001f6a:	4898      	ldr	r0, [pc, #608]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001f6c:	f001 f880 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f76:	4896      	ldr	r0, [pc, #600]	@ (80021d0 <HAL_UART_RxCpltCallback+0x1738>)
 8001f78:	f001 f87a 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 8001f7c:	4b95      	ldr	r3, [pc, #596]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2228      	movs	r2, #40	@ 0x28
 8001f82:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 8001f84:	4b93      	ldr	r3, [pc, #588]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2228      	movs	r2, #40	@ 0x28
 8001f8a:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 8001f8c:	4b91      	ldr	r3, [pc, #580]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2228      	movs	r2, #40	@ 0x28
 8001f92:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 8001f94:	4b8f      	ldr	r3, [pc, #572]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2228      	movs	r2, #40	@ 0x28
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001f9c:	e2d9      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x2B){
 8001f9e:	4b8a      	ldr	r3, [pc, #552]	@ (80021c8 <HAL_UART_RxCpltCallback+0x1730>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b2b      	cmp	r3, #43	@ 0x2b
 8001fa4:	d140      	bne.n	8002028 <HAL_UART_RxCpltCallback+0x1590>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fac:	4887      	ldr	r0, [pc, #540]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001fae:	f001 f85f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fb8:	4884      	ldr	r0, [pc, #528]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001fba:	f001 f859 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2180      	movs	r1, #128	@ 0x80
 8001fc2:	4882      	ldr	r0, [pc, #520]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001fc4:	f001 f854 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2140      	movs	r1, #64	@ 0x40
 8001fcc:	487f      	ldr	r0, [pc, #508]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001fce:	f001 f84f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	487d      	ldr	r0, [pc, #500]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001fd8:	f001 f84a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2102      	movs	r1, #2
 8001fe0:	487a      	ldr	r0, [pc, #488]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001fe2:	f001 f845 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2104      	movs	r1, #4
 8001fea:	4878      	ldr	r0, [pc, #480]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001fec:	f001 f840 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4875      	ldr	r0, [pc, #468]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8001ff6:	f001 f83b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002000:	4873      	ldr	r0, [pc, #460]	@ (80021d0 <HAL_UART_RxCpltCallback+0x1738>)
 8002002:	f001 f835 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 8002006:	4b73      	ldr	r3, [pc, #460]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	223c      	movs	r2, #60	@ 0x3c
 800200c:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 800200e:	4b71      	ldr	r3, [pc, #452]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	223c      	movs	r2, #60	@ 0x3c
 8002014:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 8002016:	4b6f      	ldr	r3, [pc, #444]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	223c      	movs	r2, #60	@ 0x3c
 800201c:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 800201e:	4b6d      	ldr	r3, [pc, #436]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	223c      	movs	r2, #60	@ 0x3c
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002026:	e294      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x2C){
 8002028:	4b67      	ldr	r3, [pc, #412]	@ (80021c8 <HAL_UART_RxCpltCallback+0x1730>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b2c      	cmp	r3, #44	@ 0x2c
 800202e:	d140      	bne.n	80020b2 <HAL_UART_RxCpltCallback+0x161a>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002036:	4865      	ldr	r0, [pc, #404]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002038:	f001 f81a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002042:	4862      	ldr	r0, [pc, #392]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002044:	f001 f814 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8002048:	2201      	movs	r2, #1
 800204a:	2180      	movs	r1, #128	@ 0x80
 800204c:	485f      	ldr	r0, [pc, #380]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 800204e:	f001 f80f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	2140      	movs	r1, #64	@ 0x40
 8002056:	485d      	ldr	r0, [pc, #372]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002058:	f001 f80a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 800205c:	2201      	movs	r2, #1
 800205e:	2101      	movs	r1, #1
 8002060:	485a      	ldr	r0, [pc, #360]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002062:	f001 f805 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	2102      	movs	r1, #2
 800206a:	4858      	ldr	r0, [pc, #352]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 800206c:	f001 f800 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8002070:	2201      	movs	r2, #1
 8002072:	2104      	movs	r1, #4
 8002074:	4855      	ldr	r0, [pc, #340]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002076:	f000 fffb 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2108      	movs	r1, #8
 800207e:	4853      	ldr	r0, [pc, #332]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002080:	f000 fff6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800208a:	4851      	ldr	r0, [pc, #324]	@ (80021d0 <HAL_UART_RxCpltCallback+0x1738>)
 800208c:	f000 fff0 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 8002090:	4b50      	ldr	r3, [pc, #320]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2250      	movs	r2, #80	@ 0x50
 8002096:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 8002098:	4b4e      	ldr	r3, [pc, #312]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2250      	movs	r2, #80	@ 0x50
 800209e:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 80020a0:	4b4c      	ldr	r3, [pc, #304]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2250      	movs	r2, #80	@ 0x50
 80020a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 80020a8:	4b4a      	ldr	r3, [pc, #296]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2250      	movs	r2, #80	@ 0x50
 80020ae:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80020b0:	e24f      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x2D){
 80020b2:	4b45      	ldr	r3, [pc, #276]	@ (80021c8 <HAL_UART_RxCpltCallback+0x1730>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b2d      	cmp	r3, #45	@ 0x2d
 80020b8:	d140      	bne.n	800213c <HAL_UART_RxCpltCallback+0x16a4>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020c0:	4842      	ldr	r0, [pc, #264]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 80020c2:	f000 ffd5 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020cc:	483f      	ldr	r0, [pc, #252]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 80020ce:	f000 ffcf 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 80020d2:	2201      	movs	r2, #1
 80020d4:	2180      	movs	r1, #128	@ 0x80
 80020d6:	483d      	ldr	r0, [pc, #244]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 80020d8:	f000 ffca 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	2140      	movs	r1, #64	@ 0x40
 80020e0:	483a      	ldr	r0, [pc, #232]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 80020e2:	f000 ffc5 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	2101      	movs	r1, #1
 80020ea:	4838      	ldr	r0, [pc, #224]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 80020ec:	f000 ffc0 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2102      	movs	r1, #2
 80020f4:	4835      	ldr	r0, [pc, #212]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 80020f6:	f000 ffbb 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	2104      	movs	r1, #4
 80020fe:	4833      	ldr	r0, [pc, #204]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002100:	f000 ffb6 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	2108      	movs	r1, #8
 8002108:	4830      	ldr	r0, [pc, #192]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 800210a:	f000 ffb1 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800210e:	2201      	movs	r2, #1
 8002110:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002114:	482e      	ldr	r0, [pc, #184]	@ (80021d0 <HAL_UART_RxCpltCallback+0x1738>)
 8002116:	f000 ffab 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 800211a:	4b2e      	ldr	r3, [pc, #184]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2264      	movs	r2, #100	@ 0x64
 8002120:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8002122:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2264      	movs	r2, #100	@ 0x64
 8002128:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 800212a:	4b2a      	ldr	r3, [pc, #168]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2264      	movs	r2, #100	@ 0x64
 8002130:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8002132:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2264      	movs	r2, #100	@ 0x64
 8002138:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800213a:	e20a      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x2E){
 800213c:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <HAL_UART_RxCpltCallback+0x1730>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b2e      	cmp	r3, #46	@ 0x2e
 8002142:	d149      	bne.n	80021d8 <HAL_UART_RxCpltCallback+0x1740>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800214a:	4820      	ldr	r0, [pc, #128]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 800214c:	f000 ff90 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8002150:	2201      	movs	r2, #1
 8002152:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002156:	481d      	ldr	r0, [pc, #116]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002158:	f000 ff8a 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	481a      	ldr	r0, [pc, #104]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002162:	f000 ff85 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8002166:	2201      	movs	r2, #1
 8002168:	2140      	movs	r1, #64	@ 0x40
 800216a:	4818      	ldr	r0, [pc, #96]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 800216c:	f000 ff80 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8002170:	2200      	movs	r2, #0
 8002172:	2101      	movs	r1, #1
 8002174:	4815      	ldr	r0, [pc, #84]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002176:	f000 ff7b 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	2102      	movs	r1, #2
 800217e:	4813      	ldr	r0, [pc, #76]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002180:	f000 ff76 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	2104      	movs	r1, #4
 8002188:	4810      	ldr	r0, [pc, #64]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 800218a:	f000 ff71 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	2108      	movs	r1, #8
 8002192:	480e      	ldr	r0, [pc, #56]	@ (80021cc <HAL_UART_RxCpltCallback+0x1734>)
 8002194:	f000 ff6c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002198:	2201      	movs	r2, #1
 800219a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800219e:	480c      	ldr	r0, [pc, #48]	@ (80021d0 <HAL_UART_RxCpltCallback+0x1738>)
 80021a0:	f000 ff66 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2214      	movs	r2, #20
 80021aa:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2214      	movs	r2, #20
 80021b2:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 80021b4:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2214      	movs	r2, #20
 80021ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <HAL_UART_RxCpltCallback+0x173c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2214      	movs	r2, #20
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80021c4:	e1c5      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
 80021c6:	bf00      	nop
 80021c8:	200001d0 	.word	0x200001d0
 80021cc:	48000800 	.word	0x48000800
 80021d0:	48000400 	.word	0x48000400
 80021d4:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x2F){
 80021d8:	4ba9      	ldr	r3, [pc, #676]	@ (8002480 <HAL_UART_RxCpltCallback+0x19e8>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80021de:	d140      	bne.n	8002262 <HAL_UART_RxCpltCallback+0x17ca>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021e6:	48a7      	ldr	r0, [pc, #668]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80021e8:	f000 ff42 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 80021ec:	2201      	movs	r2, #1
 80021ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021f2:	48a4      	ldr	r0, [pc, #656]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80021f4:	f000 ff3c 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2180      	movs	r1, #128	@ 0x80
 80021fc:	48a1      	ldr	r0, [pc, #644]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80021fe:	f000 ff37 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8002202:	2201      	movs	r2, #1
 8002204:	2140      	movs	r1, #64	@ 0x40
 8002206:	489f      	ldr	r0, [pc, #636]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002208:	f000 ff32 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 800220c:	2200      	movs	r2, #0
 800220e:	2101      	movs	r1, #1
 8002210:	489c      	ldr	r0, [pc, #624]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002212:	f000 ff2d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8002216:	2201      	movs	r2, #1
 8002218:	2102      	movs	r1, #2
 800221a:	489a      	ldr	r0, [pc, #616]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 800221c:	f000 ff28 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	2104      	movs	r1, #4
 8002224:	4897      	ldr	r0, [pc, #604]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002226:	f000 ff23 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 800222a:	2201      	movs	r2, #1
 800222c:	2108      	movs	r1, #8
 800222e:	4895      	ldr	r0, [pc, #596]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002230:	f000 ff1e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002234:	2201      	movs	r2, #1
 8002236:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800223a:	4893      	ldr	r0, [pc, #588]	@ (8002488 <HAL_UART_RxCpltCallback+0x19f0>)
 800223c:	f000 ff18 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 8002240:	4b92      	ldr	r3, [pc, #584]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2228      	movs	r2, #40	@ 0x28
 8002246:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 8002248:	4b90      	ldr	r3, [pc, #576]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2228      	movs	r2, #40	@ 0x28
 800224e:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 8002250:	4b8e      	ldr	r3, [pc, #568]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2228      	movs	r2, #40	@ 0x28
 8002256:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 8002258:	4b8c      	ldr	r3, [pc, #560]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2228      	movs	r2, #40	@ 0x28
 800225e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002260:	e177      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x30){
 8002262:	4b87      	ldr	r3, [pc, #540]	@ (8002480 <HAL_UART_RxCpltCallback+0x19e8>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b30      	cmp	r3, #48	@ 0x30
 8002268:	d140      	bne.n	80022ec <HAL_UART_RxCpltCallback+0x1854>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002270:	4884      	ldr	r0, [pc, #528]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002272:	f000 fefd 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8002276:	2201      	movs	r2, #1
 8002278:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800227c:	4881      	ldr	r0, [pc, #516]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 800227e:	f000 fef7 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	2180      	movs	r1, #128	@ 0x80
 8002286:	487f      	ldr	r0, [pc, #508]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002288:	f000 fef2 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 800228c:	2201      	movs	r2, #1
 800228e:	2140      	movs	r1, #64	@ 0x40
 8002290:	487c      	ldr	r0, [pc, #496]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002292:	f000 feed 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	2101      	movs	r1, #1
 800229a:	487a      	ldr	r0, [pc, #488]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 800229c:	f000 fee8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 80022a0:	2201      	movs	r2, #1
 80022a2:	2102      	movs	r1, #2
 80022a4:	4877      	ldr	r0, [pc, #476]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80022a6:	f000 fee3 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2104      	movs	r1, #4
 80022ae:	4875      	ldr	r0, [pc, #468]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80022b0:	f000 fede 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80022b4:	2201      	movs	r2, #1
 80022b6:	2108      	movs	r1, #8
 80022b8:	4872      	ldr	r0, [pc, #456]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80022ba:	f000 fed9 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022c4:	4870      	ldr	r0, [pc, #448]	@ (8002488 <HAL_UART_RxCpltCallback+0x19f0>)
 80022c6:	f000 fed3 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 80022ca:	4b70      	ldr	r3, [pc, #448]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	223c      	movs	r2, #60	@ 0x3c
 80022d0:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 80022d2:	4b6e      	ldr	r3, [pc, #440]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	223c      	movs	r2, #60	@ 0x3c
 80022d8:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 80022da:	4b6c      	ldr	r3, [pc, #432]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	223c      	movs	r2, #60	@ 0x3c
 80022e0:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 80022e2:	4b6a      	ldr	r3, [pc, #424]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	223c      	movs	r2, #60	@ 0x3c
 80022e8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80022ea:	e132      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x31){
 80022ec:	4b64      	ldr	r3, [pc, #400]	@ (8002480 <HAL_UART_RxCpltCallback+0x19e8>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b31      	cmp	r3, #49	@ 0x31
 80022f2:	d140      	bne.n	8002376 <HAL_UART_RxCpltCallback+0x18de>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022fa:	4862      	ldr	r0, [pc, #392]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80022fc:	f000 feb8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8002300:	2201      	movs	r2, #1
 8002302:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002306:	485f      	ldr	r0, [pc, #380]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002308:	f000 feb2 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800230c:	2200      	movs	r2, #0
 800230e:	2180      	movs	r1, #128	@ 0x80
 8002310:	485c      	ldr	r0, [pc, #368]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002312:	f000 fead 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8002316:	2201      	movs	r2, #1
 8002318:	2140      	movs	r1, #64	@ 0x40
 800231a:	485a      	ldr	r0, [pc, #360]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 800231c:	f000 fea8 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	2101      	movs	r1, #1
 8002324:	4857      	ldr	r0, [pc, #348]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002326:	f000 fea3 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 800232a:	2201      	movs	r2, #1
 800232c:	2102      	movs	r1, #2
 800232e:	4855      	ldr	r0, [pc, #340]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002330:	f000 fe9e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	2104      	movs	r1, #4
 8002338:	4852      	ldr	r0, [pc, #328]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 800233a:	f000 fe99 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 800233e:	2201      	movs	r2, #1
 8002340:	2108      	movs	r1, #8
 8002342:	4850      	ldr	r0, [pc, #320]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002344:	f000 fe94 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002348:	2201      	movs	r2, #1
 800234a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800234e:	484e      	ldr	r0, [pc, #312]	@ (8002488 <HAL_UART_RxCpltCallback+0x19f0>)
 8002350:	f000 fe8e 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 8002354:	4b4d      	ldr	r3, [pc, #308]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2250      	movs	r2, #80	@ 0x50
 800235a:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 800235c:	4b4b      	ldr	r3, [pc, #300]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2250      	movs	r2, #80	@ 0x50
 8002362:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 8002364:	4b49      	ldr	r3, [pc, #292]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2250      	movs	r2, #80	@ 0x50
 800236a:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 800236c:	4b47      	ldr	r3, [pc, #284]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2250      	movs	r2, #80	@ 0x50
 8002372:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002374:	e0ed      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if (rx_byte == 0x32){
 8002376:	4b42      	ldr	r3, [pc, #264]	@ (8002480 <HAL_UART_RxCpltCallback+0x19e8>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b32      	cmp	r3, #50	@ 0x32
 800237c:	d140      	bne.n	8002400 <HAL_UART_RxCpltCallback+0x1968>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002384:	483f      	ldr	r0, [pc, #252]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002386:	f000 fe73 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 800238a:	2201      	movs	r2, #1
 800238c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002390:	483c      	ldr	r0, [pc, #240]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 8002392:	f000 fe6d 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8002396:	2200      	movs	r2, #0
 8002398:	2180      	movs	r1, #128	@ 0x80
 800239a:	483a      	ldr	r0, [pc, #232]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 800239c:	f000 fe68 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 80023a0:	2201      	movs	r2, #1
 80023a2:	2140      	movs	r1, #64	@ 0x40
 80023a4:	4837      	ldr	r0, [pc, #220]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80023a6:	f000 fe63 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2101      	movs	r1, #1
 80023ae:	4835      	ldr	r0, [pc, #212]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80023b0:	f000 fe5e 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 80023b4:	2201      	movs	r2, #1
 80023b6:	2102      	movs	r1, #2
 80023b8:	4832      	ldr	r0, [pc, #200]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80023ba:	f000 fe59 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	2104      	movs	r1, #4
 80023c2:	4830      	ldr	r0, [pc, #192]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80023c4:	f000 fe54 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80023c8:	2201      	movs	r2, #1
 80023ca:	2108      	movs	r1, #8
 80023cc:	482d      	ldr	r0, [pc, #180]	@ (8002484 <HAL_UART_RxCpltCallback+0x19ec>)
 80023ce:	f000 fe4f 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80023d2:	2201      	movs	r2, #1
 80023d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023d8:	482b      	ldr	r0, [pc, #172]	@ (8002488 <HAL_UART_RxCpltCallback+0x19f0>)
 80023da:	f000 fe49 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 80023de:	4b2b      	ldr	r3, [pc, #172]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2264      	movs	r2, #100	@ 0x64
 80023e4:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 80023e6:	4b29      	ldr	r3, [pc, #164]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2264      	movs	r2, #100	@ 0x64
 80023ec:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 80023ee:	4b27      	ldr	r3, [pc, #156]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2264      	movs	r2, #100	@ 0x64
 80023f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 80023f6:	4b25      	ldr	r3, [pc, #148]	@ (800248c <HAL_UART_RxCpltCallback+0x19f4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2264      	movs	r2, #100	@ 0x64
 80023fc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80023fe:	e0a8      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if(rx_byte == 0x33){
 8002400:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <HAL_UART_RxCpltCallback+0x19e8>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b33      	cmp	r3, #51	@ 0x33
 8002406:	d104      	bne.n	8002412 <HAL_UART_RxCpltCallback+0x197a>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10);
 8002408:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <HAL_UART_RxCpltCallback+0x19f8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	220a      	movs	r2, #10
 800240e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002410:	e09f      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if(rx_byte == 0x34){
 8002412:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <HAL_UART_RxCpltCallback+0x19e8>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b34      	cmp	r3, #52	@ 0x34
 8002418:	d104      	bne.n	8002424 <HAL_UART_RxCpltCallback+0x198c>
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 20);
 800241a:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <HAL_UART_RxCpltCallback+0x19f8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2214      	movs	r2, #20
 8002420:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002422:	e096      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if(rx_byte == 0x35){
 8002424:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_UART_RxCpltCallback+0x19e8>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b35      	cmp	r3, #53	@ 0x35
 800242a:	d104      	bne.n	8002436 <HAL_UART_RxCpltCallback+0x199e>
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 30);
 800242c:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <HAL_UART_RxCpltCallback+0x19f8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	221e      	movs	r2, #30
 8002432:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002434:	e08d      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if(rx_byte == 0x36){
 8002436:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <HAL_UART_RxCpltCallback+0x19e8>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b36      	cmp	r3, #54	@ 0x36
 800243c:	d104      	bne.n	8002448 <HAL_UART_RxCpltCallback+0x19b0>
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 40);
 800243e:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <HAL_UART_RxCpltCallback+0x19f8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2228      	movs	r2, #40	@ 0x28
 8002444:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002446:	e084      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if(rx_byte == 0x37){
 8002448:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_UART_RxCpltCallback+0x19e8>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b37      	cmp	r3, #55	@ 0x37
 800244e:	d104      	bne.n	800245a <HAL_UART_RxCpltCallback+0x19c2>
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8002450:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <HAL_UART_RxCpltCallback+0x19f8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2232      	movs	r2, #50	@ 0x32
 8002456:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002458:	e07b      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if(rx_byte == 0x38){
 800245a:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <HAL_UART_RxCpltCallback+0x19e8>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b38      	cmp	r3, #56	@ 0x38
 8002460:	d104      	bne.n	800246c <HAL_UART_RxCpltCallback+0x19d4>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 60);
 8002462:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_UART_RxCpltCallback+0x19f8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	223c      	movs	r2, #60	@ 0x3c
 8002468:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800246a:	e072      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if(rx_byte == 0x39){
 800246c:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <HAL_UART_RxCpltCallback+0x19e8>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b39      	cmp	r3, #57	@ 0x39
 8002472:	d10f      	bne.n	8002494 <HAL_UART_RxCpltCallback+0x19fc>
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 70);
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_UART_RxCpltCallback+0x19f8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2246      	movs	r2, #70	@ 0x46
 800247a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800247c:	e069      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
 800247e:	bf00      	nop
 8002480:	200001d0 	.word	0x200001d0
 8002484:	48000800 	.word	0x48000800
 8002488:	48000400 	.word	0x48000400
 800248c:	20000028 	.word	0x20000028
 8002490:	20000074 	.word	0x20000074
	  else if(rx_byte == 0x3A){
 8002494:	4b31      	ldr	r3, [pc, #196]	@ (800255c <HAL_UART_RxCpltCallback+0x1ac4>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b3a      	cmp	r3, #58	@ 0x3a
 800249a:	d104      	bne.n	80024a6 <HAL_UART_RxCpltCallback+0x1a0e>
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 80);
 800249c:	4b30      	ldr	r3, [pc, #192]	@ (8002560 <HAL_UART_RxCpltCallback+0x1ac8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2250      	movs	r2, #80	@ 0x50
 80024a2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80024a4:	e055      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if(rx_byte == 0x3B){
 80024a6:	4b2d      	ldr	r3, [pc, #180]	@ (800255c <HAL_UART_RxCpltCallback+0x1ac4>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80024ac:	d104      	bne.n	80024b8 <HAL_UART_RxCpltCallback+0x1a20>
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 90);
 80024ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002560 <HAL_UART_RxCpltCallback+0x1ac8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	225a      	movs	r2, #90	@ 0x5a
 80024b4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80024b6:	e04c      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
	  else if(rx_byte == 0x3C){
 80024b8:	4b28      	ldr	r3, [pc, #160]	@ (800255c <HAL_UART_RxCpltCallback+0x1ac4>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b3c      	cmp	r3, #60	@ 0x3c
 80024be:	d104      	bne.n	80024ca <HAL_UART_RxCpltCallback+0x1a32>
	  	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 80024c0:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <HAL_UART_RxCpltCallback+0x1ac8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2264      	movs	r2, #100	@ 0x64
 80024c6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80024c8:	e043      	b.n	8002552 <HAL_UART_RxCpltCallback+0x1aba>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024d0:	4824      	ldr	r0, [pc, #144]	@ (8002564 <HAL_UART_RxCpltCallback+0x1acc>)
 80024d2:	f000 fdcd 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 80024d6:	2200      	movs	r2, #0
 80024d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024dc:	4821      	ldr	r0, [pc, #132]	@ (8002564 <HAL_UART_RxCpltCallback+0x1acc>)
 80024de:	f000 fdc7 	bl	8003070 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2180      	movs	r1, #128	@ 0x80
 80024e6:	481f      	ldr	r0, [pc, #124]	@ (8002564 <HAL_UART_RxCpltCallback+0x1acc>)
 80024e8:	f000 fdc2 	bl	8003070 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2140      	movs	r1, #64	@ 0x40
 80024f0:	481c      	ldr	r0, [pc, #112]	@ (8002564 <HAL_UART_RxCpltCallback+0x1acc>)
 80024f2:	f000 fdbd 	bl	8003070 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2101      	movs	r1, #1
 80024fa:	481a      	ldr	r0, [pc, #104]	@ (8002564 <HAL_UART_RxCpltCallback+0x1acc>)
 80024fc:	f000 fdb8 	bl	8003070 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8002500:	2200      	movs	r2, #0
 8002502:	2102      	movs	r1, #2
 8002504:	4817      	ldr	r0, [pc, #92]	@ (8002564 <HAL_UART_RxCpltCallback+0x1acc>)
 8002506:	f000 fdb3 	bl	8003070 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	2104      	movs	r1, #4
 800250e:	4815      	ldr	r0, [pc, #84]	@ (8002564 <HAL_UART_RxCpltCallback+0x1acc>)
 8002510:	f000 fdae 	bl	8003070 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8002514:	2200      	movs	r2, #0
 8002516:	2108      	movs	r1, #8
 8002518:	4812      	ldr	r0, [pc, #72]	@ (8002564 <HAL_UART_RxCpltCallback+0x1acc>)
 800251a:	f000 fda9 	bl	8003070 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002524:	4810      	ldr	r0, [pc, #64]	@ (8002568 <HAL_UART_RxCpltCallback+0x1ad0>)
 8002526:	f000 fda3 	bl	8003070 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <HAL_UART_RxCpltCallback+0x1ad4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2200      	movs	r2, #0
 8002530:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8002532:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <HAL_UART_RxCpltCallback+0x1ad4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2200      	movs	r2, #0
 8002538:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800253a:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <HAL_UART_RxCpltCallback+0x1ad4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8002542:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <HAL_UART_RxCpltCallback+0x1ad4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	641a      	str	r2, [r3, #64]	@ 0x40
    	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800254a:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_UART_RxCpltCallback+0x1ac8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2200      	movs	r2, #0
 8002550:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200001d0 	.word	0x200001d0
 8002560:	20000074 	.word	0x20000074
 8002564:	48000800 	.word	0x48000800
 8002568:	48000400 	.word	0x48000400
 800256c:	20000028 	.word	0x20000028

08002570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002574:	b672      	cpsid	i
}
 8002576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <Error_Handler+0x8>

0800257c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <HAL_MspInit+0x44>)
 8002584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002586:	4a0e      	ldr	r2, [pc, #56]	@ (80025c0 <HAL_MspInit+0x44>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6613      	str	r3, [r2, #96]	@ 0x60
 800258e:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <HAL_MspInit+0x44>)
 8002590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_MspInit+0x44>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	4a08      	ldr	r2, [pc, #32]	@ (80025c0 <HAL_MspInit+0x44>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_MspInit+0x44>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000

080025c4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a13      	ldr	r2, [pc, #76]	@ (8002620 <HAL_TIM_Base_MspInit+0x5c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10c      	bne.n	80025f0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025d6:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <HAL_TIM_Base_MspInit+0x60>)
 80025d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025da:	4a12      	ldr	r2, [pc, #72]	@ (8002624 <HAL_TIM_Base_MspInit+0x60>)
 80025dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80025e2:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <HAL_TIM_Base_MspInit+0x60>)
 80025e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025ee:	e010      	b.n	8002612 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f8:	d10b      	bne.n	8002612 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <HAL_TIM_Base_MspInit+0x60>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fe:	4a09      	ldr	r2, [pc, #36]	@ (8002624 <HAL_TIM_Base_MspInit+0x60>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6593      	str	r3, [r2, #88]	@ 0x58
 8002606:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <HAL_TIM_Base_MspInit+0x60>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40012c00 	.word	0x40012c00
 8002624:	40021000 	.word	0x40021000

08002628 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	@ 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a24      	ldr	r2, [pc, #144]	@ (80026d8 <HAL_TIM_MspPostInit+0xb0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d11e      	bne.n	8002688 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <HAL_TIM_MspPostInit+0xb4>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	4a23      	ldr	r2, [pc, #140]	@ (80026dc <HAL_TIM_MspPostInit+0xb4>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002656:	4b21      	ldr	r3, [pc, #132]	@ (80026dc <HAL_TIM_MspPostInit+0xb4>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002662:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002674:	2301      	movs	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002682:	f000 fb7b 	bl	8002d7c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002686:	e022      	b.n	80026ce <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002690:	d11d      	bne.n	80026ce <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <HAL_TIM_MspPostInit+0xb4>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002696:	4a11      	ldr	r2, [pc, #68]	@ (80026dc <HAL_TIM_MspPostInit+0xb4>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800269e:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <HAL_TIM_MspPostInit+0xb4>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026bc:	2301      	movs	r3, #1
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4619      	mov	r1, r3
 80026c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ca:	f000 fb57 	bl	8002d7c <HAL_GPIO_Init>
}
 80026ce:	bf00      	nop
 80026d0:	3728      	adds	r7, #40	@ 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b0a6      	sub	sp, #152	@ 0x98
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f8:	f107 031c 	add.w	r3, r7, #28
 80026fc:	2268      	movs	r2, #104	@ 0x68
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f004 fa0f 	bl	8006b24 <memset>
  if(huart->Instance==UART4)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a57      	ldr	r2, [pc, #348]	@ (8002868 <HAL_UART_MspInit+0x188>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d166      	bne.n	80027de <HAL_UART_MspInit+0xfe>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002710:	2308      	movs	r3, #8
 8002712:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002714:	2300      	movs	r3, #0
 8002716:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002718:	f107 031c 	add.w	r3, r7, #28
 800271c:	4618      	mov	r0, r3
 800271e:	f001 fb5b 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002728:	f7ff ff22 	bl	8002570 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800272c:	4b4f      	ldr	r3, [pc, #316]	@ (800286c <HAL_UART_MspInit+0x18c>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	4a4e      	ldr	r2, [pc, #312]	@ (800286c <HAL_UART_MspInit+0x18c>)
 8002732:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002736:	6593      	str	r3, [r2, #88]	@ 0x58
 8002738:	4b4c      	ldr	r3, [pc, #304]	@ (800286c <HAL_UART_MspInit+0x18c>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002744:	4b49      	ldr	r3, [pc, #292]	@ (800286c <HAL_UART_MspInit+0x18c>)
 8002746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002748:	4a48      	ldr	r2, [pc, #288]	@ (800286c <HAL_UART_MspInit+0x18c>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002750:	4b46      	ldr	r3, [pc, #280]	@ (800286c <HAL_UART_MspInit+0x18c>)
 8002752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800275c:	4b43      	ldr	r3, [pc, #268]	@ (800286c <HAL_UART_MspInit+0x18c>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002760:	4a42      	ldr	r2, [pc, #264]	@ (800286c <HAL_UART_MspInit+0x18c>)
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002768:	4b40      	ldr	r3, [pc, #256]	@ (800286c <HAL_UART_MspInit+0x18c>)
 800276a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002774:	2301      	movs	r3, #1
 8002776:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800278c:	2308      	movs	r3, #8
 800278e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002796:	4619      	mov	r1, r3
 8002798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800279c:	f000 faee 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027ba:	2308      	movs	r3, #8
 80027bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80027c4:	4619      	mov	r1, r3
 80027c6:	482a      	ldr	r0, [pc, #168]	@ (8002870 <HAL_UART_MspInit+0x190>)
 80027c8:	f000 fad8 	bl	8002d7c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2100      	movs	r1, #0
 80027d0:	2034      	movs	r0, #52	@ 0x34
 80027d2:	f000 fa1e 	bl	8002c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80027d6:	2034      	movs	r0, #52	@ 0x34
 80027d8:	f000 fa37 	bl	8002c4a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80027dc:	e040      	b.n	8002860 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a24      	ldr	r2, [pc, #144]	@ (8002874 <HAL_UART_MspInit+0x194>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d13b      	bne.n	8002860 <HAL_UART_MspInit+0x180>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027e8:	2302      	movs	r3, #2
 80027ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 faef 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8002800:	f7ff feb6 	bl	8002570 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002804:	4b19      	ldr	r3, [pc, #100]	@ (800286c <HAL_UART_MspInit+0x18c>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	4a18      	ldr	r2, [pc, #96]	@ (800286c <HAL_UART_MspInit+0x18c>)
 800280a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002810:	4b16      	ldr	r3, [pc, #88]	@ (800286c <HAL_UART_MspInit+0x18c>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281c:	4b13      	ldr	r3, [pc, #76]	@ (800286c <HAL_UART_MspInit+0x18c>)
 800281e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002820:	4a12      	ldr	r2, [pc, #72]	@ (800286c <HAL_UART_MspInit+0x18c>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002828:	4b10      	ldr	r3, [pc, #64]	@ (800286c <HAL_UART_MspInit+0x18c>)
 800282a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002834:	230c      	movs	r3, #12
 8002836:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002846:	2303      	movs	r3, #3
 8002848:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800284c:	2307      	movs	r3, #7
 800284e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002856:	4619      	mov	r1, r3
 8002858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800285c:	f000 fa8e 	bl	8002d7c <HAL_GPIO_Init>
}
 8002860:	bf00      	nop
 8002862:	3798      	adds	r7, #152	@ 0x98
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40004c00 	.word	0x40004c00
 800286c:	40021000 	.word	0x40021000
 8002870:	48000800 	.word	0x48000800
 8002874:	40004400 	.word	0x40004400

08002878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <NMI_Handler+0x4>

08002880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002884:	bf00      	nop
 8002886:	e7fd      	b.n	8002884 <HardFault_Handler+0x4>

08002888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <MemManage_Handler+0x4>

08002890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <BusFault_Handler+0x4>

08002898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <UsageFault_Handler+0x4>

080028a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ce:	f000 f8a5 	bl	8002a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80028dc:	4802      	ldr	r0, [pc, #8]	@ (80028e8 <UART4_IRQHandler+0x10>)
 80028de:	f002 fe8d 	bl	80055fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200000c0 	.word	0x200000c0

080028ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <SystemInit+0x20>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f6:	4a05      	ldr	r2, [pc, #20]	@ (800290c <SystemInit+0x20>)
 80028f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002948 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002914:	f7ff ffea 	bl	80028ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002918:	480c      	ldr	r0, [pc, #48]	@ (800294c <LoopForever+0x6>)
  ldr r1, =_edata
 800291a:	490d      	ldr	r1, [pc, #52]	@ (8002950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800291c:	4a0d      	ldr	r2, [pc, #52]	@ (8002954 <LoopForever+0xe>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002920:	e002      	b.n	8002928 <LoopCopyDataInit>

08002922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002926:	3304      	adds	r3, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800292c:	d3f9      	bcc.n	8002922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292e:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002930:	4c0a      	ldr	r4, [pc, #40]	@ (800295c <LoopForever+0x16>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002934:	e001      	b.n	800293a <LoopFillZerobss>

08002936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002938:	3204      	adds	r2, #4

0800293a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800293c:	d3fb      	bcc.n	8002936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800293e:	f004 f8f9 	bl	8006b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002942:	f7fd fddd 	bl	8000500 <main>

08002946 <LoopForever>:

LoopForever:
    b LoopForever
 8002946:	e7fe      	b.n	8002946 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002954:	08006bec 	.word	0x08006bec
  ldr r2, =_sbss
 8002958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800295c:	200001d8 	.word	0x200001d8

08002960 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC1_IRQHandler>
	...

08002964 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800296e:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <HAL_Init+0x3c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a0b      	ldr	r2, [pc, #44]	@ (80029a0 <HAL_Init+0x3c>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002978:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297a:	2003      	movs	r0, #3
 800297c:	f000 f93e 	bl	8002bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002980:	2000      	movs	r0, #0
 8002982:	f000 f80f 	bl	80029a4 <HAL_InitTick>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	e001      	b.n	8002996 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002992:	f7ff fdf3 	bl	800257c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002996:	79fb      	ldrb	r3, [r7, #7]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40022000 	.word	0x40022000

080029a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029b0:	4b17      	ldr	r3, [pc, #92]	@ (8002a10 <HAL_InitTick+0x6c>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d023      	beq.n	8002a00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029b8:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <HAL_InitTick+0x70>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <HAL_InitTick+0x6c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4619      	mov	r1, r3
 80029c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f949 	bl	8002c66 <HAL_SYSTICK_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d809      	bhi.n	80029f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e0:	2200      	movs	r2, #0
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f000 f913 	bl	8002c12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <HAL_InitTick+0x74>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e007      	b.n	8002a04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e004      	b.n	8002a04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	e001      	b.n	8002a04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000008 	.word	0x20000008
 8002a14:	20000000 	.word	0x20000000
 8002a18:	20000004 	.word	0x20000004

08002a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a20:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_IncTick+0x20>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_IncTick+0x24>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a04      	ldr	r2, [pc, #16]	@ (8002a40 <HAL_IncTick+0x24>)
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000008 	.word	0x20000008
 8002a40:	200001d4 	.word	0x200001d4

08002a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return uwTick;
 8002a48:	4b03      	ldr	r3, [pc, #12]	@ (8002a58 <HAL_GetTick+0x14>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	200001d4 	.word	0x200001d4

08002a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8e:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60d3      	str	r3, [r2, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa8:	4b04      	ldr	r3, [pc, #16]	@ (8002abc <__NVIC_GetPriorityGrouping+0x18>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db0b      	blt.n	8002aea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4907      	ldr	r1, [pc, #28]	@ (8002af8 <__NVIC_EnableIRQ+0x38>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000e100 	.word	0xe000e100

08002afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	db0a      	blt.n	8002b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	490c      	ldr	r1, [pc, #48]	@ (8002b48 <__NVIC_SetPriority+0x4c>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b24:	e00a      	b.n	8002b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4908      	ldr	r1, [pc, #32]	@ (8002b4c <__NVIC_SetPriority+0x50>)
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3b04      	subs	r3, #4
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	440b      	add	r3, r1
 8002b3a:	761a      	strb	r2, [r3, #24]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000e100 	.word	0xe000e100
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	@ 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f1c3 0307 	rsb	r3, r3, #7
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	bf28      	it	cs
 8002b6e:	2304      	movcs	r3, #4
 8002b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	d902      	bls.n	8002b80 <NVIC_EncodePriority+0x30>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3b03      	subs	r3, #3
 8002b7e:	e000      	b.n	8002b82 <NVIC_EncodePriority+0x32>
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	401a      	ands	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b98:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	43d9      	mvns	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	4313      	orrs	r3, r2
         );
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3724      	adds	r7, #36	@ 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bc8:	d301      	bcc.n	8002bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e00f      	b.n	8002bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bce:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <SysTick_Config+0x40>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bd6:	210f      	movs	r1, #15
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bdc:	f7ff ff8e 	bl	8002afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be0:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <SysTick_Config+0x40>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be6:	4b04      	ldr	r3, [pc, #16]	@ (8002bf8 <SysTick_Config+0x40>)
 8002be8:	2207      	movs	r2, #7
 8002bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	e000e010 	.word	0xe000e010

08002bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ff29 	bl	8002a5c <__NVIC_SetPriorityGrouping>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c24:	f7ff ff3e 	bl	8002aa4 <__NVIC_GetPriorityGrouping>
 8002c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	6978      	ldr	r0, [r7, #20]
 8002c30:	f7ff ff8e 	bl	8002b50 <NVIC_EncodePriority>
 8002c34:	4602      	mov	r2, r0
 8002c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff5d 	bl	8002afc <__NVIC_SetPriority>
}
 8002c42:	bf00      	nop
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff31 	bl	8002ac0 <__NVIC_EnableIRQ>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ffa2 	bl	8002bb8 <SysTick_Config>
 8002c74:	4603      	mov	r3, r0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b085      	sub	sp, #20
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d008      	beq.n	8002ca8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e022      	b.n	8002cee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 020e 	bic.w	r2, r2, #14
 8002cb6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ccc:	f003 021c 	and.w	r2, r3, #28
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cda:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d005      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2204      	movs	r2, #4
 8002d16:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	e029      	b.n	8002d72 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 020e 	bic.w	r2, r2, #14
 8002d2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d42:	f003 021c 	and.w	r2, r3, #28
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
    }
  }
  return status;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d8a:	e154      	b.n	8003036 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2101      	movs	r1, #1
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8146 	beq.w	8003030 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d005      	beq.n	8002dbc <HAL_GPIO_Init+0x40>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d130      	bne.n	8002e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002df2:	2201      	movs	r2, #1
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	f003 0201 	and.w	r2, r3, #1
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d017      	beq.n	8002e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	2203      	movs	r2, #3
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d123      	bne.n	8002eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	08da      	lsrs	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	220f      	movs	r2, #15
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	08da      	lsrs	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3208      	adds	r2, #8
 8002ea8:	6939      	ldr	r1, [r7, #16]
 8002eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	2203      	movs	r2, #3
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0203 	and.w	r2, r3, #3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80a0 	beq.w	8003030 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef0:	4b58      	ldr	r3, [pc, #352]	@ (8003054 <HAL_GPIO_Init+0x2d8>)
 8002ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef4:	4a57      	ldr	r2, [pc, #348]	@ (8003054 <HAL_GPIO_Init+0x2d8>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6613      	str	r3, [r2, #96]	@ 0x60
 8002efc:	4b55      	ldr	r3, [pc, #340]	@ (8003054 <HAL_GPIO_Init+0x2d8>)
 8002efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f08:	4a53      	ldr	r2, [pc, #332]	@ (8003058 <HAL_GPIO_Init+0x2dc>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	220f      	movs	r2, #15
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f32:	d019      	beq.n	8002f68 <HAL_GPIO_Init+0x1ec>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a49      	ldr	r2, [pc, #292]	@ (800305c <HAL_GPIO_Init+0x2e0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_GPIO_Init+0x1e8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a48      	ldr	r2, [pc, #288]	@ (8003060 <HAL_GPIO_Init+0x2e4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00d      	beq.n	8002f60 <HAL_GPIO_Init+0x1e4>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a47      	ldr	r2, [pc, #284]	@ (8003064 <HAL_GPIO_Init+0x2e8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <HAL_GPIO_Init+0x1e0>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a46      	ldr	r2, [pc, #280]	@ (8003068 <HAL_GPIO_Init+0x2ec>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d101      	bne.n	8002f58 <HAL_GPIO_Init+0x1dc>
 8002f54:	2304      	movs	r3, #4
 8002f56:	e008      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f58:	2307      	movs	r3, #7
 8002f5a:	e006      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e004      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e002      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <HAL_GPIO_Init+0x1ee>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	f002 0203 	and.w	r2, r2, #3
 8002f70:	0092      	lsls	r2, r2, #2
 8002f72:	4093      	lsls	r3, r2
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f7a:	4937      	ldr	r1, [pc, #220]	@ (8003058 <HAL_GPIO_Init+0x2dc>)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	089b      	lsrs	r3, r3, #2
 8002f80:	3302      	adds	r3, #2
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f88:	4b38      	ldr	r3, [pc, #224]	@ (800306c <HAL_GPIO_Init+0x2f0>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fac:	4a2f      	ldr	r2, [pc, #188]	@ (800306c <HAL_GPIO_Init+0x2f0>)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800306c <HAL_GPIO_Init+0x2f0>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fd6:	4a25      	ldr	r2, [pc, #148]	@ (800306c <HAL_GPIO_Init+0x2f0>)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fdc:	4b23      	ldr	r3, [pc, #140]	@ (800306c <HAL_GPIO_Init+0x2f0>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003000:	4a1a      	ldr	r2, [pc, #104]	@ (800306c <HAL_GPIO_Init+0x2f0>)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003006:	4b19      	ldr	r3, [pc, #100]	@ (800306c <HAL_GPIO_Init+0x2f0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800302a:	4a10      	ldr	r2, [pc, #64]	@ (800306c <HAL_GPIO_Init+0x2f0>)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	3301      	adds	r3, #1
 8003034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	fa22 f303 	lsr.w	r3, r2, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	f47f aea3 	bne.w	8002d8c <HAL_GPIO_Init+0x10>
  }
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40021000 	.word	0x40021000
 8003058:	40010000 	.word	0x40010000
 800305c:	48000400 	.word	0x48000400
 8003060:	48000800 	.word	0x48000800
 8003064:	48000c00 	.word	0x48000c00
 8003068:	48001000 	.word	0x48001000
 800306c:	40010400 	.word	0x40010400

08003070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
 800307c:	4613      	mov	r3, r2
 800307e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003080:	787b      	ldrb	r3, [r7, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003086:	887a      	ldrh	r2, [r7, #2]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800308c:	e002      	b.n	8003094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030a4:	4b04      	ldr	r3, [pc, #16]	@ (80030b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40007000 	.word	0x40007000

080030bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ca:	d130      	bne.n	800312e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030cc:	4b23      	ldr	r3, [pc, #140]	@ (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030d8:	d038      	beq.n	800314c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030da:	4b20      	ldr	r3, [pc, #128]	@ (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030e2:	4a1e      	ldr	r2, [pc, #120]	@ (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003160 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2232      	movs	r2, #50	@ 0x32
 80030f0:	fb02 f303 	mul.w	r3, r2, r3
 80030f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003164 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	0c9b      	lsrs	r3, r3, #18
 80030fc:	3301      	adds	r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003100:	e002      	b.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	3b01      	subs	r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003108:	4b14      	ldr	r3, [pc, #80]	@ (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003114:	d102      	bne.n	800311c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f2      	bne.n	8003102 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800311c:	4b0f      	ldr	r3, [pc, #60]	@ (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003128:	d110      	bne.n	800314c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e00f      	b.n	800314e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800312e:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313a:	d007      	beq.n	800314c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800313c:	4b07      	ldr	r3, [pc, #28]	@ (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003144:	4a05      	ldr	r2, [pc, #20]	@ (800315c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800314a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40007000 	.word	0x40007000
 8003160:	20000000 	.word	0x20000000
 8003164:	431bde83 	.word	0x431bde83

08003168 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	f000 bc02 	b.w	8003980 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317c:	4b96      	ldr	r3, [pc, #600]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003186:	4b94      	ldr	r3, [pc, #592]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80e4 	beq.w	8003366 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_RCC_OscConfig+0x4c>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	f040 808b 	bne.w	80032c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	f040 8087 	bne.w	80032c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031b4:	4b88      	ldr	r3, [pc, #544]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_OscConfig+0x64>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e3d9      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1a      	ldr	r2, [r3, #32]
 80031d0:	4b81      	ldr	r3, [pc, #516]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <HAL_RCC_OscConfig+0x7e>
 80031dc:	4b7e      	ldr	r3, [pc, #504]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031e4:	e005      	b.n	80031f2 <HAL_RCC_OscConfig+0x8a>
 80031e6:	4b7c      	ldr	r3, [pc, #496]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80031e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d223      	bcs.n	800323e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fd8c 	bl	8003d18 <RCC_SetFlashLatencyFromMSIRange>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e3ba      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800320a:	4b73      	ldr	r3, [pc, #460]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a72      	ldr	r2, [pc, #456]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003210:	f043 0308 	orr.w	r3, r3, #8
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b70      	ldr	r3, [pc, #448]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	496d      	ldr	r1, [pc, #436]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003224:	4313      	orrs	r3, r2
 8003226:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003228:	4b6b      	ldr	r3, [pc, #428]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	4968      	ldr	r1, [pc, #416]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
 800323c:	e025      	b.n	800328a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800323e:	4b66      	ldr	r3, [pc, #408]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a65      	ldr	r2, [pc, #404]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003244:	f043 0308 	orr.w	r3, r3, #8
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b63      	ldr	r3, [pc, #396]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4960      	ldr	r1, [pc, #384]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325c:	4b5e      	ldr	r3, [pc, #376]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	495b      	ldr	r1, [pc, #364]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fd4c 	bl	8003d18 <RCC_SetFlashLatencyFromMSIRange>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e37a      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800328a:	f000 fc81 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b51      	ldr	r3, [pc, #324]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	4950      	ldr	r1, [pc, #320]	@ (80033dc <HAL_RCC_OscConfig+0x274>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	fa22 f303 	lsr.w	r3, r2, r3
 80032a6:	4a4e      	ldr	r2, [pc, #312]	@ (80033e0 <HAL_RCC_OscConfig+0x278>)
 80032a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032aa:	4b4e      	ldr	r3, [pc, #312]	@ (80033e4 <HAL_RCC_OscConfig+0x27c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fb78 	bl	80029a4 <HAL_InitTick>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d052      	beq.n	8003364 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	e35e      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d032      	beq.n	8003330 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032ca:	4b43      	ldr	r3, [pc, #268]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a42      	ldr	r2, [pc, #264]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032d6:	f7ff fbb5 	bl	8002a44 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032de:	f7ff fbb1 	bl	8002a44 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e347      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f0:	4b39      	ldr	r3, [pc, #228]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032fc:	4b36      	ldr	r3, [pc, #216]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a35      	ldr	r2, [pc, #212]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003302:	f043 0308 	orr.w	r3, r3, #8
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b33      	ldr	r3, [pc, #204]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4930      	ldr	r1, [pc, #192]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800331a:	4b2f      	ldr	r3, [pc, #188]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	492b      	ldr	r1, [pc, #172]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]
 800332e:	e01a      	b.n	8003366 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003330:	4b29      	ldr	r3, [pc, #164]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a28      	ldr	r2, [pc, #160]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800333c:	f7ff fb82 	bl	8002a44 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003344:	f7ff fb7e 	bl	8002a44 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e314      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003356:	4b20      	ldr	r3, [pc, #128]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x1dc>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d073      	beq.n	800345a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d005      	beq.n	8003384 <HAL_RCC_OscConfig+0x21c>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d10e      	bne.n	800339c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d10b      	bne.n	800339c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003384:	4b14      	ldr	r3, [pc, #80]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d063      	beq.n	8003458 <HAL_RCC_OscConfig+0x2f0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d15f      	bne.n	8003458 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e2f1      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_OscConfig+0x24c>
 80033a6:	4b0c      	ldr	r3, [pc, #48]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a0b      	ldr	r2, [pc, #44]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e025      	b.n	8003400 <HAL_RCC_OscConfig+0x298>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033bc:	d114      	bne.n	80033e8 <HAL_RCC_OscConfig+0x280>
 80033be:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a05      	ldr	r2, [pc, #20]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b03      	ldr	r3, [pc, #12]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a02      	ldr	r2, [pc, #8]	@ (80033d8 <HAL_RCC_OscConfig+0x270>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e013      	b.n	8003400 <HAL_RCC_OscConfig+0x298>
 80033d8:	40021000 	.word	0x40021000
 80033dc:	08006b94 	.word	0x08006b94
 80033e0:	20000000 	.word	0x20000000
 80033e4:	20000004 	.word	0x20000004
 80033e8:	4ba0      	ldr	r3, [pc, #640]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a9f      	ldr	r2, [pc, #636]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b9d      	ldr	r3, [pc, #628]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a9c      	ldr	r2, [pc, #624]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7ff fb1c 	bl	8002a44 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7ff fb18 	bl	8002a44 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e2ae      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003422:	4b92      	ldr	r3, [pc, #584]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x2a8>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7ff fb08 	bl	8002a44 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7ff fb04 	bl	8002a44 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	@ 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e29a      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800344a:	4b88      	ldr	r3, [pc, #544]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x2d0>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d060      	beq.n	8003528 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d005      	beq.n	8003478 <HAL_RCC_OscConfig+0x310>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d119      	bne.n	80034a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d116      	bne.n	80034a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003478:	4b7c      	ldr	r3, [pc, #496]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_OscConfig+0x328>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e277      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b76      	ldr	r3, [pc, #472]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	4973      	ldr	r1, [pc, #460]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a4:	e040      	b.n	8003528 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d023      	beq.n	80034f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ae:	4b6f      	ldr	r3, [pc, #444]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6e      	ldr	r2, [pc, #440]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7ff fac3 	bl	8002a44 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c2:	f7ff fabf 	bl	8002a44 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e255      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d4:	4b65      	ldr	r3, [pc, #404]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b62      	ldr	r3, [pc, #392]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	061b      	lsls	r3, r3, #24
 80034ee:	495f      	ldr	r1, [pc, #380]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
 80034f4:	e018      	b.n	8003528 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b5d      	ldr	r3, [pc, #372]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5c      	ldr	r2, [pc, #368]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80034fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7ff fa9f 	bl	8002a44 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350a:	f7ff fa9b 	bl	8002a44 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e231      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351c:	4b53      	ldr	r3, [pc, #332]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f0      	bne.n	800350a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d03c      	beq.n	80035ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01c      	beq.n	8003576 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353c:	4b4b      	ldr	r3, [pc, #300]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 800353e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003542:	4a4a      	ldr	r2, [pc, #296]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354c:	f7ff fa7a 	bl	8002a44 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7ff fa76 	bl	8002a44 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e20c      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003566:	4b41      	ldr	r3, [pc, #260]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 8003568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ef      	beq.n	8003554 <HAL_RCC_OscConfig+0x3ec>
 8003574:	e01b      	b.n	80035ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003576:	4b3d      	ldr	r3, [pc, #244]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 8003578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800357c:	4a3b      	ldr	r2, [pc, #236]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7ff fa5d 	bl	8002a44 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800358e:	f7ff fa59 	bl	8002a44 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e1ef      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a0:	4b32      	ldr	r3, [pc, #200]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ef      	bne.n	800358e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80a6 	beq.w	8003708 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035c0:	4b2a      	ldr	r3, [pc, #168]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10d      	bne.n	80035e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035cc:	4b27      	ldr	r3, [pc, #156]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	4a26      	ldr	r2, [pc, #152]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80035d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035d8:	4b24      	ldr	r3, [pc, #144]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e4:	2301      	movs	r3, #1
 80035e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e8:	4b21      	ldr	r3, [pc, #132]	@ (8003670 <HAL_RCC_OscConfig+0x508>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d118      	bne.n	8003626 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003670 <HAL_RCC_OscConfig+0x508>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003670 <HAL_RCC_OscConfig+0x508>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003600:	f7ff fa20 	bl	8002a44 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7ff fa1c 	bl	8002a44 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e1b2      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361a:	4b15      	ldr	r3, [pc, #84]	@ (8003670 <HAL_RCC_OscConfig+0x508>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d108      	bne.n	8003640 <HAL_RCC_OscConfig+0x4d8>
 800362e:	4b0f      	ldr	r3, [pc, #60]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003634:	4a0d      	ldr	r2, [pc, #52]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800363e:	e029      	b.n	8003694 <HAL_RCC_OscConfig+0x52c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b05      	cmp	r3, #5
 8003646:	d115      	bne.n	8003674 <HAL_RCC_OscConfig+0x50c>
 8003648:	4b08      	ldr	r3, [pc, #32]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364e:	4a07      	ldr	r2, [pc, #28]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003658:	4b04      	ldr	r3, [pc, #16]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365e:	4a03      	ldr	r2, [pc, #12]	@ (800366c <HAL_RCC_OscConfig+0x504>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003668:	e014      	b.n	8003694 <HAL_RCC_OscConfig+0x52c>
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
 8003670:	40007000 	.word	0x40007000
 8003674:	4b9a      	ldr	r3, [pc, #616]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	4a99      	ldr	r2, [pc, #612]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003684:	4b96      	ldr	r3, [pc, #600]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368a:	4a95      	ldr	r2, [pc, #596]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 800368c:	f023 0304 	bic.w	r3, r3, #4
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d016      	beq.n	80036ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7ff f9d2 	bl	8002a44 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7ff f9ce 	bl	8002a44 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e162      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ba:	4b89      	ldr	r3, [pc, #548]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ed      	beq.n	80036a4 <HAL_RCC_OscConfig+0x53c>
 80036c8:	e015      	b.n	80036f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ca:	f7ff f9bb 	bl	8002a44 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7ff f9b7 	bl	8002a44 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e14b      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e8:	4b7d      	ldr	r3, [pc, #500]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ed      	bne.n	80036d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f6:	7ffb      	ldrb	r3, [r7, #31]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b78      	ldr	r3, [pc, #480]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	4a77      	ldr	r2, [pc, #476]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003706:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d03c      	beq.n	800378e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01c      	beq.n	8003756 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800371c:	4b70      	ldr	r3, [pc, #448]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 800371e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003722:	4a6f      	ldr	r2, [pc, #444]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7ff f98a 	bl	8002a44 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003734:	f7ff f986 	bl	8002a44 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e11c      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003746:	4b66      	ldr	r3, [pc, #408]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003748:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ef      	beq.n	8003734 <HAL_RCC_OscConfig+0x5cc>
 8003754:	e01b      	b.n	800378e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003756:	4b62      	ldr	r3, [pc, #392]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003758:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800375c:	4a60      	ldr	r2, [pc, #384]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7ff f96d 	bl	8002a44 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800376e:	f7ff f969 	bl	8002a44 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0ff      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003780:	4b57      	ldr	r3, [pc, #348]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1ef      	bne.n	800376e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80f3 	beq.w	800397e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	2b02      	cmp	r3, #2
 800379e:	f040 80c9 	bne.w	8003934 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037a2:	4b4f      	ldr	r3, [pc, #316]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f003 0203 	and.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d12c      	bne.n	8003810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	3b01      	subs	r3, #1
 80037c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d123      	bne.n	8003810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d11b      	bne.n	8003810 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d113      	bne.n	8003810 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	3b01      	subs	r3, #1
 80037f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d109      	bne.n	8003810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	3b01      	subs	r3, #1
 800380a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d06b      	beq.n	80038e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b0c      	cmp	r3, #12
 8003814:	d062      	beq.n	80038dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003816:	4b32      	ldr	r3, [pc, #200]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0ac      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003826:	4b2e      	ldr	r3, [pc, #184]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a2d      	ldr	r2, [pc, #180]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 800382c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003830:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003832:	f7ff f907 	bl	8002a44 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7ff f903 	bl	8002a44 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e099      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384c:	4b24      	ldr	r3, [pc, #144]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f0      	bne.n	800383a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003858:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	4b21      	ldr	r3, [pc, #132]	@ (80038e4 <HAL_RCC_OscConfig+0x77c>)
 800385e:	4013      	ands	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003868:	3a01      	subs	r2, #1
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003872:	0212      	lsls	r2, r2, #8
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0552      	lsls	r2, r2, #21
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003886:	0852      	lsrs	r2, r2, #1
 8003888:	3a01      	subs	r2, #1
 800388a:	0652      	lsls	r2, r2, #25
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003892:	06d2      	lsls	r2, r2, #27
 8003894:	430a      	orrs	r2, r1
 8003896:	4912      	ldr	r1, [pc, #72]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800389c:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0f      	ldr	r2, [pc, #60]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a8:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a0c      	ldr	r2, [pc, #48]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 80038ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b4:	f7ff f8c6 	bl	8002a44 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7ff f8c2 	bl	8002a44 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e058      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ce:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <HAL_RCC_OscConfig+0x778>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038da:	e050      	b.n	800397e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e04f      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e8:	4b27      	ldr	r3, [pc, #156]	@ (8003988 <HAL_RCC_OscConfig+0x820>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d144      	bne.n	800397e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038f4:	4b24      	ldr	r3, [pc, #144]	@ (8003988 <HAL_RCC_OscConfig+0x820>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_RCC_OscConfig+0x820>)
 80038fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003900:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <HAL_RCC_OscConfig+0x820>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a20      	ldr	r2, [pc, #128]	@ (8003988 <HAL_RCC_OscConfig+0x820>)
 8003906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800390a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800390c:	f7ff f89a 	bl	8002a44 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7ff f896 	bl	8002a44 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e02c      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003926:	4b18      	ldr	r3, [pc, #96]	@ (8003988 <HAL_RCC_OscConfig+0x820>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x7ac>
 8003932:	e024      	b.n	800397e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d01f      	beq.n	800397a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b13      	ldr	r3, [pc, #76]	@ (8003988 <HAL_RCC_OscConfig+0x820>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a12      	ldr	r2, [pc, #72]	@ (8003988 <HAL_RCC_OscConfig+0x820>)
 8003940:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7ff f87d 	bl	8002a44 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7ff f879 	bl	8002a44 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e00f      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003960:	4b09      	ldr	r3, [pc, #36]	@ (8003988 <HAL_RCC_OscConfig+0x820>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800396c:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <HAL_RCC_OscConfig+0x820>)
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	4905      	ldr	r1, [pc, #20]	@ (8003988 <HAL_RCC_OscConfig+0x820>)
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCC_OscConfig+0x824>)
 8003974:	4013      	ands	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
 8003978:	e001      	b.n	800397e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	feeefffc 	.word	0xfeeefffc

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0e7      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b75      	ldr	r3, [pc, #468]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d910      	bls.n	80039d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b72      	ldr	r3, [pc, #456]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 0207 	bic.w	r2, r3, #7
 80039ba:	4970      	ldr	r1, [pc, #448]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b6e      	ldr	r3, [pc, #440]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0cf      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	4b66      	ldr	r3, [pc, #408]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d908      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b63      	ldr	r3, [pc, #396]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4960      	ldr	r1, [pc, #384]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d04c      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	4b5a      	ldr	r3, [pc, #360]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d121      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0a6      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2e:	4b54      	ldr	r3, [pc, #336]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d115      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e09a      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a46:	4b4e      	ldr	r3, [pc, #312]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e08e      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a56:	4b4a      	ldr	r3, [pc, #296]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e086      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a66:	4b46      	ldr	r3, [pc, #280]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4943      	ldr	r1, [pc, #268]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fe ffe4 	bl	8002a44 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a80:	f7fe ffe0 	bl	8002a44 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e06e      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	4b3a      	ldr	r3, [pc, #232]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 020c 	and.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d1eb      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d010      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	4b31      	ldr	r3, [pc, #196]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d208      	bcs.n	8003ad6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	492b      	ldr	r1, [pc, #172]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad6:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d210      	bcs.n	8003b06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae4:	4b25      	ldr	r3, [pc, #148]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 0207 	bic.w	r2, r3, #7
 8003aec:	4923      	ldr	r1, [pc, #140]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af4:	4b21      	ldr	r3, [pc, #132]	@ (8003b7c <HAL_RCC_ClockConfig+0x1ec>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e036      	b.n	8003b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b12:	4b1b      	ldr	r3, [pc, #108]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4918      	ldr	r1, [pc, #96]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b30:	4b13      	ldr	r3, [pc, #76]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4910      	ldr	r1, [pc, #64]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b44:	f000 f824 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b80 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	490b      	ldr	r1, [pc, #44]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f4>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	4a09      	ldr	r2, [pc, #36]	@ (8003b88 <HAL_RCC_ClockConfig+0x1f8>)
 8003b62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b64:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <HAL_RCC_ClockConfig+0x1fc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe ff1b 	bl	80029a4 <HAL_InitTick>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b72:	7afb      	ldrb	r3, [r7, #11]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08006b94 	.word	0x08006b94
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	20000004 	.word	0x20000004

08003b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	@ 0x24
 8003b94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d121      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d11e      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bc4:	4b34      	ldr	r3, [pc, #208]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bd0:	4b31      	ldr	r3, [pc, #196]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e005      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003be0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bec:	4a2b      	ldr	r2, [pc, #172]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10d      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d102      	bne.n	8003c0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c08:	4b25      	ldr	r3, [pc, #148]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e004      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c14:	4b23      	ldr	r3, [pc, #140]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d134      	bne.n	8003c88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d003      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0xac>
 8003c34:	e005      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c38:	617b      	str	r3, [r7, #20]
      break;
 8003c3a:	e005      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c3e:	617b      	str	r3, [r7, #20]
      break;
 8003c40:	e002      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	617b      	str	r3, [r7, #20]
      break;
 8003c46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c48:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	3301      	adds	r3, #1
 8003c54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c56:	4b10      	ldr	r3, [pc, #64]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	fb03 f202 	mul.w	r2, r3, r2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	0e5b      	lsrs	r3, r3, #25
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c88:	69bb      	ldr	r3, [r7, #24]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3724      	adds	r7, #36	@ 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	08006bac 	.word	0x08006bac
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200

08003ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b03      	ldr	r3, [pc, #12]	@ (8003cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000000 	.word	0x20000000

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cc4:	f7ff fff0 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b06      	ldr	r3, [pc, #24]	@ (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4904      	ldr	r1, [pc, #16]	@ (8003ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	08006ba4 	.word	0x08006ba4

08003cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cf0:	f7ff ffda 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0adb      	lsrs	r3, r3, #11
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4904      	ldr	r1, [pc, #16]	@ (8003d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	08006ba4 	.word	0x08006ba4

08003d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d24:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d30:	f7ff f9b6 	bl	80030a0 <HAL_PWREx_GetVoltageRange>
 8003d34:	6178      	str	r0, [r7, #20]
 8003d36:	e014      	b.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	4b25      	ldr	r3, [pc, #148]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3c:	4a24      	ldr	r2, [pc, #144]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d44:	4b22      	ldr	r3, [pc, #136]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d50:	f7ff f9a6 	bl	80030a0 <HAL_PWREx_GetVoltageRange>
 8003d54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d68:	d10b      	bne.n	8003d82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b80      	cmp	r3, #128	@ 0x80
 8003d6e:	d919      	bls.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d74:	d902      	bls.n	8003d7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d76:	2302      	movs	r3, #2
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e013      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	e010      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b80      	cmp	r3, #128	@ 0x80
 8003d86:	d902      	bls.n	8003d8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d88:	2303      	movs	r3, #3
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	e00a      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b80      	cmp	r3, #128	@ 0x80
 8003d92:	d102      	bne.n	8003d9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d94:	2302      	movs	r3, #2
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	e004      	b.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b70      	cmp	r3, #112	@ 0x70
 8003d9e:	d101      	bne.n	8003da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da0:	2301      	movs	r3, #1
 8003da2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 0207 	bic.w	r2, r3, #7
 8003dac:	4909      	ldr	r1, [pc, #36]	@ (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003db4:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d001      	beq.n	8003dc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40022000 	.word	0x40022000

08003dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de0:	2300      	movs	r3, #0
 8003de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003de4:	2300      	movs	r3, #0
 8003de6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d031      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003dfc:	d01a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003dfe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e02:	d814      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d009      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e0c:	d10f      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4a5c      	ldr	r2, [pc, #368]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e1a:	e00c      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	2100      	movs	r1, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fa44 	bl	80042b0 <RCCEx_PLLSAI1_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e2c:	e003      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	74fb      	strb	r3, [r7, #19]
      break;
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e3c:	4b51      	ldr	r3, [pc, #324]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e4a:	494e      	ldr	r1, [pc, #312]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e52:	e001      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 809e 	beq.w	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e66:	2300      	movs	r3, #0
 8003e68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e6a:	4b46      	ldr	r3, [pc, #280]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00d      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e80:	4b40      	ldr	r3, [pc, #256]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e84:	4a3f      	ldr	r2, [pc, #252]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a39      	ldr	r2, [pc, #228]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ea8:	f7fe fdcc 	bl	8002a44 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eae:	e009      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb0:	f7fe fdc8 	bl	8002a44 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d902      	bls.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	74fb      	strb	r3, [r7, #19]
        break;
 8003ec2:	e005      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ec4:	4b30      	ldr	r3, [pc, #192]	@ (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ef      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d15a      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01e      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d019      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ef2:	4b24      	ldr	r3, [pc, #144]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003efc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003efe:	4b21      	ldr	r3, [pc, #132]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f04:	4a1f      	ldr	r2, [pc, #124]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f14:	4a1b      	ldr	r2, [pc, #108]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f1e:	4a19      	ldr	r2, [pc, #100]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d016      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe fd88 	bl	8002a44 <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f36:	e00b      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fe fd84 	bl	8002a44 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d902      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	74fb      	strb	r3, [r7, #19]
            break;
 8003f4e:	e006      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f50:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0ec      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003f5e:	7cfb      	ldrb	r3, [r7, #19]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f64:	4b07      	ldr	r3, [pc, #28]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f72:	4904      	ldr	r1, [pc, #16]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f7a:	e009      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	74bb      	strb	r3, [r7, #18]
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f90:	7c7b      	ldrb	r3, [r7, #17]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d105      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f96:	4b9e      	ldr	r3, [pc, #632]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9a:	4a9d      	ldr	r2, [pc, #628]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fae:	4b98      	ldr	r3, [pc, #608]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f023 0203 	bic.w	r2, r3, #3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	4994      	ldr	r1, [pc, #592]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd0:	4b8f      	ldr	r3, [pc, #572]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd6:	f023 020c 	bic.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	498c      	ldr	r1, [pc, #560]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ff2:	4b87      	ldr	r3, [pc, #540]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004000:	4983      	ldr	r1, [pc, #524]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004014:	4b7e      	ldr	r3, [pc, #504]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	497b      	ldr	r1, [pc, #492]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004036:	4b76      	ldr	r3, [pc, #472]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004044:	4972      	ldr	r1, [pc, #456]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004058:	4b6d      	ldr	r3, [pc, #436]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004066:	496a      	ldr	r1, [pc, #424]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800407a:	4b65      	ldr	r3, [pc, #404]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004080:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004088:	4961      	ldr	r1, [pc, #388]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800409c:	4b5c      	ldr	r3, [pc, #368]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040aa:	4959      	ldr	r1, [pc, #356]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040be:	4b54      	ldr	r3, [pc, #336]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040cc:	4950      	ldr	r1, [pc, #320]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ee:	4948      	ldr	r1, [pc, #288]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004102:	4b43      	ldr	r3, [pc, #268]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004104:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004108:	f023 0203 	bic.w	r2, r3, #3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	493f      	ldr	r1, [pc, #252]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d028      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004124:	4b3a      	ldr	r3, [pc, #232]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004132:	4937      	ldr	r1, [pc, #220]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004142:	d106      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004144:	4b32      	ldr	r3, [pc, #200]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a31      	ldr	r2, [pc, #196]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800414a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414e:	60d3      	str	r3, [r2, #12]
 8004150:	e011      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004156:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800415a:	d10c      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	2101      	movs	r1, #1
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f8a4 	bl	80042b0 <RCCEx_PLLSAI1_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004172:	7cfb      	ldrb	r3, [r7, #19]
 8004174:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d028      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004182:	4b23      	ldr	r3, [pc, #140]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004188:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004190:	491f      	ldr	r1, [pc, #124]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041a0:	d106      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ac:	60d3      	str	r3, [r2, #12]
 80041ae:	e011      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	2101      	movs	r1, #1
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 f875 	bl	80042b0 <RCCEx_PLLSAI1_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ca:	7cfb      	ldrb	r3, [r7, #19]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d02b      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ee:	4908      	ldr	r1, [pc, #32]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041fe:	d109      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004200:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a02      	ldr	r2, [pc, #8]	@ (8004210 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800420a:	60d3      	str	r3, [r2, #12]
 800420c:	e014      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004218:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800421c:	d10c      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3304      	adds	r3, #4
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f000 f843 	bl	80042b0 <RCCEx_PLLSAI1_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800422e:	7cfb      	ldrb	r3, [r7, #19]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01c      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004244:	4b19      	ldr	r3, [pc, #100]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004252:	4916      	ldr	r1, [pc, #88]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004262:	d10c      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	2102      	movs	r1, #2
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f820 	bl	80042b0 <RCCEx_PLLSAI1_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004274:	7cfb      	ldrb	r3, [r7, #19]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800427a:	7cfb      	ldrb	r3, [r7, #19]
 800427c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800428a:	4b08      	ldr	r3, [pc, #32]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004290:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004298:	4904      	ldr	r1, [pc, #16]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000

080042b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042be:	4b74      	ldr	r3, [pc, #464]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d018      	beq.n	80042fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042ca:	4b71      	ldr	r3, [pc, #452]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0203 	and.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d10d      	bne.n	80042f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
       ||
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042e2:	4b6b      	ldr	r3, [pc, #428]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
       ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d047      	beq.n	8004386 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
 80042fa:	e044      	b.n	8004386 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b03      	cmp	r3, #3
 8004302:	d018      	beq.n	8004336 <RCCEx_PLLSAI1_Config+0x86>
 8004304:	2b03      	cmp	r3, #3
 8004306:	d825      	bhi.n	8004354 <RCCEx_PLLSAI1_Config+0xa4>
 8004308:	2b01      	cmp	r3, #1
 800430a:	d002      	beq.n	8004312 <RCCEx_PLLSAI1_Config+0x62>
 800430c:	2b02      	cmp	r3, #2
 800430e:	d009      	beq.n	8004324 <RCCEx_PLLSAI1_Config+0x74>
 8004310:	e020      	b.n	8004354 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004312:	4b5f      	ldr	r3, [pc, #380]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11d      	bne.n	800435a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004322:	e01a      	b.n	800435a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004324:	4b5a      	ldr	r3, [pc, #360]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d116      	bne.n	800435e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004334:	e013      	b.n	800435e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004336:	4b56      	ldr	r3, [pc, #344]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10f      	bne.n	8004362 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004342:	4b53      	ldr	r3, [pc, #332]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004352:	e006      	b.n	8004362 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
      break;
 8004358:	e004      	b.n	8004364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800435a:	bf00      	nop
 800435c:	e002      	b.n	8004364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004362:	bf00      	nop
    }

    if(status == HAL_OK)
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10d      	bne.n	8004386 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800436a:	4b49      	ldr	r3, [pc, #292]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6819      	ldr	r1, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	3b01      	subs	r3, #1
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	430b      	orrs	r3, r1
 8004380:	4943      	ldr	r1, [pc, #268]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004382:	4313      	orrs	r3, r2
 8004384:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d17c      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800438c:	4b40      	ldr	r3, [pc, #256]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a3f      	ldr	r2, [pc, #252]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004392:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004398:	f7fe fb54 	bl	8002a44 <HAL_GetTick>
 800439c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800439e:	e009      	b.n	80043b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043a0:	f7fe fb50 	bl	8002a44 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d902      	bls.n	80043b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	73fb      	strb	r3, [r7, #15]
        break;
 80043b2:	e005      	b.n	80043c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043b4:	4b36      	ldr	r3, [pc, #216]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1ef      	bne.n	80043a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d15f      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d110      	bne.n	80043ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043cc:	4b30      	ldr	r3, [pc, #192]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80043d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6892      	ldr	r2, [r2, #8]
 80043dc:	0211      	lsls	r1, r2, #8
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68d2      	ldr	r2, [r2, #12]
 80043e2:	06d2      	lsls	r2, r2, #27
 80043e4:	430a      	orrs	r2, r1
 80043e6:	492a      	ldr	r1, [pc, #168]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	610b      	str	r3, [r1, #16]
 80043ec:	e027      	b.n	800443e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d112      	bne.n	800441a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043f4:	4b26      	ldr	r3, [pc, #152]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80043fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6892      	ldr	r2, [r2, #8]
 8004404:	0211      	lsls	r1, r2, #8
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6912      	ldr	r2, [r2, #16]
 800440a:	0852      	lsrs	r2, r2, #1
 800440c:	3a01      	subs	r2, #1
 800440e:	0552      	lsls	r2, r2, #21
 8004410:	430a      	orrs	r2, r1
 8004412:	491f      	ldr	r1, [pc, #124]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004414:	4313      	orrs	r3, r2
 8004416:	610b      	str	r3, [r1, #16]
 8004418:	e011      	b.n	800443e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800441a:	4b1d      	ldr	r3, [pc, #116]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004422:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6892      	ldr	r2, [r2, #8]
 800442a:	0211      	lsls	r1, r2, #8
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6952      	ldr	r2, [r2, #20]
 8004430:	0852      	lsrs	r2, r2, #1
 8004432:	3a01      	subs	r2, #1
 8004434:	0652      	lsls	r2, r2, #25
 8004436:	430a      	orrs	r2, r1
 8004438:	4915      	ldr	r1, [pc, #84]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800443a:	4313      	orrs	r3, r2
 800443c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800443e:	4b14      	ldr	r3, [pc, #80]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a13      	ldr	r2, [pc, #76]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004444:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004448:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fe fafb 	bl	8002a44 <HAL_GetTick>
 800444e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004450:	e009      	b.n	8004466 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004452:	f7fe faf7 	bl	8002a44 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d902      	bls.n	8004466 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	73fb      	strb	r3, [r7, #15]
          break;
 8004464:	e005      	b.n	8004472 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0ef      	beq.n	8004452 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004478:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	4903      	ldr	r1, [pc, #12]	@ (8004490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004482:	4313      	orrs	r3, r2
 8004484:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000

08004494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e049      	b.n	800453a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fe f882 	bl	80025c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f000 fb5a 	bl	8004b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e049      	b.n	80045e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f841 	bl	80045f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	4619      	mov	r1, r3
 8004580:	4610      	mov	r0, r2
 8004582:	f000 fb03 	bl	8004b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_TIM_PWM_Start+0x24>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	bf14      	ite	ne
 8004620:	2301      	movne	r3, #1
 8004622:	2300      	moveq	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	e03c      	b.n	80046a2 <HAL_TIM_PWM_Start+0x9e>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b04      	cmp	r3, #4
 800462c:	d109      	bne.n	8004642 <HAL_TIM_PWM_Start+0x3e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	bf14      	ite	ne
 800463a:	2301      	movne	r3, #1
 800463c:	2300      	moveq	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	e02f      	b.n	80046a2 <HAL_TIM_PWM_Start+0x9e>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d109      	bne.n	800465c <HAL_TIM_PWM_Start+0x58>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	bf14      	ite	ne
 8004654:	2301      	movne	r3, #1
 8004656:	2300      	moveq	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e022      	b.n	80046a2 <HAL_TIM_PWM_Start+0x9e>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b0c      	cmp	r3, #12
 8004660:	d109      	bne.n	8004676 <HAL_TIM_PWM_Start+0x72>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	bf14      	ite	ne
 800466e:	2301      	movne	r3, #1
 8004670:	2300      	moveq	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	e015      	b.n	80046a2 <HAL_TIM_PWM_Start+0x9e>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b10      	cmp	r3, #16
 800467a:	d109      	bne.n	8004690 <HAL_TIM_PWM_Start+0x8c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	bf14      	ite	ne
 8004688:	2301      	movne	r3, #1
 800468a:	2300      	moveq	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e008      	b.n	80046a2 <HAL_TIM_PWM_Start+0x9e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e083      	b.n	80047b2 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <HAL_TIM_PWM_Start+0xb6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046b8:	e023      	b.n	8004702 <HAL_TIM_PWM_Start+0xfe>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d104      	bne.n	80046ca <HAL_TIM_PWM_Start+0xc6>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c8:	e01b      	b.n	8004702 <HAL_TIM_PWM_Start+0xfe>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d104      	bne.n	80046da <HAL_TIM_PWM_Start+0xd6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d8:	e013      	b.n	8004702 <HAL_TIM_PWM_Start+0xfe>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Start+0xe6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046e8:	e00b      	b.n	8004702 <HAL_TIM_PWM_Start+0xfe>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b10      	cmp	r3, #16
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_PWM_Start+0xf6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046f8:	e003      	b.n	8004702 <HAL_TIM_PWM_Start+0xfe>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2201      	movs	r2, #1
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fdd0 	bl	80052b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a29      	ldr	r2, [pc, #164]	@ (80047bc <HAL_TIM_PWM_Start+0x1b8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d009      	beq.n	800472e <HAL_TIM_PWM_Start+0x12a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a28      	ldr	r2, [pc, #160]	@ (80047c0 <HAL_TIM_PWM_Start+0x1bc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <HAL_TIM_PWM_Start+0x12a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a26      	ldr	r2, [pc, #152]	@ (80047c4 <HAL_TIM_PWM_Start+0x1c0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d101      	bne.n	8004732 <HAL_TIM_PWM_Start+0x12e>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <HAL_TIM_PWM_Start+0x130>
 8004732:	2300      	movs	r3, #0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004746:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1b      	ldr	r2, [pc, #108]	@ (80047bc <HAL_TIM_PWM_Start+0x1b8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00e      	beq.n	8004770 <HAL_TIM_PWM_Start+0x16c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475a:	d009      	beq.n	8004770 <HAL_TIM_PWM_Start+0x16c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <HAL_TIM_PWM_Start+0x1c4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_TIM_PWM_Start+0x16c>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a15      	ldr	r2, [pc, #84]	@ (80047c0 <HAL_TIM_PWM_Start+0x1bc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d115      	bne.n	800479c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	4b15      	ldr	r3, [pc, #84]	@ (80047cc <HAL_TIM_PWM_Start+0x1c8>)
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b06      	cmp	r3, #6
 8004780:	d015      	beq.n	80047ae <HAL_TIM_PWM_Start+0x1aa>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004788:	d011      	beq.n	80047ae <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479a:	e008      	b.n	80047ae <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e000      	b.n	80047b0 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40000400 	.word	0x40000400
 80047cc:	00010007 	.word	0x00010007

080047d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e0ff      	b.n	80049ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b14      	cmp	r3, #20
 80047fa:	f200 80f0 	bhi.w	80049de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004804 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004859 	.word	0x08004859
 8004808:	080049df 	.word	0x080049df
 800480c:	080049df 	.word	0x080049df
 8004810:	080049df 	.word	0x080049df
 8004814:	08004899 	.word	0x08004899
 8004818:	080049df 	.word	0x080049df
 800481c:	080049df 	.word	0x080049df
 8004820:	080049df 	.word	0x080049df
 8004824:	080048db 	.word	0x080048db
 8004828:	080049df 	.word	0x080049df
 800482c:	080049df 	.word	0x080049df
 8004830:	080049df 	.word	0x080049df
 8004834:	0800491b 	.word	0x0800491b
 8004838:	080049df 	.word	0x080049df
 800483c:	080049df 	.word	0x080049df
 8004840:	080049df 	.word	0x080049df
 8004844:	0800495d 	.word	0x0800495d
 8004848:	080049df 	.word	0x080049df
 800484c:	080049df 	.word	0x080049df
 8004850:	080049df 	.word	0x080049df
 8004854:	0800499d 	.word	0x0800499d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fa0e 	bl	8004c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0208 	orr.w	r2, r2, #8
 8004872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0204 	bic.w	r2, r2, #4
 8004882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6999      	ldr	r1, [r3, #24]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	619a      	str	r2, [r3, #24]
      break;
 8004896:	e0a5      	b.n	80049e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fa6a 	bl	8004d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6999      	ldr	r1, [r3, #24]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	021a      	lsls	r2, r3, #8
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	619a      	str	r2, [r3, #24]
      break;
 80048d8:	e084      	b.n	80049e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fac3 	bl	8004e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0208 	orr.w	r2, r2, #8
 80048f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0204 	bic.w	r2, r2, #4
 8004904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69d9      	ldr	r1, [r3, #28]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	61da      	str	r2, [r3, #28]
      break;
 8004918:	e064      	b.n	80049e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fb1b 	bl	8004f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69d9      	ldr	r1, [r3, #28]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	021a      	lsls	r2, r3, #8
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	61da      	str	r2, [r3, #28]
      break;
 800495a:	e043      	b.n	80049e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fb58 	bl	8005018 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0208 	orr.w	r2, r2, #8
 8004976:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0204 	bic.w	r2, r2, #4
 8004986:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800499a:	e023      	b.n	80049e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fb90 	bl	80050c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	021a      	lsls	r2, r3, #8
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049dc:	e002      	b.n	80049e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]
      break;
 80049e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop

080049f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIM_ConfigClockSource+0x1c>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e0b6      	b.n	8004b82 <HAL_TIM_ConfigClockSource+0x18a>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a50:	d03e      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0xd8>
 8004a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a56:	f200 8087 	bhi.w	8004b68 <HAL_TIM_ConfigClockSource+0x170>
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5e:	f000 8086 	beq.w	8004b6e <HAL_TIM_ConfigClockSource+0x176>
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a66:	d87f      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x170>
 8004a68:	2b70      	cmp	r3, #112	@ 0x70
 8004a6a:	d01a      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0xaa>
 8004a6c:	2b70      	cmp	r3, #112	@ 0x70
 8004a6e:	d87b      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x170>
 8004a70:	2b60      	cmp	r3, #96	@ 0x60
 8004a72:	d050      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x11e>
 8004a74:	2b60      	cmp	r3, #96	@ 0x60
 8004a76:	d877      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x170>
 8004a78:	2b50      	cmp	r3, #80	@ 0x50
 8004a7a:	d03c      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0xfe>
 8004a7c:	2b50      	cmp	r3, #80	@ 0x50
 8004a7e:	d873      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x170>
 8004a80:	2b40      	cmp	r3, #64	@ 0x40
 8004a82:	d058      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x13e>
 8004a84:	2b40      	cmp	r3, #64	@ 0x40
 8004a86:	d86f      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x170>
 8004a88:	2b30      	cmp	r3, #48	@ 0x30
 8004a8a:	d064      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15e>
 8004a8c:	2b30      	cmp	r3, #48	@ 0x30
 8004a8e:	d86b      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x170>
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d060      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15e>
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d867      	bhi.n	8004b68 <HAL_TIM_ConfigClockSource+0x170>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d05c      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15e>
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d05a      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x15e>
 8004aa0:	e062      	b.n	8004b68 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab2:	f000 fbdd 	bl	8005270 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	609a      	str	r2, [r3, #8]
      break;
 8004ace:	e04f      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ae0:	f000 fbc6 	bl	8005270 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004af2:	609a      	str	r2, [r3, #8]
      break;
 8004af4:	e03c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 fb3a 	bl	800517c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2150      	movs	r1, #80	@ 0x50
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fb93 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8004b14:	e02c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b22:	461a      	mov	r2, r3
 8004b24:	f000 fb59 	bl	80051da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2160      	movs	r1, #96	@ 0x60
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb83 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8004b34:	e01c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b42:	461a      	mov	r2, r3
 8004b44:	f000 fb1a 	bl	800517c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2140      	movs	r1, #64	@ 0x40
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fb73 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8004b54:	e00c      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f000 fb6a 	bl	800523a <TIM_ITRx_SetConfig>
      break;
 8004b66:	e003      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6c:	e000      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a34      	ldr	r2, [pc, #208]	@ (8004c70 <TIM_Base_SetConfig+0xe4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d007      	beq.n	8004bb4 <TIM_Base_SetConfig+0x28>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004baa:	d003      	beq.n	8004bb4 <TIM_Base_SetConfig+0x28>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a31      	ldr	r2, [pc, #196]	@ (8004c74 <TIM_Base_SetConfig+0xe8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d108      	bne.n	8004bc6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a29      	ldr	r2, [pc, #164]	@ (8004c70 <TIM_Base_SetConfig+0xe4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00f      	beq.n	8004bee <TIM_Base_SetConfig+0x62>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd4:	d00b      	beq.n	8004bee <TIM_Base_SetConfig+0x62>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a26      	ldr	r2, [pc, #152]	@ (8004c74 <TIM_Base_SetConfig+0xe8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d007      	beq.n	8004bee <TIM_Base_SetConfig+0x62>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a25      	ldr	r2, [pc, #148]	@ (8004c78 <TIM_Base_SetConfig+0xec>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_Base_SetConfig+0x62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a24      	ldr	r2, [pc, #144]	@ (8004c7c <TIM_Base_SetConfig+0xf0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d108      	bne.n	8004c00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a12      	ldr	r2, [pc, #72]	@ (8004c70 <TIM_Base_SetConfig+0xe4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <TIM_Base_SetConfig+0xb0>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a12      	ldr	r2, [pc, #72]	@ (8004c78 <TIM_Base_SetConfig+0xec>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_Base_SetConfig+0xb0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a11      	ldr	r2, [pc, #68]	@ (8004c7c <TIM_Base_SetConfig+0xf0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d103      	bne.n	8004c44 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d105      	bne.n	8004c62 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f023 0201 	bic.w	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	611a      	str	r2, [r3, #16]
  }
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40012c00 	.word	0x40012c00
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400

08004c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f023 0201 	bic.w	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f023 0302 	bic.w	r3, r3, #2
 8004ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a24      	ldr	r2, [pc, #144]	@ (8004d6c <TIM_OC1_SetConfig+0xec>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d007      	beq.n	8004cf0 <TIM_OC1_SetConfig+0x70>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a23      	ldr	r2, [pc, #140]	@ (8004d70 <TIM_OC1_SetConfig+0xf0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC1_SetConfig+0x70>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a22      	ldr	r2, [pc, #136]	@ (8004d74 <TIM_OC1_SetConfig+0xf4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10c      	bne.n	8004d0a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 0308 	bic.w	r3, r3, #8
 8004cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 0304 	bic.w	r3, r3, #4
 8004d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a17      	ldr	r2, [pc, #92]	@ (8004d6c <TIM_OC1_SetConfig+0xec>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d007      	beq.n	8004d22 <TIM_OC1_SetConfig+0xa2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a16      	ldr	r2, [pc, #88]	@ (8004d70 <TIM_OC1_SetConfig+0xf0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d003      	beq.n	8004d22 <TIM_OC1_SetConfig+0xa2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a15      	ldr	r2, [pc, #84]	@ (8004d74 <TIM_OC1_SetConfig+0xf4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d111      	bne.n	8004d46 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	621a      	str	r2, [r3, #32]
}
 8004d60:	bf00      	nop
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400

08004d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f023 0210 	bic.w	r2, r3, #16
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0320 	bic.w	r3, r3, #32
 8004dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a22      	ldr	r2, [pc, #136]	@ (8004e60 <TIM_OC2_SetConfig+0xe8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d10d      	bne.n	8004df8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a19      	ldr	r2, [pc, #100]	@ (8004e60 <TIM_OC2_SetConfig+0xe8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <TIM_OC2_SetConfig+0x98>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a18      	ldr	r2, [pc, #96]	@ (8004e64 <TIM_OC2_SetConfig+0xec>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_OC2_SetConfig+0x98>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a17      	ldr	r2, [pc, #92]	@ (8004e68 <TIM_OC2_SetConfig+0xf0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d113      	bne.n	8004e38 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	621a      	str	r2, [r3, #32]
}
 8004e52:	bf00      	nop
 8004e54:	371c      	adds	r7, #28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40014400 	.word	0x40014400

08004e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a21      	ldr	r2, [pc, #132]	@ (8004f50 <TIM_OC3_SetConfig+0xe4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d10d      	bne.n	8004eea <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a18      	ldr	r2, [pc, #96]	@ (8004f50 <TIM_OC3_SetConfig+0xe4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_OC3_SetConfig+0x96>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a17      	ldr	r2, [pc, #92]	@ (8004f54 <TIM_OC3_SetConfig+0xe8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_OC3_SetConfig+0x96>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a16      	ldr	r2, [pc, #88]	@ (8004f58 <TIM_OC3_SetConfig+0xec>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d113      	bne.n	8004f2a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40014000 	.word	0x40014000
 8004f58:	40014400 	.word	0x40014400

08004f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	031b      	lsls	r3, r3, #12
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a14      	ldr	r2, [pc, #80]	@ (800500c <TIM_OC4_SetConfig+0xb0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d007      	beq.n	8004fd0 <TIM_OC4_SetConfig+0x74>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a13      	ldr	r2, [pc, #76]	@ (8005010 <TIM_OC4_SetConfig+0xb4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_OC4_SetConfig+0x74>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a12      	ldr	r2, [pc, #72]	@ (8005014 <TIM_OC4_SetConfig+0xb8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d109      	bne.n	8004fe4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40014000 	.word	0x40014000
 8005014:	40014400 	.word	0x40014400

08005018 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800505c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a13      	ldr	r2, [pc, #76]	@ (80050bc <TIM_OC5_SetConfig+0xa4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <TIM_OC5_SetConfig+0x6a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a12      	ldr	r2, [pc, #72]	@ (80050c0 <TIM_OC5_SetConfig+0xa8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d003      	beq.n	8005082 <TIM_OC5_SetConfig+0x6a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a11      	ldr	r2, [pc, #68]	@ (80050c4 <TIM_OC5_SetConfig+0xac>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d109      	bne.n	8005096 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005088:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	621a      	str	r2, [r3, #32]
}
 80050b0:	bf00      	nop
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40014400 	.word	0x40014400

080050c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800510e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	051b      	lsls	r3, r3, #20
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a14      	ldr	r2, [pc, #80]	@ (8005170 <TIM_OC6_SetConfig+0xa8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d007      	beq.n	8005134 <TIM_OC6_SetConfig+0x6c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a13      	ldr	r2, [pc, #76]	@ (8005174 <TIM_OC6_SetConfig+0xac>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_OC6_SetConfig+0x6c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a12      	ldr	r2, [pc, #72]	@ (8005178 <TIM_OC6_SetConfig+0xb0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d109      	bne.n	8005148 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800513a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	029b      	lsls	r3, r3, #10
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40014000 	.word	0x40014000
 8005178:	40014400 	.word	0x40014400

0800517c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f023 0201 	bic.w	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f023 030a 	bic.w	r3, r3, #10
 80051b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051da:	b480      	push	{r7}
 80051dc:	b087      	sub	sp, #28
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f023 0210 	bic.w	r2, r3, #16
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	031b      	lsls	r3, r3, #12
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005216:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	f043 0307 	orr.w	r3, r3, #7
 800525c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800528a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	431a      	orrs	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4313      	orrs	r3, r2
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	609a      	str	r2, [r3, #8]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2201      	movs	r2, #1
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1a      	ldr	r2, [r3, #32]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	401a      	ands	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	431a      	orrs	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
	...

080052fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005310:	2302      	movs	r3, #2
 8005312:	e054      	b.n	80053be <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a24      	ldr	r2, [pc, #144]	@ (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d108      	bne.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005344:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a17      	ldr	r2, [pc, #92]	@ (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00e      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800537c:	d009      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a13      	ldr	r2, [pc, #76]	@ (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d004      	beq.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a11      	ldr	r2, [pc, #68]	@ (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d10c      	bne.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40014000 	.word	0x40014000

080053d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e060      	b.n	80054b6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	041b      	lsls	r3, r3, #16
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a14      	ldr	r2, [pc, #80]	@ (80054c4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d115      	bne.n	80054a4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	051b      	lsls	r3, r3, #20
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40012c00 	.word	0x40012c00

080054c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e040      	b.n	800555c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fd f8f8 	bl	80026e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2224      	movs	r2, #36	@ 0x24
 80054f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0201 	bic.w	r2, r2, #1
 8005504:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fe20 	bl	8006154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fb97 	bl	8005c48 <UART_SetConfig>
 800551a:	4603      	mov	r3, r0
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e01b      	b.n	800555c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fe9f 	bl	8006298 <UART_CheckIdleState>
 800555a:	4603      	mov	r3, r0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	@ 0x28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005578:	2b20      	cmp	r3, #32
 800557a:	d137      	bne.n	80055ec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_UART_Receive_IT+0x24>
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e030      	b.n	80055ee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a18      	ldr	r2, [pc, #96]	@ (80055f8 <HAL_UART_Receive_IT+0x94>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d01f      	beq.n	80055dc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d018      	beq.n	80055dc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	613b      	str	r3, [r7, #16]
   return(result);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	623b      	str	r3, [r7, #32]
 80055ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	69f9      	ldr	r1, [r7, #28]
 80055ce:	6a3a      	ldr	r2, [r7, #32]
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e6      	bne.n	80055aa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055dc:	88fb      	ldrh	r3, [r7, #6]
 80055de:	461a      	mov	r2, r3
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 ff6e 	bl	80064c4 <UART_Start_Receive_IT>
 80055e8:	4603      	mov	r3, r0
 80055ea:	e000      	b.n	80055ee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
  }
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3728      	adds	r7, #40	@ 0x28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40008000 	.word	0x40008000

080055fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b0ba      	sub	sp, #232	@ 0xe8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005622:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005626:	f640 030f 	movw	r3, #2063	@ 0x80f
 800562a:	4013      	ands	r3, r2
 800562c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005630:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d115      	bne.n	8005664 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00f      	beq.n	8005664 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 82ca 	beq.w	8005bee <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
      }
      return;
 8005662:	e2c4      	b.n	8005bee <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8117 	beq.w	800589c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800566e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800567a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800567e:	4b85      	ldr	r3, [pc, #532]	@ (8005894 <HAL_UART_IRQHandler+0x298>)
 8005680:	4013      	ands	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 810a 	beq.w	800589c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d011      	beq.n	80056b8 <HAL_UART_IRQHandler+0xbc>
 8005694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2201      	movs	r2, #1
 80056a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ae:	f043 0201 	orr.w	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d011      	beq.n	80056e8 <HAL_UART_IRQHandler+0xec>
 80056c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2202      	movs	r2, #2
 80056d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056de:	f043 0204 	orr.w	r2, r3, #4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d011      	beq.n	8005718 <HAL_UART_IRQHandler+0x11c>
 80056f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2204      	movs	r2, #4
 8005706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800570e:	f043 0202 	orr.w	r2, r3, #2
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d017      	beq.n	8005754 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d105      	bne.n	800573c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005734:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2208      	movs	r2, #8
 8005742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800574a:	f043 0208 	orr.w	r2, r3, #8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800575c:	2b00      	cmp	r3, #0
 800575e:	d012      	beq.n	8005786 <HAL_UART_IRQHandler+0x18a>
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005764:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00c      	beq.n	8005786 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800577c:	f043 0220 	orr.w	r2, r3, #32
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8230 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800579e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d007      	beq.n	80057ba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ce:	2b40      	cmp	r3, #64	@ 0x40
 80057d0:	d005      	beq.n	80057de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d04f      	beq.n	800587e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 ff36 	bl	8006650 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ee:	2b40      	cmp	r3, #64	@ 0x40
 80057f0:	d141      	bne.n	8005876 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005808:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800580c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3308      	adds	r3, #8
 800581a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800581e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005822:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800582a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1d9      	bne.n	80057f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005842:	2b00      	cmp	r3, #0
 8005844:	d013      	beq.n	800586e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800584a:	4a13      	ldr	r2, [pc, #76]	@ (8005898 <HAL_UART_IRQHandler+0x29c>)
 800584c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd fa51 	bl	8002cfa <HAL_DMA_Abort_IT>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d017      	beq.n	800588e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005868:	4610      	mov	r0, r2
 800586a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586c:	e00f      	b.n	800588e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f9d4 	bl	8005c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	e00b      	b.n	800588e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f9d0 	bl	8005c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	e007      	b.n	800588e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9cc 	bl	8005c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800588c:	e1b1      	b.n	8005bf2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588e:	bf00      	nop
    return;
 8005890:	e1af      	b.n	8005bf2 <HAL_UART_IRQHandler+0x5f6>
 8005892:	bf00      	nop
 8005894:	04000120 	.word	0x04000120
 8005898:	08006719 	.word	0x08006719

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	f040 816a 	bne.w	8005b7a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 8163 	beq.w	8005b7a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 815c 	beq.w	8005b7a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2210      	movs	r2, #16
 80058c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d4:	2b40      	cmp	r3, #64	@ 0x40
 80058d6:	f040 80d4 	bne.w	8005a82 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 80ad 	beq.w	8005a4a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058fa:	429a      	cmp	r2, r3
 80058fc:	f080 80a5 	bcs.w	8005a4a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005906:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 8086 	bne.w	8005a28 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005930:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800594a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005952:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800595e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1da      	bne.n	800591c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800598a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800598e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005992:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800599c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e1      	bne.n	8005966 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3308      	adds	r3, #8
 80059a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3308      	adds	r3, #8
 80059c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e3      	bne.n	80059a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059f8:	f023 0310 	bic.w	r3, r3, #16
 80059fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e4      	bne.n	80059e8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fd f92b 	bl	8002c7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f8f4 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a48:	e0d5      	b.n	8005bf6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a54:	429a      	cmp	r2, r3
 8005a56:	f040 80ce 	bne.w	8005bf6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	f040 80c5 	bne.w	8005bf6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f8d8 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
      return;
 8005a80:	e0b9      	b.n	8005bf6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 80ab 	beq.w	8005bfa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80a6 	beq.w	8005bfa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e4      	bne.n	8005aae <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	623b      	str	r3, [r7, #32]
   return(result);
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3308      	adds	r3, #8
 8005b04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b08:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e3      	bne.n	8005ae4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f023 0310 	bic.w	r3, r3, #16
 8005b44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	69b9      	ldr	r1, [r7, #24]
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e4      	bne.n	8005b30 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f85c 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b78:	e03f      	b.n	8005bfa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00e      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x5a8>
 8005b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d008      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 ffb7 	bl	8006b10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ba2:	e02d      	b.n	8005c00 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00e      	beq.n	8005bce <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01c      	beq.n	8005bfe <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
    }
    return;
 8005bcc:	e017      	b.n	8005bfe <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d012      	beq.n	8005c00 <HAL_UART_IRQHandler+0x604>
 8005bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00c      	beq.n	8005c00 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fdac 	bl	8006744 <UART_EndTransmit_IT>
    return;
 8005bec:	e008      	b.n	8005c00 <HAL_UART_IRQHandler+0x604>
      return;
 8005bee:	bf00      	nop
 8005bf0:	e006      	b.n	8005c00 <HAL_UART_IRQHandler+0x604>
    return;
 8005bf2:	bf00      	nop
 8005bf4:	e004      	b.n	8005c00 <HAL_UART_IRQHandler+0x604>
      return;
 8005bf6:	bf00      	nop
 8005bf8:	e002      	b.n	8005c00 <HAL_UART_IRQHandler+0x604>
      return;
 8005bfa:	bf00      	nop
 8005bfc:	e000      	b.n	8005c00 <HAL_UART_IRQHandler+0x604>
    return;
 8005bfe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c00:	37e8      	adds	r7, #232	@ 0xe8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop

08005c08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c4c:	b08a      	sub	sp, #40	@ 0x28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	431a      	orrs	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4ba5      	ldr	r3, [pc, #660]	@ (8005f0c <UART_SetConfig+0x2c4>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a9a      	ldr	r2, [pc, #616]	@ (8005f10 <UART_SetConfig+0x2c8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a91      	ldr	r2, [pc, #580]	@ (8005f14 <UART_SetConfig+0x2cc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d126      	bne.n	8005d20 <UART_SetConfig+0xd8>
 8005cd2:	4b91      	ldr	r3, [pc, #580]	@ (8005f18 <UART_SetConfig+0x2d0>)
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d81b      	bhi.n	8005d18 <UART_SetConfig+0xd0>
 8005ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <UART_SetConfig+0xa0>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005cf9 	.word	0x08005cf9
 8005cec:	08005d09 	.word	0x08005d09
 8005cf0:	08005d01 	.word	0x08005d01
 8005cf4:	08005d11 	.word	0x08005d11
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cfe:	e0d6      	b.n	8005eae <UART_SetConfig+0x266>
 8005d00:	2302      	movs	r3, #2
 8005d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d06:	e0d2      	b.n	8005eae <UART_SetConfig+0x266>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d0e:	e0ce      	b.n	8005eae <UART_SetConfig+0x266>
 8005d10:	2308      	movs	r3, #8
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d16:	e0ca      	b.n	8005eae <UART_SetConfig+0x266>
 8005d18:	2310      	movs	r3, #16
 8005d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d1e:	e0c6      	b.n	8005eae <UART_SetConfig+0x266>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a7d      	ldr	r2, [pc, #500]	@ (8005f1c <UART_SetConfig+0x2d4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d138      	bne.n	8005d9c <UART_SetConfig+0x154>
 8005d2a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f18 <UART_SetConfig+0x2d0>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d30:	f003 030c 	and.w	r3, r3, #12
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	d82d      	bhi.n	8005d94 <UART_SetConfig+0x14c>
 8005d38:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <UART_SetConfig+0xf8>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d75 	.word	0x08005d75
 8005d44:	08005d95 	.word	0x08005d95
 8005d48:	08005d95 	.word	0x08005d95
 8005d4c:	08005d95 	.word	0x08005d95
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005d95 	.word	0x08005d95
 8005d58:	08005d95 	.word	0x08005d95
 8005d5c:	08005d95 	.word	0x08005d95
 8005d60:	08005d7d 	.word	0x08005d7d
 8005d64:	08005d95 	.word	0x08005d95
 8005d68:	08005d95 	.word	0x08005d95
 8005d6c:	08005d95 	.word	0x08005d95
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d7a:	e098      	b.n	8005eae <UART_SetConfig+0x266>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d82:	e094      	b.n	8005eae <UART_SetConfig+0x266>
 8005d84:	2304      	movs	r3, #4
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8a:	e090      	b.n	8005eae <UART_SetConfig+0x266>
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d92:	e08c      	b.n	8005eae <UART_SetConfig+0x266>
 8005d94:	2310      	movs	r3, #16
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9a:	e088      	b.n	8005eae <UART_SetConfig+0x266>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a5f      	ldr	r2, [pc, #380]	@ (8005f20 <UART_SetConfig+0x2d8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d125      	bne.n	8005df2 <UART_SetConfig+0x1aa>
 8005da6:	4b5c      	ldr	r3, [pc, #368]	@ (8005f18 <UART_SetConfig+0x2d0>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005db0:	2b30      	cmp	r3, #48	@ 0x30
 8005db2:	d016      	beq.n	8005de2 <UART_SetConfig+0x19a>
 8005db4:	2b30      	cmp	r3, #48	@ 0x30
 8005db6:	d818      	bhi.n	8005dea <UART_SetConfig+0x1a2>
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	d00a      	beq.n	8005dd2 <UART_SetConfig+0x18a>
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d814      	bhi.n	8005dea <UART_SetConfig+0x1a2>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <UART_SetConfig+0x182>
 8005dc4:	2b10      	cmp	r3, #16
 8005dc6:	d008      	beq.n	8005dda <UART_SetConfig+0x192>
 8005dc8:	e00f      	b.n	8005dea <UART_SetConfig+0x1a2>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd0:	e06d      	b.n	8005eae <UART_SetConfig+0x266>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd8:	e069      	b.n	8005eae <UART_SetConfig+0x266>
 8005dda:	2304      	movs	r3, #4
 8005ddc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de0:	e065      	b.n	8005eae <UART_SetConfig+0x266>
 8005de2:	2308      	movs	r3, #8
 8005de4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de8:	e061      	b.n	8005eae <UART_SetConfig+0x266>
 8005dea:	2310      	movs	r3, #16
 8005dec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df0:	e05d      	b.n	8005eae <UART_SetConfig+0x266>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a4b      	ldr	r2, [pc, #300]	@ (8005f24 <UART_SetConfig+0x2dc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d125      	bne.n	8005e48 <UART_SetConfig+0x200>
 8005dfc:	4b46      	ldr	r3, [pc, #280]	@ (8005f18 <UART_SetConfig+0x2d0>)
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e06:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e08:	d016      	beq.n	8005e38 <UART_SetConfig+0x1f0>
 8005e0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e0c:	d818      	bhi.n	8005e40 <UART_SetConfig+0x1f8>
 8005e0e:	2b80      	cmp	r3, #128	@ 0x80
 8005e10:	d00a      	beq.n	8005e28 <UART_SetConfig+0x1e0>
 8005e12:	2b80      	cmp	r3, #128	@ 0x80
 8005e14:	d814      	bhi.n	8005e40 <UART_SetConfig+0x1f8>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <UART_SetConfig+0x1d8>
 8005e1a:	2b40      	cmp	r3, #64	@ 0x40
 8005e1c:	d008      	beq.n	8005e30 <UART_SetConfig+0x1e8>
 8005e1e:	e00f      	b.n	8005e40 <UART_SetConfig+0x1f8>
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e26:	e042      	b.n	8005eae <UART_SetConfig+0x266>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e2e:	e03e      	b.n	8005eae <UART_SetConfig+0x266>
 8005e30:	2304      	movs	r3, #4
 8005e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e36:	e03a      	b.n	8005eae <UART_SetConfig+0x266>
 8005e38:	2308      	movs	r3, #8
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e3e:	e036      	b.n	8005eae <UART_SetConfig+0x266>
 8005e40:	2310      	movs	r3, #16
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e46:	e032      	b.n	8005eae <UART_SetConfig+0x266>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a30      	ldr	r2, [pc, #192]	@ (8005f10 <UART_SetConfig+0x2c8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d12a      	bne.n	8005ea8 <UART_SetConfig+0x260>
 8005e52:	4b31      	ldr	r3, [pc, #196]	@ (8005f18 <UART_SetConfig+0x2d0>)
 8005e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e60:	d01a      	beq.n	8005e98 <UART_SetConfig+0x250>
 8005e62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e66:	d81b      	bhi.n	8005ea0 <UART_SetConfig+0x258>
 8005e68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e6c:	d00c      	beq.n	8005e88 <UART_SetConfig+0x240>
 8005e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e72:	d815      	bhi.n	8005ea0 <UART_SetConfig+0x258>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <UART_SetConfig+0x238>
 8005e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7c:	d008      	beq.n	8005e90 <UART_SetConfig+0x248>
 8005e7e:	e00f      	b.n	8005ea0 <UART_SetConfig+0x258>
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e86:	e012      	b.n	8005eae <UART_SetConfig+0x266>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e00e      	b.n	8005eae <UART_SetConfig+0x266>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e00a      	b.n	8005eae <UART_SetConfig+0x266>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e006      	b.n	8005eae <UART_SetConfig+0x266>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea6:	e002      	b.n	8005eae <UART_SetConfig+0x266>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a17      	ldr	r2, [pc, #92]	@ (8005f10 <UART_SetConfig+0x2c8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	f040 808b 	bne.w	8005fd0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ebe:	2b08      	cmp	r3, #8
 8005ec0:	d834      	bhi.n	8005f2c <UART_SetConfig+0x2e4>
 8005ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec8 <UART_SetConfig+0x280>)
 8005ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec8:	08005eed 	.word	0x08005eed
 8005ecc:	08005f2d 	.word	0x08005f2d
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005f2d 	.word	0x08005f2d
 8005ed8:	08005efb 	.word	0x08005efb
 8005edc:	08005f2d 	.word	0x08005f2d
 8005ee0:	08005f2d 	.word	0x08005f2d
 8005ee4:	08005f2d 	.word	0x08005f2d
 8005ee8:	08005f03 	.word	0x08005f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eec:	f7fd fee8 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8005ef0:	61f8      	str	r0, [r7, #28]
        break;
 8005ef2:	e021      	b.n	8005f38 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f28 <UART_SetConfig+0x2e0>)
 8005ef6:	61fb      	str	r3, [r7, #28]
        break;
 8005ef8:	e01e      	b.n	8005f38 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efa:	f7fd fe49 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8005efe:	61f8      	str	r0, [r7, #28]
        break;
 8005f00:	e01a      	b.n	8005f38 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f06:	61fb      	str	r3, [r7, #28]
        break;
 8005f08:	e016      	b.n	8005f38 <UART_SetConfig+0x2f0>
 8005f0a:	bf00      	nop
 8005f0c:	efff69f3 	.word	0xefff69f3
 8005f10:	40008000 	.word	0x40008000
 8005f14:	40013800 	.word	0x40013800
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	40004400 	.word	0x40004400
 8005f20:	40004800 	.word	0x40004800
 8005f24:	40004c00 	.word	0x40004c00
 8005f28:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80fa 	beq.w	8006134 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	4413      	add	r3, r2
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d305      	bcc.n	8005f5c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d903      	bls.n	8005f64 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f62:	e0e7      	b.n	8006134 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	2200      	movs	r2, #0
 8005f68:	461c      	mov	r4, r3
 8005f6a:	4615      	mov	r5, r2
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	022b      	lsls	r3, r5, #8
 8005f76:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f7a:	0222      	lsls	r2, r4, #8
 8005f7c:	68f9      	ldr	r1, [r7, #12]
 8005f7e:	6849      	ldr	r1, [r1, #4]
 8005f80:	0849      	lsrs	r1, r1, #1
 8005f82:	2000      	movs	r0, #0
 8005f84:	4688      	mov	r8, r1
 8005f86:	4681      	mov	r9, r0
 8005f88:	eb12 0a08 	adds.w	sl, r2, r8
 8005f8c:	eb43 0b09 	adc.w	fp, r3, r9
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	4659      	mov	r1, fp
 8005fa2:	f7fa f917 	bl	80001d4 <__aeabi_uldivmod>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4613      	mov	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fb4:	d308      	bcc.n	8005fc8 <UART_SetConfig+0x380>
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fbc:	d204      	bcs.n	8005fc8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	60da      	str	r2, [r3, #12]
 8005fc6:	e0b5      	b.n	8006134 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fce:	e0b1      	b.n	8006134 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fd8:	d15d      	bne.n	8006096 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8005fda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d827      	bhi.n	8006032 <UART_SetConfig+0x3ea>
 8005fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe8 <UART_SetConfig+0x3a0>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006015 	.word	0x08006015
 8005ff0:	0800601d 	.word	0x0800601d
 8005ff4:	08006033 	.word	0x08006033
 8005ff8:	08006023 	.word	0x08006023
 8005ffc:	08006033 	.word	0x08006033
 8006000:	08006033 	.word	0x08006033
 8006004:	08006033 	.word	0x08006033
 8006008:	0800602b 	.word	0x0800602b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800600c:	f7fd fe58 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8006010:	61f8      	str	r0, [r7, #28]
        break;
 8006012:	e014      	b.n	800603e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fd fe6a 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8006018:	61f8      	str	r0, [r7, #28]
        break;
 800601a:	e010      	b.n	800603e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800601c:	4b4c      	ldr	r3, [pc, #304]	@ (8006150 <UART_SetConfig+0x508>)
 800601e:	61fb      	str	r3, [r7, #28]
        break;
 8006020:	e00d      	b.n	800603e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006022:	f7fd fdb5 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8006026:	61f8      	str	r0, [r7, #28]
        break;
 8006028:	e009      	b.n	800603e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800602e:	61fb      	str	r3, [r7, #28]
        break;
 8006030:	e005      	b.n	800603e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800603c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d077      	beq.n	8006134 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	005a      	lsls	r2, r3, #1
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	085b      	lsrs	r3, r3, #1
 800604e:	441a      	add	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	fbb2 f3f3 	udiv	r3, r2, r3
 8006058:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b0f      	cmp	r3, #15
 800605e:	d916      	bls.n	800608e <UART_SetConfig+0x446>
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006066:	d212      	bcs.n	800608e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f023 030f 	bic.w	r3, r3, #15
 8006070:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	085b      	lsrs	r3, r3, #1
 8006076:	b29b      	uxth	r3, r3
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	b29a      	uxth	r2, r3
 800607e:	8afb      	ldrh	r3, [r7, #22]
 8006080:	4313      	orrs	r3, r2
 8006082:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	8afa      	ldrh	r2, [r7, #22]
 800608a:	60da      	str	r2, [r3, #12]
 800608c:	e052      	b.n	8006134 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006094:	e04e      	b.n	8006134 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006096:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800609a:	2b08      	cmp	r3, #8
 800609c:	d827      	bhi.n	80060ee <UART_SetConfig+0x4a6>
 800609e:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <UART_SetConfig+0x45c>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060c9 	.word	0x080060c9
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060d9 	.word	0x080060d9
 80060b0:	080060ef 	.word	0x080060ef
 80060b4:	080060df 	.word	0x080060df
 80060b8:	080060ef 	.word	0x080060ef
 80060bc:	080060ef 	.word	0x080060ef
 80060c0:	080060ef 	.word	0x080060ef
 80060c4:	080060e7 	.word	0x080060e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c8:	f7fd fdfa 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 80060cc:	61f8      	str	r0, [r7, #28]
        break;
 80060ce:	e014      	b.n	80060fa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d0:	f7fd fe0c 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 80060d4:	61f8      	str	r0, [r7, #28]
        break;
 80060d6:	e010      	b.n	80060fa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006150 <UART_SetConfig+0x508>)
 80060da:	61fb      	str	r3, [r7, #28]
        break;
 80060dc:	e00d      	b.n	80060fa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060de:	f7fd fd57 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 80060e2:	61f8      	str	r0, [r7, #28]
        break;
 80060e4:	e009      	b.n	80060fa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ea:	61fb      	str	r3, [r7, #28]
        break;
 80060ec:	e005      	b.n	80060fa <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060f8:	bf00      	nop
    }

    if (pclk != 0U)
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d019      	beq.n	8006134 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	085a      	lsrs	r2, r3, #1
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	441a      	add	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b0f      	cmp	r3, #15
 8006118:	d909      	bls.n	800612e <UART_SetConfig+0x4e6>
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006120:	d205      	bcs.n	800612e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60da      	str	r2, [r3, #12]
 800612c:	e002      	b.n	8006134 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006140:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006144:	4618      	mov	r0, r3
 8006146:	3728      	adds	r7, #40	@ 0x28
 8006148:	46bd      	mov	sp, r7
 800614a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800614e:	bf00      	nop
 8006150:	00f42400 	.word	0x00f42400

08006154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	f003 0308 	and.w	r3, r3, #8
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01a      	beq.n	800626a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006252:	d10a      	bne.n	800626a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	605a      	str	r2, [r3, #4]
  }
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b098      	sub	sp, #96	@ 0x60
 800629c:	af02      	add	r7, sp, #8
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062a8:	f7fc fbcc 	bl	8002a44 <HAL_GetTick>
 80062ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d12e      	bne.n	800631a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c4:	2200      	movs	r2, #0
 80062c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f88c 	bl	80063e8 <UART_WaitOnFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d021      	beq.n	800631a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e6      	bne.n	80062d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e062      	b.n	80063e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b04      	cmp	r3, #4
 8006326:	d149      	bne.n	80063bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006330:	2200      	movs	r2, #0
 8006332:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f856 	bl	80063e8 <UART_WaitOnFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d03c      	beq.n	80063bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	623b      	str	r3, [r7, #32]
   return(result);
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006360:	633b      	str	r3, [r7, #48]	@ 0x30
 8006362:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800636e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e6      	bne.n	8006342 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	60fb      	str	r3, [r7, #12]
   return(result);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006394:	61fa      	str	r2, [r7, #28]
 8006396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	69b9      	ldr	r1, [r7, #24]
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	617b      	str	r3, [r7, #20]
   return(result);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e5      	bne.n	8006374 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e011      	b.n	80063e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3758      	adds	r7, #88	@ 0x58
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f8:	e04f      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d04b      	beq.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006402:	f7fc fb1f 	bl	8002a44 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	429a      	cmp	r2, r3
 8006410:	d302      	bcc.n	8006418 <UART_WaitOnFlagUntilTimeout+0x30>
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e04e      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	d037      	beq.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b80      	cmp	r3, #128	@ 0x80
 800642e:	d034      	beq.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b40      	cmp	r3, #64	@ 0x40
 8006434:	d031      	beq.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b08      	cmp	r3, #8
 8006442:	d110      	bne.n	8006466 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2208      	movs	r2, #8
 800644a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 f8ff 	bl	8006650 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2208      	movs	r2, #8
 8006456:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e029      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006474:	d111      	bne.n	800649a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800647e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 f8e5 	bl	8006650 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2220      	movs	r2, #32
 800648a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e00f      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4013      	ands	r3, r2
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	bf0c      	ite	eq
 80064aa:	2301      	moveq	r3, #1
 80064ac:	2300      	movne	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d0a0      	beq.n	80063fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b097      	sub	sp, #92	@ 0x5c
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	4613      	mov	r3, r2
 80064d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	88fa      	ldrh	r2, [r7, #6]
 80064e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064f6:	d10e      	bne.n	8006516 <UART_Start_Receive_IT+0x52>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d105      	bne.n	800650c <UART_Start_Receive_IT+0x48>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006506:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800650a:	e02d      	b.n	8006568 <UART_Start_Receive_IT+0xa4>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	22ff      	movs	r2, #255	@ 0xff
 8006510:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006514:	e028      	b.n	8006568 <UART_Start_Receive_IT+0xa4>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10d      	bne.n	800653a <UART_Start_Receive_IT+0x76>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <UART_Start_Receive_IT+0x6c>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	22ff      	movs	r2, #255	@ 0xff
 800652a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800652e:	e01b      	b.n	8006568 <UART_Start_Receive_IT+0xa4>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	227f      	movs	r2, #127	@ 0x7f
 8006534:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006538:	e016      	b.n	8006568 <UART_Start_Receive_IT+0xa4>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006542:	d10d      	bne.n	8006560 <UART_Start_Receive_IT+0x9c>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <UART_Start_Receive_IT+0x92>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	227f      	movs	r2, #127	@ 0x7f
 8006550:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006554:	e008      	b.n	8006568 <UART_Start_Receive_IT+0xa4>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	223f      	movs	r2, #63	@ 0x3f
 800655a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800655e:	e003      	b.n	8006568 <UART_Start_Receive_IT+0xa4>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2222      	movs	r2, #34	@ 0x22
 8006574:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3308      	adds	r3, #8
 800657e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3308      	adds	r3, #8
 8006596:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006598:	64ba      	str	r2, [r7, #72]	@ 0x48
 800659a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800659e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80065a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065b4:	d107      	bne.n	80065c6 <UART_Start_Receive_IT+0x102>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d103      	bne.n	80065c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a21      	ldr	r2, [pc, #132]	@ (8006648 <UART_Start_Receive_IT+0x184>)
 80065c2:	669a      	str	r2, [r3, #104]	@ 0x68
 80065c4:	e002      	b.n	80065cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a20      	ldr	r2, [pc, #128]	@ (800664c <UART_Start_Receive_IT+0x188>)
 80065ca:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d019      	beq.n	8006608 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80065e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e6      	bne.n	80065d4 <UART_Start_Receive_IT+0x110>
 8006606:	e018      	b.n	800663a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	613b      	str	r3, [r7, #16]
   return(result);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f043 0320 	orr.w	r3, r3, #32
 800661c:	653b      	str	r3, [r7, #80]	@ 0x50
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006626:	623b      	str	r3, [r7, #32]
 8006628:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	69f9      	ldr	r1, [r7, #28]
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	61bb      	str	r3, [r7, #24]
   return(result);
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e6      	bne.n	8006608 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	375c      	adds	r7, #92	@ 0x5c
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	08006955 	.word	0x08006955
 800664c:	08006799 	.word	0x08006799

08006650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006650:	b480      	push	{r7}
 8006652:	b095      	sub	sp, #84	@ 0x54
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800666c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006676:	643b      	str	r3, [r7, #64]	@ 0x40
 8006678:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800667c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e6      	bne.n	8006658 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3308      	adds	r3, #8
 8006690:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	61fb      	str	r3, [r7, #28]
   return(result);
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3308      	adds	r3, #8
 80066a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e5      	bne.n	800668a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d118      	bne.n	80066f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f023 0310 	bic.w	r3, r3, #16
 80066da:	647b      	str	r3, [r7, #68]	@ 0x44
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6979      	ldr	r1, [r7, #20]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	613b      	str	r3, [r7, #16]
   return(result);
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e6      	bne.n	80066c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800670c:	bf00      	nop
 800670e:	3754      	adds	r7, #84	@ 0x54
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006724:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7ff fa70 	bl	8005c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	60bb      	str	r3, [r7, #8]
   return(result);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	6979      	ldr	r1, [r7, #20]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	613b      	str	r3, [r7, #16]
   return(result);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e6      	bne.n	800674c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff fa3c 	bl	8005c08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006790:	bf00      	nop
 8006792:	3720      	adds	r7, #32
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b09c      	sub	sp, #112	@ 0x70
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b0:	2b22      	cmp	r3, #34	@ 0x22
 80067b2:	f040 80be 	bne.w	8006932 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80067bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80067c4:	b2d9      	uxtb	r1, r3
 80067c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d0:	400a      	ands	r2, r1
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 80a3 	bne.w	8006946 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800680e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006814:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800681e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006820:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006824:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800682c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e6      	bne.n	8006800 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3308      	adds	r3, #8
 8006838:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006844:	f023 0301 	bic.w	r3, r3, #1
 8006848:	667b      	str	r3, [r7, #100]	@ 0x64
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006852:	647a      	str	r2, [r7, #68]	@ 0x44
 8006854:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e5      	bne.n	8006832 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a34      	ldr	r2, [pc, #208]	@ (8006950 <UART_RxISR_8BIT+0x1b8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d01f      	beq.n	80068c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d018      	beq.n	80068c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	623b      	str	r3, [r7, #32]
   return(result);
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80068b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e6      	bne.n	8006892 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d12e      	bne.n	800692a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0310 	bic.w	r3, r3, #16
 80068e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	69b9      	ldr	r1, [r7, #24]
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	617b      	str	r3, [r7, #20]
   return(result);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e6      	bne.n	80068d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	f003 0310 	and.w	r3, r3, #16
 800690e:	2b10      	cmp	r3, #16
 8006910:	d103      	bne.n	800691a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2210      	movs	r2, #16
 8006918:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff f984 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006928:	e00d      	b.n	8006946 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fa f8b4 	bl	8000a98 <HAL_UART_RxCpltCallback>
}
 8006930:	e009      	b.n	8006946 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	8b1b      	ldrh	r3, [r3, #24]
 8006938:	b29a      	uxth	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0208 	orr.w	r2, r2, #8
 8006942:	b292      	uxth	r2, r2
 8006944:	831a      	strh	r2, [r3, #24]
}
 8006946:	bf00      	nop
 8006948:	3770      	adds	r7, #112	@ 0x70
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40008000 	.word	0x40008000

08006954 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b09c      	sub	sp, #112	@ 0x70
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006962:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800696c:	2b22      	cmp	r3, #34	@ 0x22
 800696e:	f040 80be 	bne.w	8006aee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006978:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006980:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006982:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006986:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800698a:	4013      	ands	r3, r2
 800698c:	b29a      	uxth	r2, r3
 800698e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006990:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006996:	1c9a      	adds	r2, r3, #2
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f040 80a3 	bne.w	8006b02 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80069ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069da:	657b      	str	r3, [r7, #84]	@ 0x54
 80069dc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80069e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e6      	bne.n	80069bc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3308      	adds	r3, #8
 80069f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006a0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e5      	bne.n	80069ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a34      	ldr	r2, [pc, #208]	@ (8006b0c <UART_RxISR_16BIT+0x1b8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d01f      	beq.n	8006a80 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d018      	beq.n	8006a80 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a6e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e6      	bne.n	8006a4e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d12e      	bne.n	8006ae6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 0310 	bic.w	r3, r3, #16
 8006aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006aac:	61bb      	str	r3, [r7, #24]
 8006aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e6      	bne.n	8006a8e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f003 0310 	and.w	r3, r3, #16
 8006aca:	2b10      	cmp	r3, #16
 8006acc:	d103      	bne.n	8006ad6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2210      	movs	r2, #16
 8006ad4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff f8a6 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ae4:	e00d      	b.n	8006b02 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7f9 ffd6 	bl	8000a98 <HAL_UART_RxCpltCallback>
}
 8006aec:	e009      	b.n	8006b02 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	8b1b      	ldrh	r3, [r3, #24]
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0208 	orr.w	r2, r2, #8
 8006afe:	b292      	uxth	r2, r2
 8006b00:	831a      	strh	r2, [r3, #24]
}
 8006b02:	bf00      	nop
 8006b04:	3770      	adds	r7, #112	@ 0x70
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	40008000 	.word	0x40008000

08006b10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <memset>:
 8006b24:	4402      	add	r2, r0
 8006b26:	4603      	mov	r3, r0
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d100      	bne.n	8006b2e <memset+0xa>
 8006b2c:	4770      	bx	lr
 8006b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b32:	e7f9      	b.n	8006b28 <memset+0x4>

08006b34 <__libc_init_array>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	4d0d      	ldr	r5, [pc, #52]	@ (8006b6c <__libc_init_array+0x38>)
 8006b38:	4c0d      	ldr	r4, [pc, #52]	@ (8006b70 <__libc_init_array+0x3c>)
 8006b3a:	1b64      	subs	r4, r4, r5
 8006b3c:	10a4      	asrs	r4, r4, #2
 8006b3e:	2600      	movs	r6, #0
 8006b40:	42a6      	cmp	r6, r4
 8006b42:	d109      	bne.n	8006b58 <__libc_init_array+0x24>
 8006b44:	4d0b      	ldr	r5, [pc, #44]	@ (8006b74 <__libc_init_array+0x40>)
 8006b46:	4c0c      	ldr	r4, [pc, #48]	@ (8006b78 <__libc_init_array+0x44>)
 8006b48:	f000 f818 	bl	8006b7c <_init>
 8006b4c:	1b64      	subs	r4, r4, r5
 8006b4e:	10a4      	asrs	r4, r4, #2
 8006b50:	2600      	movs	r6, #0
 8006b52:	42a6      	cmp	r6, r4
 8006b54:	d105      	bne.n	8006b62 <__libc_init_array+0x2e>
 8006b56:	bd70      	pop	{r4, r5, r6, pc}
 8006b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5c:	4798      	blx	r3
 8006b5e:	3601      	adds	r6, #1
 8006b60:	e7ee      	b.n	8006b40 <__libc_init_array+0xc>
 8006b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b66:	4798      	blx	r3
 8006b68:	3601      	adds	r6, #1
 8006b6a:	e7f2      	b.n	8006b52 <__libc_init_array+0x1e>
 8006b6c:	08006be4 	.word	0x08006be4
 8006b70:	08006be4 	.word	0x08006be4
 8006b74:	08006be4 	.word	0x08006be4
 8006b78:	08006be8 	.word	0x08006be8

08006b7c <_init>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr

08006b88 <_fini>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr
