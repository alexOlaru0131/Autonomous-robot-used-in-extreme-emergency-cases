
STM_licenta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006b54  08006b54  00007b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b9c  08006b9c  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b9c  08006b9c  00007b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ba4  08006ba4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba4  08006ba4  00007ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ba8  08006ba8  00007ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006bac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08006bb8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08006bb8  000081d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bae  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c0  00000000  00000000  00018bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf6  00000000  00000000  0001bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002295d  00000000  00000000  0001c9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d69  00000000  00000000  0003f343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7881  00000000  00000000  000510ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012892d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  00128970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  0012c9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006b3c 	.word	0x08006b3c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08006b3c 	.word	0x08006b3c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f002 fa0e 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f83a 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fa52 	bl	80009b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000510:	f000 fa20 	bl	8000954 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000514:	f000 f9ee 	bl	80008f4 <MX_UART4_Init>
  MX_TIM1_Init();
 8000518:	f000 f884 	bl	8000624 <MX_TIM1_Init>
  MX_TIM2_Init();
 800051c:	f000 f952 	bl	80007c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart4, &rx_byte, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	4913      	ldr	r1, [pc, #76]	@ (8000570 <main+0x70>)
 8000524:	4813      	ldr	r0, [pc, #76]	@ (8000574 <main+0x74>)
 8000526:	f004 fffd 	bl	8005524 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800052a:	2100      	movs	r1, #0
 800052c:	4812      	ldr	r0, [pc, #72]	@ (8000578 <main+0x78>)
 800052e:	f004 f849 	bl	80045c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000532:	2104      	movs	r1, #4
 8000534:	4810      	ldr	r0, [pc, #64]	@ (8000578 <main+0x78>)
 8000536:	f004 f845 	bl	80045c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800053a:	2108      	movs	r1, #8
 800053c:	480e      	ldr	r0, [pc, #56]	@ (8000578 <main+0x78>)
 800053e:	f004 f841 	bl	80045c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000542:	210c      	movs	r1, #12
 8000544:	480c      	ldr	r0, [pc, #48]	@ (8000578 <main+0x78>)
 8000546:	f004 f83d 	bl	80045c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800054a:	2100      	movs	r1, #0
 800054c:	480b      	ldr	r0, [pc, #44]	@ (800057c <main+0x7c>)
 800054e:	f004 f839 	bl	80045c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000552:	2104      	movs	r1, #4
 8000554:	4809      	ldr	r0, [pc, #36]	@ (800057c <main+0x7c>)
 8000556:	f004 f835 	bl	80045c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800055a:	2108      	movs	r1, #8
 800055c:	4807      	ldr	r0, [pc, #28]	@ (800057c <main+0x7c>)
 800055e:	f004 f831 	bl	80045c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000562:	210c      	movs	r1, #12
 8000564:	4805      	ldr	r0, [pc, #20]	@ (800057c <main+0x7c>)
 8000566:	f004 f82d 	bl	80045c4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	bf00      	nop
 800056c:	e7fd      	b.n	800056a <main+0x6a>
 800056e:	bf00      	nop
 8000570:	200001d0 	.word	0x200001d0
 8000574:	200000c0 	.word	0x200000c0
 8000578:	20000028 	.word	0x20000028
 800057c:	20000074 	.word	0x20000074

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b096      	sub	sp, #88	@ 0x58
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2244      	movs	r2, #68	@ 0x44
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f006 faa8 	bl	8006ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005a6:	f002 fd69 	bl	800307c <HAL_PWREx_ControlVoltageScaling>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b0:	f001 ffa0 	bl	80024f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80005be:	2340      	movs	r3, #64	@ 0x40
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c6:	2302      	movs	r3, #2
 80005c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ce:	230a      	movs	r3, #10
 80005d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005d2:	2307      	movs	r3, #7
 80005d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fda0 	bl	8003128 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ee:	f001 ff81 	bl	80024f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2303      	movs	r3, #3
 80005f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	2104      	movs	r1, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f003 f9a0 	bl	8003950 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000616:	f001 ff6d 	bl	80024f4 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3758      	adds	r7, #88	@ 0x58
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09a      	sub	sp, #104	@ 0x68
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000644:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
 8000654:	615a      	str	r2, [r3, #20]
 8000656:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	222c      	movs	r2, #44	@ 0x2c
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 fa40 	bl	8006ae4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000664:	4b55      	ldr	r3, [pc, #340]	@ (80007bc <MX_TIM1_Init+0x198>)
 8000666:	4a56      	ldr	r2, [pc, #344]	@ (80007c0 <MX_TIM1_Init+0x19c>)
 8000668:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4000-1;
 800066a:	4b54      	ldr	r3, [pc, #336]	@ (80007bc <MX_TIM1_Init+0x198>)
 800066c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000670:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b52      	ldr	r3, [pc, #328]	@ (80007bc <MX_TIM1_Init+0x198>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000678:	4b50      	ldr	r3, [pc, #320]	@ (80007bc <MX_TIM1_Init+0x198>)
 800067a:	2264      	movs	r2, #100	@ 0x64
 800067c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067e:	4b4f      	ldr	r3, [pc, #316]	@ (80007bc <MX_TIM1_Init+0x198>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000684:	4b4d      	ldr	r3, [pc, #308]	@ (80007bc <MX_TIM1_Init+0x198>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068a:	4b4c      	ldr	r3, [pc, #304]	@ (80007bc <MX_TIM1_Init+0x198>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000690:	484a      	ldr	r0, [pc, #296]	@ (80007bc <MX_TIM1_Init+0x198>)
 8000692:	f003 fedf 	bl	8004454 <HAL_TIM_Base_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800069c:	f001 ff2a 	bl	80024f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006aa:	4619      	mov	r1, r3
 80006ac:	4843      	ldr	r0, [pc, #268]	@ (80007bc <MX_TIM1_Init+0x198>)
 80006ae:	f004 f983 	bl	80049b8 <HAL_TIM_ConfigClockSource>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006b8:	f001 ff1c 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006bc:	483f      	ldr	r0, [pc, #252]	@ (80007bc <MX_TIM1_Init+0x198>)
 80006be:	f003 ff20 	bl	8004502 <HAL_TIM_PWM_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006c8:	f001 ff14 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006cc:	2300      	movs	r3, #0
 80006ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006dc:	4619      	mov	r1, r3
 80006de:	4837      	ldr	r0, [pc, #220]	@ (80007bc <MX_TIM1_Init+0x198>)
 80006e0:	f004 fdec 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006ea:	f001 ff03 	bl	80024f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ee:	2360      	movs	r3, #96	@ 0x60
 80006f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f6:	2300      	movs	r3, #0
 80006f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006fa:	2300      	movs	r3, #0
 80006fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000706:	2300      	movs	r3, #0
 8000708:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800070a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800070e:	2200      	movs	r2, #0
 8000710:	4619      	mov	r1, r3
 8000712:	482a      	ldr	r0, [pc, #168]	@ (80007bc <MX_TIM1_Init+0x198>)
 8000714:	f004 f83c 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800071e:	f001 fee9 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000722:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000726:	2204      	movs	r2, #4
 8000728:	4619      	mov	r1, r3
 800072a:	4824      	ldr	r0, [pc, #144]	@ (80007bc <MX_TIM1_Init+0x198>)
 800072c:	f004 f830 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000736:	f001 fedd 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800073a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800073e:	2208      	movs	r2, #8
 8000740:	4619      	mov	r1, r3
 8000742:	481e      	ldr	r0, [pc, #120]	@ (80007bc <MX_TIM1_Init+0x198>)
 8000744:	f004 f824 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800074e:	f001 fed1 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000752:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000756:	220c      	movs	r2, #12
 8000758:	4619      	mov	r1, r3
 800075a:	4818      	ldr	r0, [pc, #96]	@ (80007bc <MX_TIM1_Init+0x198>)
 800075c:	f004 f818 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000766:	f001 fec5 	bl	80024f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800077e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000782:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800078c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4619      	mov	r1, r3
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <MX_TIM1_Init+0x198>)
 80007a0:	f004 fdfa 	bl	8005398 <HAL_TIMEx_ConfigBreakDeadTime>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80007aa:	f001 fea3 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ae:	4803      	ldr	r0, [pc, #12]	@ (80007bc <MX_TIM1_Init+0x198>)
 80007b0:	f001 fefc 	bl	80025ac <HAL_TIM_MspPostInit>

}
 80007b4:	bf00      	nop
 80007b6:	3768      	adds	r7, #104	@ 0x68
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000028 	.word	0x20000028
 80007c0:	40012c00 	.word	0x40012c00

080007c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	@ 0x38
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
 80007f2:	615a      	str	r2, [r3, #20]
 80007f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f6:	4b3e      	ldr	r3, [pc, #248]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 80007f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 80007fe:	4b3c      	ldr	r3, [pc, #240]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 8000800:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000804:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	4b3a      	ldr	r3, [pc, #232]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800080c:	4b38      	ldr	r3, [pc, #224]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 800080e:	2264      	movs	r2, #100	@ 0x64
 8000810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b37      	ldr	r3, [pc, #220]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b35      	ldr	r3, [pc, #212]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081e:	4834      	ldr	r0, [pc, #208]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 8000820:	f003 fe18 	bl	8004454 <HAL_TIM_Base_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800082a:	f001 fe63 	bl	80024f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000832:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000834:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000838:	4619      	mov	r1, r3
 800083a:	482d      	ldr	r0, [pc, #180]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 800083c:	f004 f8bc 	bl	80049b8 <HAL_TIM_ConfigClockSource>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000846:	f001 fe55 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800084a:	4829      	ldr	r0, [pc, #164]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 800084c:	f003 fe59 	bl	8004502 <HAL_TIM_PWM_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000856:	f001 fe4d 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4821      	ldr	r0, [pc, #132]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 800086a:	f004 fd27 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000874:	f001 fe3e 	bl	80024f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000878:	2360      	movs	r3, #96	@ 0x60
 800087a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	4818      	ldr	r0, [pc, #96]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 8000890:	f003 ff7e 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800089a:	f001 fe2b 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800089e:	463b      	mov	r3, r7
 80008a0:	2204      	movs	r2, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4812      	ldr	r0, [pc, #72]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 80008a6:	f003 ff73 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80008b0:	f001 fe20 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	2208      	movs	r2, #8
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 80008bc:	f003 ff68 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80008c6:	f001 fe15 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008ca:	463b      	mov	r3, r7
 80008cc:	220c      	movs	r2, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	4807      	ldr	r0, [pc, #28]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 80008d2:	f003 ff5d 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80008dc:	f001 fe0a 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008e0:	4803      	ldr	r0, [pc, #12]	@ (80008f0 <MX_TIM2_Init+0x12c>)
 80008e2:	f001 fe63 	bl	80025ac <HAL_TIM_MspPostInit>

}
 80008e6:	bf00      	nop
 80008e8:	3738      	adds	r7, #56	@ 0x38
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000074 	.word	0x20000074

080008f4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_UART4_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_UART4_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_UART4_Init+0x58>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_UART4_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_UART4_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_UART4_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_UART4_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_UART4_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_UART4_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_UART4_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_UART4_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_UART4_Init+0x58>)
 8000938:	f004 fda6 	bl	8005488 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000942:	f001 fdd7 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000c0 	.word	0x200000c0
 8000950:	40004c00 	.word	0x40004c00

08000954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 800095a:	4a15      	ldr	r2, [pc, #84]	@ (80009b0 <MX_USART2_UART_Init+0x5c>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_USART2_UART_Init+0x58>)
 8000998:	f004 fd76 	bl	8005488 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009a2:	f001 fda7 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000148 	.word	0x20000148
 80009b0:	40004400 	.word	0x40004400

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	@ 0x28
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b47      	ldr	r3, [pc, #284]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a46      	ldr	r2, [pc, #280]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b44      	ldr	r3, [pc, #272]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	4b41      	ldr	r3, [pc, #260]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a40      	ldr	r2, [pc, #256]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ee:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	4a3a      	ldr	r2, [pc, #232]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a06:	4b38      	ldr	r3, [pc, #224]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b35      	ldr	r3, [pc, #212]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	4a34      	ldr	r2, [pc, #208]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ae8 <MX_GPIO_Init+0x134>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_2_Pin|IN2_2_Pin|IN3_2_Pin|IN4_2_Pin
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f240 31cf 	movw	r1, #975	@ 0x3cf
 8000a30:	482e      	ldr	r0, [pc, #184]	@ (8000aec <MX_GPIO_Init+0x138>)
 8000a32:	f002 fafd 	bl	8003030 <HAL_GPIO_WritePin>
                          |IN4_1_Pin|IN3_1_Pin|IN2_1_Pin|IN1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2130      	movs	r1, #48	@ 0x30
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3e:	f002 faf7 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a48:	4829      	ldr	r0, [pc, #164]	@ (8000af0 <MX_GPIO_Init+0x13c>)
 8000a4a:	f002 faf1 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a54:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4821      	ldr	r0, [pc, #132]	@ (8000aec <MX_GPIO_Init+0x138>)
 8000a66:	f002 f969 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_2_Pin IN2_2_Pin IN3_2_Pin IN4_2_Pin
                           IN4_1_Pin IN3_1_Pin IN2_1_Pin IN1_1_Pin */
  GPIO_InitStruct.Pin = IN1_2_Pin|IN2_2_Pin|IN3_2_Pin|IN4_2_Pin
 8000a6a:	f240 33cf 	movw	r3, #975	@ 0x3cf
 8000a6e:	617b      	str	r3, [r7, #20]
                          |IN4_1_Pin|IN3_1_Pin|IN2_1_Pin|IN1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	481a      	ldr	r0, [pc, #104]	@ (8000aec <MX_GPIO_Init+0x138>)
 8000a84:	f002 f95a 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin PA5 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|GPIO_PIN_5;
 8000a88:	2330      	movs	r3, #48	@ 0x30
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa2:	f002 f94b 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000aa6:	2340      	movs	r3, #64	@ 0x40
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abc:	f002 f93e 	bl	8002d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000ac0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_GPIO_Init+0x13c>)
 8000ada:	f002 f92f 	bl	8002d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	48000800 	.word	0x48000800
 8000af0:	48000400 	.word	0x48000400

08000af4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == UART4){
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4abe      	ldr	r2, [pc, #760]	@ (8000dfc <HAL_UART_RxCpltCallback+0x308>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	f041 84ea 	bne.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  HAL_UART_Receive_IT(&huart4, &rx_byte, sizeof(rx_byte));
 8000b08:	2201      	movs	r2, #1
 8000b0a:	49bd      	ldr	r1, [pc, #756]	@ (8000e00 <HAL_UART_RxCpltCallback+0x30c>)
 8000b0c:	48bd      	ldr	r0, [pc, #756]	@ (8000e04 <HAL_UART_RxCpltCallback+0x310>)
 8000b0e:	f004 fd09 	bl	8005524 <HAL_UART_Receive_IT>
	  if (rx_byte == 0x01){
 8000b12:	4bbb      	ldr	r3, [pc, #748]	@ (8000e00 <HAL_UART_RxCpltCallback+0x30c>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d139      	bne.n	8000b8e <HAL_UART_RxCpltCallback+0x9a>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b20:	48b9      	ldr	r0, [pc, #740]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000b22:	f002 fa85 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b2c:	48b6      	ldr	r0, [pc, #728]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000b2e:	f002 fa7f 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2180      	movs	r1, #128	@ 0x80
 8000b36:	48b4      	ldr	r0, [pc, #720]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000b38:	f002 fa7a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2140      	movs	r1, #64	@ 0x40
 8000b40:	48b1      	ldr	r0, [pc, #708]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000b42:	f002 fa75 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2101      	movs	r1, #1
 8000b4a:	48af      	ldr	r0, [pc, #700]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000b4c:	f002 fa70 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2102      	movs	r1, #2
 8000b54:	48ac      	ldr	r0, [pc, #688]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000b56:	f002 fa6b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	48aa      	ldr	r0, [pc, #680]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000b60:	f002 fa66 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2108      	movs	r1, #8
 8000b68:	48a7      	ldr	r0, [pc, #668]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000b6a:	f002 fa61 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b74:	48a5      	ldr	r0, [pc, #660]	@ (8000e0c <HAL_UART_RxCpltCallback+0x318>)
 8000b76:	f002 fa5b 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 8000b7a:	4ba5      	ldr	r3, [pc, #660]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2214      	movs	r2, #20
 8000b80:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 8000b82:	4ba3      	ldr	r3, [pc, #652]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2214      	movs	r2, #20
 8000b88:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
      }
    }
}
 8000b8a:	f001 bca7 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x02){
 8000b8e:	4b9c      	ldr	r3, [pc, #624]	@ (8000e00 <HAL_UART_RxCpltCallback+0x30c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d139      	bne.n	8000c0a <HAL_UART_RxCpltCallback+0x116>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b9c:	489a      	ldr	r0, [pc, #616]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000b9e:	f002 fa47 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ba8:	4897      	ldr	r0, [pc, #604]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000baa:	f002 fa41 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2180      	movs	r1, #128	@ 0x80
 8000bb2:	4895      	ldr	r0, [pc, #596]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000bb4:	f002 fa3c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2140      	movs	r1, #64	@ 0x40
 8000bbc:	4892      	ldr	r0, [pc, #584]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000bbe:	f002 fa37 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4890      	ldr	r0, [pc, #576]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000bc8:	f002 fa32 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2102      	movs	r1, #2
 8000bd0:	488d      	ldr	r0, [pc, #564]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000bd2:	f002 fa2d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2104      	movs	r1, #4
 8000bda:	488b      	ldr	r0, [pc, #556]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000bdc:	f002 fa28 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2108      	movs	r1, #8
 8000be4:	4888      	ldr	r0, [pc, #544]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000be6:	f002 fa23 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf0:	4886      	ldr	r0, [pc, #536]	@ (8000e0c <HAL_UART_RxCpltCallback+0x318>)
 8000bf2:	f002 fa1d 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 8000bf6:	4b86      	ldr	r3, [pc, #536]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2228      	movs	r2, #40	@ 0x28
 8000bfc:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 8000bfe:	4b84      	ldr	r3, [pc, #528]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2228      	movs	r2, #40	@ 0x28
 8000c04:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000c06:	f001 bc69 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x03){
 8000c0a:	4b7d      	ldr	r3, [pc, #500]	@ (8000e00 <HAL_UART_RxCpltCallback+0x30c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d139      	bne.n	8000c86 <HAL_UART_RxCpltCallback+0x192>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c18:	487b      	ldr	r0, [pc, #492]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000c1a:	f002 fa09 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c24:	4878      	ldr	r0, [pc, #480]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000c26:	f002 fa03 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2180      	movs	r1, #128	@ 0x80
 8000c2e:	4876      	ldr	r0, [pc, #472]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000c30:	f002 f9fe 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2140      	movs	r1, #64	@ 0x40
 8000c38:	4873      	ldr	r0, [pc, #460]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000c3a:	f002 f9f9 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2101      	movs	r1, #1
 8000c42:	4871      	ldr	r0, [pc, #452]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000c44:	f002 f9f4 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	486e      	ldr	r0, [pc, #440]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000c4e:	f002 f9ef 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2104      	movs	r1, #4
 8000c56:	486c      	ldr	r0, [pc, #432]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000c58:	f002 f9ea 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2108      	movs	r1, #8
 8000c60:	4869      	ldr	r0, [pc, #420]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000c62:	f002 f9e5 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c6c:	4867      	ldr	r0, [pc, #412]	@ (8000e0c <HAL_UART_RxCpltCallback+0x318>)
 8000c6e:	f002 f9df 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 8000c72:	4b67      	ldr	r3, [pc, #412]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	223c      	movs	r2, #60	@ 0x3c
 8000c78:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 8000c7a:	4b65      	ldr	r3, [pc, #404]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	223c      	movs	r2, #60	@ 0x3c
 8000c80:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000c82:	f001 bc2b 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x04){
 8000c86:	4b5e      	ldr	r3, [pc, #376]	@ (8000e00 <HAL_UART_RxCpltCallback+0x30c>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	d139      	bne.n	8000d02 <HAL_UART_RxCpltCallback+0x20e>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c94:	485c      	ldr	r0, [pc, #368]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000c96:	f002 f9cb 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ca0:	4859      	ldr	r0, [pc, #356]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000ca2:	f002 f9c5 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2180      	movs	r1, #128	@ 0x80
 8000caa:	4857      	ldr	r0, [pc, #348]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000cac:	f002 f9c0 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2140      	movs	r1, #64	@ 0x40
 8000cb4:	4854      	ldr	r0, [pc, #336]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000cb6:	f002 f9bb 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	4852      	ldr	r0, [pc, #328]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000cc0:	f002 f9b6 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	484f      	ldr	r0, [pc, #316]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000cca:	f002 f9b1 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	484d      	ldr	r0, [pc, #308]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000cd4:	f002 f9ac 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2108      	movs	r1, #8
 8000cdc:	484a      	ldr	r0, [pc, #296]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000cde:	f002 f9a7 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce8:	4848      	ldr	r0, [pc, #288]	@ (8000e0c <HAL_UART_RxCpltCallback+0x318>)
 8000cea:	f002 f9a1 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 8000cee:	4b48      	ldr	r3, [pc, #288]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2250      	movs	r2, #80	@ 0x50
 8000cf4:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 8000cf6:	4b46      	ldr	r3, [pc, #280]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2250      	movs	r2, #80	@ 0x50
 8000cfc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000cfe:	f001 bbed 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x05){
 8000d02:	4b3f      	ldr	r3, [pc, #252]	@ (8000e00 <HAL_UART_RxCpltCallback+0x30c>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b05      	cmp	r3, #5
 8000d08:	d139      	bne.n	8000d7e <HAL_UART_RxCpltCallback+0x28a>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d10:	483d      	ldr	r0, [pc, #244]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000d12:	f002 f98d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d1c:	483a      	ldr	r0, [pc, #232]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000d1e:	f002 f987 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2180      	movs	r1, #128	@ 0x80
 8000d26:	4838      	ldr	r0, [pc, #224]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000d28:	f002 f982 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2140      	movs	r1, #64	@ 0x40
 8000d30:	4835      	ldr	r0, [pc, #212]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000d32:	f002 f97d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4833      	ldr	r0, [pc, #204]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000d3c:	f002 f978 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2102      	movs	r1, #2
 8000d44:	4830      	ldr	r0, [pc, #192]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000d46:	f002 f973 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	482e      	ldr	r0, [pc, #184]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000d50:	f002 f96e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2108      	movs	r1, #8
 8000d58:	482b      	ldr	r0, [pc, #172]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000d5a:	f002 f969 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d64:	4829      	ldr	r0, [pc, #164]	@ (8000e0c <HAL_UART_RxCpltCallback+0x318>)
 8000d66:	f002 f963 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 8000d6a:	4b29      	ldr	r3, [pc, #164]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2264      	movs	r2, #100	@ 0x64
 8000d70:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8000d72:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2264      	movs	r2, #100	@ 0x64
 8000d78:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000d7a:	f001 bbaf 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x06){
 8000d7e:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <HAL_UART_RxCpltCallback+0x30c>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d146      	bne.n	8000e14 <HAL_UART_RxCpltCallback+0x320>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8c:	481e      	ldr	r0, [pc, #120]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000d8e:	f002 f94f 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d98:	481b      	ldr	r0, [pc, #108]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000d9a:	f002 f949 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2180      	movs	r1, #128	@ 0x80
 8000da2:	4819      	ldr	r0, [pc, #100]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000da4:	f002 f944 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2140      	movs	r1, #64	@ 0x40
 8000dac:	4816      	ldr	r0, [pc, #88]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000dae:	f002 f93f 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2101      	movs	r1, #1
 8000db6:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000db8:	f002 f93a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	4811      	ldr	r0, [pc, #68]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000dc2:	f002 f935 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2104      	movs	r1, #4
 8000dca:	480f      	ldr	r0, [pc, #60]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000dcc:	f002 f930 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <HAL_UART_RxCpltCallback+0x314>)
 8000dd6:	f002 f92b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de0:	480a      	ldr	r0, [pc, #40]	@ (8000e0c <HAL_UART_RxCpltCallback+0x318>)
 8000de2:	f002 f925 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2214      	movs	r2, #20
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <HAL_UART_RxCpltCallback+0x31c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2214      	movs	r2, #20
 8000df4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000df6:	f001 bb71 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
 8000dfa:	bf00      	nop
 8000dfc:	40004c00 	.word	0x40004c00
 8000e00:	200001d0 	.word	0x200001d0
 8000e04:	200000c0 	.word	0x200000c0
 8000e08:	48000800 	.word	0x48000800
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x07){
 8000e14:	4bb9      	ldr	r3, [pc, #740]	@ (80010fc <HAL_UART_RxCpltCallback+0x608>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b07      	cmp	r3, #7
 8000e1a:	d139      	bne.n	8000e90 <HAL_UART_RxCpltCallback+0x39c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e22:	48b7      	ldr	r0, [pc, #732]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000e24:	f002 f904 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e2e:	48b4      	ldr	r0, [pc, #720]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000e30:	f002 f8fe 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2180      	movs	r1, #128	@ 0x80
 8000e38:	48b1      	ldr	r0, [pc, #708]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000e3a:	f002 f8f9 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2140      	movs	r1, #64	@ 0x40
 8000e42:	48af      	ldr	r0, [pc, #700]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000e44:	f002 f8f4 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	48ac      	ldr	r0, [pc, #688]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000e4e:	f002 f8ef 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2102      	movs	r1, #2
 8000e56:	48aa      	ldr	r0, [pc, #680]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000e58:	f002 f8ea 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2104      	movs	r1, #4
 8000e60:	48a7      	ldr	r0, [pc, #668]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000e62:	f002 f8e5 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2108      	movs	r1, #8
 8000e6a:	48a5      	ldr	r0, [pc, #660]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000e6c:	f002 f8e0 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e76:	48a3      	ldr	r0, [pc, #652]	@ (8001104 <HAL_UART_RxCpltCallback+0x610>)
 8000e78:	f002 f8da 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 8000e7c:	4ba2      	ldr	r3, [pc, #648]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2228      	movs	r2, #40	@ 0x28
 8000e82:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 8000e84:	4ba0      	ldr	r3, [pc, #640]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2228      	movs	r2, #40	@ 0x28
 8000e8a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000e8c:	f001 bb26 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x08){
 8000e90:	4b9a      	ldr	r3, [pc, #616]	@ (80010fc <HAL_UART_RxCpltCallback+0x608>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d139      	bne.n	8000f0c <HAL_UART_RxCpltCallback+0x418>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e9e:	4898      	ldr	r0, [pc, #608]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000ea0:	f002 f8c6 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eaa:	4895      	ldr	r0, [pc, #596]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000eac:	f002 f8c0 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2180      	movs	r1, #128	@ 0x80
 8000eb4:	4892      	ldr	r0, [pc, #584]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000eb6:	f002 f8bb 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2140      	movs	r1, #64	@ 0x40
 8000ebe:	4890      	ldr	r0, [pc, #576]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000ec0:	f002 f8b6 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	488d      	ldr	r0, [pc, #564]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000eca:	f002 f8b1 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	488b      	ldr	r0, [pc, #556]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000ed4:	f002 f8ac 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2104      	movs	r1, #4
 8000edc:	4888      	ldr	r0, [pc, #544]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000ede:	f002 f8a7 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	4886      	ldr	r0, [pc, #536]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000ee8:	f002 f8a2 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ef2:	4884      	ldr	r0, [pc, #528]	@ (8001104 <HAL_UART_RxCpltCallback+0x610>)
 8000ef4:	f002 f89c 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 8000ef8:	4b83      	ldr	r3, [pc, #524]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	223c      	movs	r2, #60	@ 0x3c
 8000efe:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 8000f00:	4b81      	ldr	r3, [pc, #516]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	223c      	movs	r2, #60	@ 0x3c
 8000f06:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f08:	f001 bae8 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x09){
 8000f0c:	4b7b      	ldr	r3, [pc, #492]	@ (80010fc <HAL_UART_RxCpltCallback+0x608>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b09      	cmp	r3, #9
 8000f12:	d139      	bne.n	8000f88 <HAL_UART_RxCpltCallback+0x494>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f1a:	4879      	ldr	r0, [pc, #484]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000f1c:	f002 f888 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f26:	4876      	ldr	r0, [pc, #472]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000f28:	f002 f882 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2180      	movs	r1, #128	@ 0x80
 8000f30:	4873      	ldr	r0, [pc, #460]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000f32:	f002 f87d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	2140      	movs	r1, #64	@ 0x40
 8000f3a:	4871      	ldr	r0, [pc, #452]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000f3c:	f002 f878 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2101      	movs	r1, #1
 8000f44:	486e      	ldr	r0, [pc, #440]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000f46:	f002 f873 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	486c      	ldr	r0, [pc, #432]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000f50:	f002 f86e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2104      	movs	r1, #4
 8000f58:	4869      	ldr	r0, [pc, #420]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000f5a:	f002 f869 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2108      	movs	r1, #8
 8000f62:	4867      	ldr	r0, [pc, #412]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000f64:	f002 f864 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6e:	4865      	ldr	r0, [pc, #404]	@ (8001104 <HAL_UART_RxCpltCallback+0x610>)
 8000f70:	f002 f85e 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 8000f74:	4b64      	ldr	r3, [pc, #400]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2250      	movs	r2, #80	@ 0x50
 8000f7a:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 8000f7c:	4b62      	ldr	r3, [pc, #392]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2250      	movs	r2, #80	@ 0x50
 8000f82:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f84:	f001 baaa 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x0A){
 8000f88:	4b5c      	ldr	r3, [pc, #368]	@ (80010fc <HAL_UART_RxCpltCallback+0x608>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b0a      	cmp	r3, #10
 8000f8e:	d139      	bne.n	8001004 <HAL_UART_RxCpltCallback+0x510>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f96:	485a      	ldr	r0, [pc, #360]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000f98:	f002 f84a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa2:	4857      	ldr	r0, [pc, #348]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000fa4:	f002 f844 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2180      	movs	r1, #128	@ 0x80
 8000fac:	4854      	ldr	r0, [pc, #336]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000fae:	f002 f83f 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2140      	movs	r1, #64	@ 0x40
 8000fb6:	4852      	ldr	r0, [pc, #328]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000fb8:	f002 f83a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	484f      	ldr	r0, [pc, #316]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000fc2:	f002 f835 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2102      	movs	r1, #2
 8000fca:	484d      	ldr	r0, [pc, #308]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000fcc:	f002 f830 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	484a      	ldr	r0, [pc, #296]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000fd6:	f002 f82b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2108      	movs	r1, #8
 8000fde:	4848      	ldr	r0, [pc, #288]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8000fe0:	f002 f826 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fea:	4846      	ldr	r0, [pc, #280]	@ (8001104 <HAL_UART_RxCpltCallback+0x610>)
 8000fec:	f002 f820 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 8000ff0:	4b45      	ldr	r3, [pc, #276]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2264      	movs	r2, #100	@ 0x64
 8000ff6:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8000ff8:	4b43      	ldr	r3, [pc, #268]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2264      	movs	r2, #100	@ 0x64
 8000ffe:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001000:	f001 ba6c 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x0B){
 8001004:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <HAL_UART_RxCpltCallback+0x608>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b0b      	cmp	r3, #11
 800100a:	d139      	bne.n	8001080 <HAL_UART_RxCpltCallback+0x58c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001012:	483b      	ldr	r0, [pc, #236]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8001014:	f002 f80c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800101e:	4838      	ldr	r0, [pc, #224]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8001020:	f002 f806 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	4835      	ldr	r0, [pc, #212]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 800102a:	f002 f801 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2140      	movs	r1, #64	@ 0x40
 8001032:	4833      	ldr	r0, [pc, #204]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8001034:	f001 fffc 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2101      	movs	r1, #1
 800103c:	4830      	ldr	r0, [pc, #192]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 800103e:	f001 fff7 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2102      	movs	r1, #2
 8001046:	482e      	ldr	r0, [pc, #184]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8001048:	f001 fff2 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2104      	movs	r1, #4
 8001050:	482b      	ldr	r0, [pc, #172]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8001052:	f001 ffed 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2108      	movs	r1, #8
 800105a:	4829      	ldr	r0, [pc, #164]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 800105c:	f001 ffe8 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001066:	4827      	ldr	r0, [pc, #156]	@ (8001104 <HAL_UART_RxCpltCallback+0x610>)
 8001068:	f001 ffe2 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 800106c:	4b26      	ldr	r3, [pc, #152]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2214      	movs	r2, #20
 8001072:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 8001074:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2214      	movs	r2, #20
 800107a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800107c:	f001 ba2e 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x0C){
 8001080:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <HAL_UART_RxCpltCallback+0x608>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b0c      	cmp	r3, #12
 8001086:	d141      	bne.n	800110c <HAL_UART_RxCpltCallback+0x618>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800108e:	481c      	ldr	r0, [pc, #112]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 8001090:	f001 ffce 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800109a:	4819      	ldr	r0, [pc, #100]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 800109c:	f001 ffc8 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2180      	movs	r1, #128	@ 0x80
 80010a4:	4816      	ldr	r0, [pc, #88]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 80010a6:	f001 ffc3 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2140      	movs	r1, #64	@ 0x40
 80010ae:	4814      	ldr	r0, [pc, #80]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 80010b0:	f001 ffbe 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2101      	movs	r1, #1
 80010b8:	4811      	ldr	r0, [pc, #68]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 80010ba:	f001 ffb9 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2102      	movs	r1, #2
 80010c2:	480f      	ldr	r0, [pc, #60]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 80010c4:	f001 ffb4 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2104      	movs	r1, #4
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 80010ce:	f001 ffaf 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2108      	movs	r1, #8
 80010d6:	480a      	ldr	r0, [pc, #40]	@ (8001100 <HAL_UART_RxCpltCallback+0x60c>)
 80010d8:	f001 ffaa 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010e2:	4808      	ldr	r0, [pc, #32]	@ (8001104 <HAL_UART_RxCpltCallback+0x610>)
 80010e4:	f001 ffa4 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 80010e8:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2228      	movs	r2, #40	@ 0x28
 80010ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <HAL_UART_RxCpltCallback+0x614>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2228      	movs	r2, #40	@ 0x28
 80010f6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010f8:	f001 b9f0 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
 80010fc:	200001d0 	.word	0x200001d0
 8001100:	48000800 	.word	0x48000800
 8001104:	48000400 	.word	0x48000400
 8001108:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x0D){
 800110c:	4bb9      	ldr	r3, [pc, #740]	@ (80013f4 <HAL_UART_RxCpltCallback+0x900>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b0d      	cmp	r3, #13
 8001112:	d139      	bne.n	8001188 <HAL_UART_RxCpltCallback+0x694>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800111a:	48b7      	ldr	r0, [pc, #732]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 800111c:	f001 ff88 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001126:	48b4      	ldr	r0, [pc, #720]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001128:	f001 ff82 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2180      	movs	r1, #128	@ 0x80
 8001130:	48b1      	ldr	r0, [pc, #708]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001132:	f001 ff7d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2140      	movs	r1, #64	@ 0x40
 800113a:	48af      	ldr	r0, [pc, #700]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 800113c:	f001 ff78 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2101      	movs	r1, #1
 8001144:	48ac      	ldr	r0, [pc, #688]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001146:	f001 ff73 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2102      	movs	r1, #2
 800114e:	48aa      	ldr	r0, [pc, #680]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001150:	f001 ff6e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2104      	movs	r1, #4
 8001158:	48a7      	ldr	r0, [pc, #668]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 800115a:	f001 ff69 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2108      	movs	r1, #8
 8001162:	48a5      	ldr	r0, [pc, #660]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001164:	f001 ff64 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800116e:	48a3      	ldr	r0, [pc, #652]	@ (80013fc <HAL_UART_RxCpltCallback+0x908>)
 8001170:	f001 ff5e 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 8001174:	4ba2      	ldr	r3, [pc, #648]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	223c      	movs	r2, #60	@ 0x3c
 800117a:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 800117c:	4ba0      	ldr	r3, [pc, #640]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	223c      	movs	r2, #60	@ 0x3c
 8001182:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001184:	f001 b9aa 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x0E){
 8001188:	4b9a      	ldr	r3, [pc, #616]	@ (80013f4 <HAL_UART_RxCpltCallback+0x900>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b0e      	cmp	r3, #14
 800118e:	d139      	bne.n	8001204 <HAL_UART_RxCpltCallback+0x710>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001196:	4898      	ldr	r0, [pc, #608]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001198:	f001 ff4a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a2:	4895      	ldr	r0, [pc, #596]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80011a4:	f001 ff44 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2180      	movs	r1, #128	@ 0x80
 80011ac:	4892      	ldr	r0, [pc, #584]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80011ae:	f001 ff3f 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2140      	movs	r1, #64	@ 0x40
 80011b6:	4890      	ldr	r0, [pc, #576]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80011b8:	f001 ff3a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2101      	movs	r1, #1
 80011c0:	488d      	ldr	r0, [pc, #564]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80011c2:	f001 ff35 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2102      	movs	r1, #2
 80011ca:	488b      	ldr	r0, [pc, #556]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80011cc:	f001 ff30 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2104      	movs	r1, #4
 80011d4:	4888      	ldr	r0, [pc, #544]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80011d6:	f001 ff2b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2108      	movs	r1, #8
 80011de:	4886      	ldr	r0, [pc, #536]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80011e0:	f001 ff26 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ea:	4884      	ldr	r0, [pc, #528]	@ (80013fc <HAL_UART_RxCpltCallback+0x908>)
 80011ec:	f001 ff20 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 80011f0:	4b83      	ldr	r3, [pc, #524]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2250      	movs	r2, #80	@ 0x50
 80011f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 80011f8:	4b81      	ldr	r3, [pc, #516]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2250      	movs	r2, #80	@ 0x50
 80011fe:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001200:	f001 b96c 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x0F){
 8001204:	4b7b      	ldr	r3, [pc, #492]	@ (80013f4 <HAL_UART_RxCpltCallback+0x900>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d139      	bne.n	8001280 <HAL_UART_RxCpltCallback+0x78c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001212:	4879      	ldr	r0, [pc, #484]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001214:	f001 ff0c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800121e:	4876      	ldr	r0, [pc, #472]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001220:	f001 ff06 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	4873      	ldr	r0, [pc, #460]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 800122a:	f001 ff01 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2140      	movs	r1, #64	@ 0x40
 8001232:	4871      	ldr	r0, [pc, #452]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001234:	f001 fefc 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2101      	movs	r1, #1
 800123c:	486e      	ldr	r0, [pc, #440]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 800123e:	f001 fef7 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2102      	movs	r1, #2
 8001246:	486c      	ldr	r0, [pc, #432]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001248:	f001 fef2 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2104      	movs	r1, #4
 8001250:	4869      	ldr	r0, [pc, #420]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001252:	f001 feed 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2108      	movs	r1, #8
 800125a:	4867      	ldr	r0, [pc, #412]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 800125c:	f001 fee8 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001266:	4865      	ldr	r0, [pc, #404]	@ (80013fc <HAL_UART_RxCpltCallback+0x908>)
 8001268:	f001 fee2 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 800126c:	4b64      	ldr	r3, [pc, #400]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2264      	movs	r2, #100	@ 0x64
 8001272:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8001274:	4b62      	ldr	r3, [pc, #392]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2264      	movs	r2, #100	@ 0x64
 800127a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800127c:	f001 b92e 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x10){
 8001280:	4b5c      	ldr	r3, [pc, #368]	@ (80013f4 <HAL_UART_RxCpltCallback+0x900>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b10      	cmp	r3, #16
 8001286:	d139      	bne.n	80012fc <HAL_UART_RxCpltCallback+0x808>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800128e:	485a      	ldr	r0, [pc, #360]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001290:	f001 fece 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800129a:	4857      	ldr	r0, [pc, #348]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 800129c:	f001 fec8 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2180      	movs	r1, #128	@ 0x80
 80012a4:	4854      	ldr	r0, [pc, #336]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80012a6:	f001 fec3 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2140      	movs	r1, #64	@ 0x40
 80012ae:	4852      	ldr	r0, [pc, #328]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80012b0:	f001 febe 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2101      	movs	r1, #1
 80012b8:	484f      	ldr	r0, [pc, #316]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80012ba:	f001 feb9 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2102      	movs	r1, #2
 80012c2:	484d      	ldr	r0, [pc, #308]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80012c4:	f001 feb4 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2104      	movs	r1, #4
 80012cc:	484a      	ldr	r0, [pc, #296]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80012ce:	f001 feaf 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2108      	movs	r1, #8
 80012d6:	4848      	ldr	r0, [pc, #288]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80012d8:	f001 feaa 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e2:	4846      	ldr	r0, [pc, #280]	@ (80013fc <HAL_UART_RxCpltCallback+0x908>)
 80012e4:	f001 fea4 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 80012e8:	4b45      	ldr	r3, [pc, #276]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2214      	movs	r2, #20
 80012ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 80012f0:	4b43      	ldr	r3, [pc, #268]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2214      	movs	r2, #20
 80012f6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012f8:	f001 b8f0 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x11){
 80012fc:	4b3d      	ldr	r3, [pc, #244]	@ (80013f4 <HAL_UART_RxCpltCallback+0x900>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b11      	cmp	r3, #17
 8001302:	d139      	bne.n	8001378 <HAL_UART_RxCpltCallback+0x884>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800130a:	483b      	ldr	r0, [pc, #236]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 800130c:	f001 fe90 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001316:	4838      	ldr	r0, [pc, #224]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001318:	f001 fe8a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2180      	movs	r1, #128	@ 0x80
 8001320:	4835      	ldr	r0, [pc, #212]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001322:	f001 fe85 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2140      	movs	r1, #64	@ 0x40
 800132a:	4833      	ldr	r0, [pc, #204]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 800132c:	f001 fe80 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2101      	movs	r1, #1
 8001334:	4830      	ldr	r0, [pc, #192]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001336:	f001 fe7b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	2102      	movs	r1, #2
 800133e:	482e      	ldr	r0, [pc, #184]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001340:	f001 fe76 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2104      	movs	r1, #4
 8001348:	482b      	ldr	r0, [pc, #172]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 800134a:	f001 fe71 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	2108      	movs	r1, #8
 8001352:	4829      	ldr	r0, [pc, #164]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001354:	f001 fe6c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800135e:	4827      	ldr	r0, [pc, #156]	@ (80013fc <HAL_UART_RxCpltCallback+0x908>)
 8001360:	f001 fe66 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 8001364:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2228      	movs	r2, #40	@ 0x28
 800136a:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 800136c:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2228      	movs	r2, #40	@ 0x28
 8001372:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001374:	f001 b8b2 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x12){
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <HAL_UART_RxCpltCallback+0x900>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b12      	cmp	r3, #18
 800137e:	d141      	bne.n	8001404 <HAL_UART_RxCpltCallback+0x910>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001386:	481c      	ldr	r0, [pc, #112]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001388:	f001 fe52 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001392:	4819      	ldr	r0, [pc, #100]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 8001394:	f001 fe4c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2180      	movs	r1, #128	@ 0x80
 800139c:	4816      	ldr	r0, [pc, #88]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 800139e:	f001 fe47 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2140      	movs	r1, #64	@ 0x40
 80013a6:	4814      	ldr	r0, [pc, #80]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80013a8:	f001 fe42 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2101      	movs	r1, #1
 80013b0:	4811      	ldr	r0, [pc, #68]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80013b2:	f001 fe3d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2102      	movs	r1, #2
 80013ba:	480f      	ldr	r0, [pc, #60]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80013bc:	f001 fe38 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2104      	movs	r1, #4
 80013c4:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80013c6:	f001 fe33 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	2108      	movs	r1, #8
 80013ce:	480a      	ldr	r0, [pc, #40]	@ (80013f8 <HAL_UART_RxCpltCallback+0x904>)
 80013d0:	f001 fe2e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013da:	4808      	ldr	r0, [pc, #32]	@ (80013fc <HAL_UART_RxCpltCallback+0x908>)
 80013dc:	f001 fe28 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 80013e0:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	223c      	movs	r2, #60	@ 0x3c
 80013e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <HAL_UART_RxCpltCallback+0x90c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	223c      	movs	r2, #60	@ 0x3c
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013f0:	f001 b874 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
 80013f4:	200001d0 	.word	0x200001d0
 80013f8:	48000800 	.word	0x48000800
 80013fc:	48000400 	.word	0x48000400
 8001400:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x13){
 8001404:	4bb9      	ldr	r3, [pc, #740]	@ (80016ec <HAL_UART_RxCpltCallback+0xbf8>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b13      	cmp	r3, #19
 800140a:	d139      	bne.n	8001480 <HAL_UART_RxCpltCallback+0x98c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001412:	48b7      	ldr	r0, [pc, #732]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001414:	f001 fe0c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800141e:	48b4      	ldr	r0, [pc, #720]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001420:	f001 fe06 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2180      	movs	r1, #128	@ 0x80
 8001428:	48b1      	ldr	r0, [pc, #708]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800142a:	f001 fe01 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2140      	movs	r1, #64	@ 0x40
 8001432:	48af      	ldr	r0, [pc, #700]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001434:	f001 fdfc 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2101      	movs	r1, #1
 800143c:	48ac      	ldr	r0, [pc, #688]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800143e:	f001 fdf7 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2102      	movs	r1, #2
 8001446:	48aa      	ldr	r0, [pc, #680]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001448:	f001 fdf2 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2104      	movs	r1, #4
 8001450:	48a7      	ldr	r0, [pc, #668]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001452:	f001 fded 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	2108      	movs	r1, #8
 800145a:	48a5      	ldr	r0, [pc, #660]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800145c:	f001 fde8 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001466:	48a3      	ldr	r0, [pc, #652]	@ (80016f4 <HAL_UART_RxCpltCallback+0xc00>)
 8001468:	f001 fde2 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 800146c:	4ba2      	ldr	r3, [pc, #648]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2250      	movs	r2, #80	@ 0x50
 8001472:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 8001474:	4ba0      	ldr	r3, [pc, #640]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2250      	movs	r2, #80	@ 0x50
 800147a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800147c:	f001 b82e 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x14){
 8001480:	4b9a      	ldr	r3, [pc, #616]	@ (80016ec <HAL_UART_RxCpltCallback+0xbf8>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b14      	cmp	r3, #20
 8001486:	d139      	bne.n	80014fc <HAL_UART_RxCpltCallback+0xa08>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800148e:	4898      	ldr	r0, [pc, #608]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001490:	f001 fdce 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800149a:	4895      	ldr	r0, [pc, #596]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800149c:	f001 fdc8 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2180      	movs	r1, #128	@ 0x80
 80014a4:	4892      	ldr	r0, [pc, #584]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80014a6:	f001 fdc3 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2140      	movs	r1, #64	@ 0x40
 80014ae:	4890      	ldr	r0, [pc, #576]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80014b0:	f001 fdbe 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2101      	movs	r1, #1
 80014b8:	488d      	ldr	r0, [pc, #564]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80014ba:	f001 fdb9 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2102      	movs	r1, #2
 80014c2:	488b      	ldr	r0, [pc, #556]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80014c4:	f001 fdb4 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2104      	movs	r1, #4
 80014cc:	4888      	ldr	r0, [pc, #544]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80014ce:	f001 fdaf 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2108      	movs	r1, #8
 80014d6:	4886      	ldr	r0, [pc, #536]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80014d8:	f001 fdaa 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e2:	4884      	ldr	r0, [pc, #528]	@ (80016f4 <HAL_UART_RxCpltCallback+0xc00>)
 80014e4:	f001 fda4 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 80014e8:	4b83      	ldr	r3, [pc, #524]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2264      	movs	r2, #100	@ 0x64
 80014ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 80014f0:	4b81      	ldr	r3, [pc, #516]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2264      	movs	r2, #100	@ 0x64
 80014f6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014f8:	f000 bff0 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x15){
 80014fc:	4b7b      	ldr	r3, [pc, #492]	@ (80016ec <HAL_UART_RxCpltCallback+0xbf8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b15      	cmp	r3, #21
 8001502:	d139      	bne.n	8001578 <HAL_UART_RxCpltCallback+0xa84>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800150a:	4879      	ldr	r0, [pc, #484]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800150c:	f001 fd90 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001516:	4876      	ldr	r0, [pc, #472]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001518:	f001 fd8a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2180      	movs	r1, #128	@ 0x80
 8001520:	4873      	ldr	r0, [pc, #460]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001522:	f001 fd85 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2140      	movs	r1, #64	@ 0x40
 800152a:	4871      	ldr	r0, [pc, #452]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800152c:	f001 fd80 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2101      	movs	r1, #1
 8001534:	486e      	ldr	r0, [pc, #440]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001536:	f001 fd7b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2102      	movs	r1, #2
 800153e:	486c      	ldr	r0, [pc, #432]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001540:	f001 fd76 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8001544:	2201      	movs	r2, #1
 8001546:	2104      	movs	r1, #4
 8001548:	4869      	ldr	r0, [pc, #420]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800154a:	f001 fd71 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2108      	movs	r1, #8
 8001552:	4867      	ldr	r0, [pc, #412]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001554:	f001 fd6c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800155e:	4865      	ldr	r0, [pc, #404]	@ (80016f4 <HAL_UART_RxCpltCallback+0xc00>)
 8001560:	f001 fd66 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 8001564:	4b64      	ldr	r3, [pc, #400]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2214      	movs	r2, #20
 800156a:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 800156c:	4b62      	ldr	r3, [pc, #392]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2214      	movs	r2, #20
 8001572:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001574:	f000 bfb2 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x16){
 8001578:	4b5c      	ldr	r3, [pc, #368]	@ (80016ec <HAL_UART_RxCpltCallback+0xbf8>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b16      	cmp	r3, #22
 800157e:	d139      	bne.n	80015f4 <HAL_UART_RxCpltCallback+0xb00>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001586:	485a      	ldr	r0, [pc, #360]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001588:	f001 fd52 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001592:	4857      	ldr	r0, [pc, #348]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001594:	f001 fd4c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2180      	movs	r1, #128	@ 0x80
 800159c:	4854      	ldr	r0, [pc, #336]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800159e:	f001 fd47 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2140      	movs	r1, #64	@ 0x40
 80015a6:	4852      	ldr	r0, [pc, #328]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80015a8:	f001 fd42 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2101      	movs	r1, #1
 80015b0:	484f      	ldr	r0, [pc, #316]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80015b2:	f001 fd3d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2102      	movs	r1, #2
 80015ba:	484d      	ldr	r0, [pc, #308]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80015bc:	f001 fd38 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2104      	movs	r1, #4
 80015c4:	484a      	ldr	r0, [pc, #296]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80015c6:	f001 fd33 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2108      	movs	r1, #8
 80015ce:	4848      	ldr	r0, [pc, #288]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80015d0:	f001 fd2e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015da:	4846      	ldr	r0, [pc, #280]	@ (80016f4 <HAL_UART_RxCpltCallback+0xc00>)
 80015dc:	f001 fd28 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 80015e0:	4b45      	ldr	r3, [pc, #276]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2228      	movs	r2, #40	@ 0x28
 80015e6:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 80015e8:	4b43      	ldr	r3, [pc, #268]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2228      	movs	r2, #40	@ 0x28
 80015ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80015f0:	f000 bf74 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x17){
 80015f4:	4b3d      	ldr	r3, [pc, #244]	@ (80016ec <HAL_UART_RxCpltCallback+0xbf8>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b17      	cmp	r3, #23
 80015fa:	d139      	bne.n	8001670 <HAL_UART_RxCpltCallback+0xb7c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001602:	483b      	ldr	r0, [pc, #236]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001604:	f001 fd14 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800160e:	4838      	ldr	r0, [pc, #224]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001610:	f001 fd0e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2180      	movs	r1, #128	@ 0x80
 8001618:	4835      	ldr	r0, [pc, #212]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800161a:	f001 fd09 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2140      	movs	r1, #64	@ 0x40
 8001622:	4833      	ldr	r0, [pc, #204]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001624:	f001 fd04 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2101      	movs	r1, #1
 800162c:	4830      	ldr	r0, [pc, #192]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800162e:	f001 fcff 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2102      	movs	r1, #2
 8001636:	482e      	ldr	r0, [pc, #184]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001638:	f001 fcfa 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2104      	movs	r1, #4
 8001640:	482b      	ldr	r0, [pc, #172]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001642:	f001 fcf5 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2108      	movs	r1, #8
 800164a:	4829      	ldr	r0, [pc, #164]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800164c:	f001 fcf0 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001656:	4827      	ldr	r0, [pc, #156]	@ (80016f4 <HAL_UART_RxCpltCallback+0xc00>)
 8001658:	f001 fcea 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 800165c:	4b26      	ldr	r3, [pc, #152]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	223c      	movs	r2, #60	@ 0x3c
 8001662:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	223c      	movs	r2, #60	@ 0x3c
 800166a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800166c:	f000 bf36 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x18){
 8001670:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <HAL_UART_RxCpltCallback+0xbf8>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b18      	cmp	r3, #24
 8001676:	d141      	bne.n	80016fc <HAL_UART_RxCpltCallback+0xc08>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800167e:	481c      	ldr	r0, [pc, #112]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001680:	f001 fcd6 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800168a:	4819      	ldr	r0, [pc, #100]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 800168c:	f001 fcd0 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2180      	movs	r1, #128	@ 0x80
 8001694:	4816      	ldr	r0, [pc, #88]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 8001696:	f001 fccb 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	2140      	movs	r1, #64	@ 0x40
 800169e:	4814      	ldr	r0, [pc, #80]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80016a0:	f001 fcc6 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2101      	movs	r1, #1
 80016a8:	4811      	ldr	r0, [pc, #68]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80016aa:	f001 fcc1 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2102      	movs	r1, #2
 80016b2:	480f      	ldr	r0, [pc, #60]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80016b4:	f001 fcbc 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2104      	movs	r1, #4
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80016be:	f001 fcb7 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2108      	movs	r1, #8
 80016c6:	480a      	ldr	r0, [pc, #40]	@ (80016f0 <HAL_UART_RxCpltCallback+0xbfc>)
 80016c8:	f001 fcb2 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016d2:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <HAL_UART_RxCpltCallback+0xc00>)
 80016d4:	f001 fcac 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2250      	movs	r2, #80	@ 0x50
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 80016e0:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <HAL_UART_RxCpltCallback+0xc04>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2250      	movs	r2, #80	@ 0x50
 80016e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80016e8:	f000 bef8 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
 80016ec:	200001d0 	.word	0x200001d0
 80016f0:	48000800 	.word	0x48000800
 80016f4:	48000400 	.word	0x48000400
 80016f8:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x19){
 80016fc:	4bb9      	ldr	r3, [pc, #740]	@ (80019e4 <HAL_UART_RxCpltCallback+0xef0>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b19      	cmp	r3, #25
 8001702:	d139      	bne.n	8001778 <HAL_UART_RxCpltCallback+0xc84>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800170a:	48b7      	ldr	r0, [pc, #732]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 800170c:	f001 fc90 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001716:	48b4      	ldr	r0, [pc, #720]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001718:	f001 fc8a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2180      	movs	r1, #128	@ 0x80
 8001720:	48b1      	ldr	r0, [pc, #708]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001722:	f001 fc85 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	2140      	movs	r1, #64	@ 0x40
 800172a:	48af      	ldr	r0, [pc, #700]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 800172c:	f001 fc80 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2101      	movs	r1, #1
 8001734:	48ac      	ldr	r0, [pc, #688]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001736:	f001 fc7b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2102      	movs	r1, #2
 800173e:	48aa      	ldr	r0, [pc, #680]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001740:	f001 fc76 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	2104      	movs	r1, #4
 8001748:	48a7      	ldr	r0, [pc, #668]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 800174a:	f001 fc71 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2108      	movs	r1, #8
 8001752:	48a5      	ldr	r0, [pc, #660]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001754:	f001 fc6c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001758:	2201      	movs	r2, #1
 800175a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800175e:	48a3      	ldr	r0, [pc, #652]	@ (80019ec <HAL_UART_RxCpltCallback+0xef8>)
 8001760:	f001 fc66 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 8001764:	4ba2      	ldr	r3, [pc, #648]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2264      	movs	r2, #100	@ 0x64
 800176a:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 800176c:	4ba0      	ldr	r3, [pc, #640]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2264      	movs	r2, #100	@ 0x64
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001774:	f000 beb2 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x1A){
 8001778:	4b9a      	ldr	r3, [pc, #616]	@ (80019e4 <HAL_UART_RxCpltCallback+0xef0>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b1a      	cmp	r3, #26
 800177e:	d139      	bne.n	80017f4 <HAL_UART_RxCpltCallback+0xd00>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001786:	4898      	ldr	r0, [pc, #608]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001788:	f001 fc52 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001792:	4895      	ldr	r0, [pc, #596]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001794:	f001 fc4c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2180      	movs	r1, #128	@ 0x80
 800179c:	4892      	ldr	r0, [pc, #584]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 800179e:	f001 fc47 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2140      	movs	r1, #64	@ 0x40
 80017a6:	4890      	ldr	r0, [pc, #576]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80017a8:	f001 fc42 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2101      	movs	r1, #1
 80017b0:	488d      	ldr	r0, [pc, #564]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80017b2:	f001 fc3d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2102      	movs	r1, #2
 80017ba:	488b      	ldr	r0, [pc, #556]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80017bc:	f001 fc38 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2104      	movs	r1, #4
 80017c4:	4888      	ldr	r0, [pc, #544]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80017c6:	f001 fc33 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2108      	movs	r1, #8
 80017ce:	4886      	ldr	r0, [pc, #536]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80017d0:	f001 fc2e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017da:	4884      	ldr	r0, [pc, #528]	@ (80019ec <HAL_UART_RxCpltCallback+0xef8>)
 80017dc:	f001 fc28 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 80017e0:	4b83      	ldr	r3, [pc, #524]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2214      	movs	r2, #20
 80017e6:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 80017e8:	4b81      	ldr	r3, [pc, #516]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2214      	movs	r2, #20
 80017ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80017f0:	f000 be74 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x1B){
 80017f4:	4b7b      	ldr	r3, [pc, #492]	@ (80019e4 <HAL_UART_RxCpltCallback+0xef0>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b1b      	cmp	r3, #27
 80017fa:	d139      	bne.n	8001870 <HAL_UART_RxCpltCallback+0xd7c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001802:	4879      	ldr	r0, [pc, #484]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001804:	f001 fc14 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800180e:	4876      	ldr	r0, [pc, #472]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001810:	f001 fc0e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2180      	movs	r1, #128	@ 0x80
 8001818:	4873      	ldr	r0, [pc, #460]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 800181a:	f001 fc09 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2140      	movs	r1, #64	@ 0x40
 8001822:	4871      	ldr	r0, [pc, #452]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001824:	f001 fc04 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	2101      	movs	r1, #1
 800182c:	486e      	ldr	r0, [pc, #440]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 800182e:	f001 fbff 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	2102      	movs	r1, #2
 8001836:	486c      	ldr	r0, [pc, #432]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001838:	f001 fbfa 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2104      	movs	r1, #4
 8001840:	4869      	ldr	r0, [pc, #420]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001842:	f001 fbf5 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2108      	movs	r1, #8
 800184a:	4867      	ldr	r0, [pc, #412]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 800184c:	f001 fbf0 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001856:	4865      	ldr	r0, [pc, #404]	@ (80019ec <HAL_UART_RxCpltCallback+0xef8>)
 8001858:	f001 fbea 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 800185c:	4b64      	ldr	r3, [pc, #400]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2228      	movs	r2, #40	@ 0x28
 8001862:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 8001864:	4b62      	ldr	r3, [pc, #392]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2228      	movs	r2, #40	@ 0x28
 800186a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800186c:	f000 be36 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x1C){
 8001870:	4b5c      	ldr	r3, [pc, #368]	@ (80019e4 <HAL_UART_RxCpltCallback+0xef0>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b1c      	cmp	r3, #28
 8001876:	d139      	bne.n	80018ec <HAL_UART_RxCpltCallback+0xdf8>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800187e:	485a      	ldr	r0, [pc, #360]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001880:	f001 fbd6 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8001884:	2201      	movs	r2, #1
 8001886:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800188a:	4857      	ldr	r0, [pc, #348]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 800188c:	f001 fbd0 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2180      	movs	r1, #128	@ 0x80
 8001894:	4854      	ldr	r0, [pc, #336]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001896:	f001 fbcb 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2140      	movs	r1, #64	@ 0x40
 800189e:	4852      	ldr	r0, [pc, #328]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80018a0:	f001 fbc6 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2101      	movs	r1, #1
 80018a8:	484f      	ldr	r0, [pc, #316]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80018aa:	f001 fbc1 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2102      	movs	r1, #2
 80018b2:	484d      	ldr	r0, [pc, #308]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80018b4:	f001 fbbc 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2104      	movs	r1, #4
 80018bc:	484a      	ldr	r0, [pc, #296]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80018be:	f001 fbb7 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2108      	movs	r1, #8
 80018c6:	4848      	ldr	r0, [pc, #288]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80018c8:	f001 fbb2 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018d2:	4846      	ldr	r0, [pc, #280]	@ (80019ec <HAL_UART_RxCpltCallback+0xef8>)
 80018d4:	f001 fbac 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 80018d8:	4b45      	ldr	r3, [pc, #276]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	223c      	movs	r2, #60	@ 0x3c
 80018de:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 80018e0:	4b43      	ldr	r3, [pc, #268]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	223c      	movs	r2, #60	@ 0x3c
 80018e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80018e8:	f000 bdf8 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x1D){
 80018ec:	4b3d      	ldr	r3, [pc, #244]	@ (80019e4 <HAL_UART_RxCpltCallback+0xef0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b1d      	cmp	r3, #29
 80018f2:	d139      	bne.n	8001968 <HAL_UART_RxCpltCallback+0xe74>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018fa:	483b      	ldr	r0, [pc, #236]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80018fc:	f001 fb98 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001906:	4838      	ldr	r0, [pc, #224]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001908:	f001 fb92 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2180      	movs	r1, #128	@ 0x80
 8001910:	4835      	ldr	r0, [pc, #212]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001912:	f001 fb8d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2140      	movs	r1, #64	@ 0x40
 800191a:	4833      	ldr	r0, [pc, #204]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 800191c:	f001 fb88 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2101      	movs	r1, #1
 8001924:	4830      	ldr	r0, [pc, #192]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001926:	f001 fb83 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2102      	movs	r1, #2
 800192e:	482e      	ldr	r0, [pc, #184]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001930:	f001 fb7e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	2104      	movs	r1, #4
 8001938:	482b      	ldr	r0, [pc, #172]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 800193a:	f001 fb79 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	2108      	movs	r1, #8
 8001942:	4829      	ldr	r0, [pc, #164]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001944:	f001 fb74 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001948:	2201      	movs	r2, #1
 800194a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800194e:	4827      	ldr	r0, [pc, #156]	@ (80019ec <HAL_UART_RxCpltCallback+0xef8>)
 8001950:	f001 fb6e 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2250      	movs	r2, #80	@ 0x50
 800195a:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 800195c:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2250      	movs	r2, #80	@ 0x50
 8001962:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001964:	f000 bdba 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x1E){
 8001968:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <HAL_UART_RxCpltCallback+0xef0>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b1e      	cmp	r3, #30
 800196e:	d141      	bne.n	80019f4 <HAL_UART_RxCpltCallback+0xf00>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001976:	481c      	ldr	r0, [pc, #112]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001978:	f001 fb5a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001982:	4819      	ldr	r0, [pc, #100]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001984:	f001 fb54 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2180      	movs	r1, #128	@ 0x80
 800198c:	4816      	ldr	r0, [pc, #88]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 800198e:	f001 fb4f 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	2140      	movs	r1, #64	@ 0x40
 8001996:	4814      	ldr	r0, [pc, #80]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 8001998:	f001 fb4a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	2101      	movs	r1, #1
 80019a0:	4811      	ldr	r0, [pc, #68]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80019a2:	f001 fb45 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2102      	movs	r1, #2
 80019aa:	480f      	ldr	r0, [pc, #60]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80019ac:	f001 fb40 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2104      	movs	r1, #4
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80019b6:	f001 fb3b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	2108      	movs	r1, #8
 80019be:	480a      	ldr	r0, [pc, #40]	@ (80019e8 <HAL_UART_RxCpltCallback+0xef4>)
 80019c0:	f001 fb36 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ca:	4808      	ldr	r0, [pc, #32]	@ (80019ec <HAL_UART_RxCpltCallback+0xef8>)
 80019cc:	f001 fb30 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 80019d0:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2264      	movs	r2, #100	@ 0x64
 80019d6:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_UART_RxCpltCallback+0xefc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2264      	movs	r2, #100	@ 0x64
 80019de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80019e0:	f000 bd7c 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
 80019e4:	200001d0 	.word	0x200001d0
 80019e8:	48000800 	.word	0x48000800
 80019ec:	48000400 	.word	0x48000400
 80019f0:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x1F){
 80019f4:	4bb9      	ldr	r3, [pc, #740]	@ (8001cdc <HAL_UART_RxCpltCallback+0x11e8>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b1f      	cmp	r3, #31
 80019fa:	d139      	bne.n	8001a70 <HAL_UART_RxCpltCallback+0xf7c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a02:	48b7      	ldr	r0, [pc, #732]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a04:	f001 fb14 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a0e:	48b4      	ldr	r0, [pc, #720]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a10:	f001 fb0e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2180      	movs	r1, #128	@ 0x80
 8001a18:	48b1      	ldr	r0, [pc, #708]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a1a:	f001 fb09 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2140      	movs	r1, #64	@ 0x40
 8001a22:	48af      	ldr	r0, [pc, #700]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a24:	f001 fb04 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	48ac      	ldr	r0, [pc, #688]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a2e:	f001 faff 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2102      	movs	r1, #2
 8001a36:	48aa      	ldr	r0, [pc, #680]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a38:	f001 fafa 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2104      	movs	r1, #4
 8001a40:	48a7      	ldr	r0, [pc, #668]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a42:	f001 faf5 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2108      	movs	r1, #8
 8001a4a:	48a5      	ldr	r0, [pc, #660]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a4c:	f001 faf0 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a56:	48a3      	ldr	r0, [pc, #652]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x11f0>)
 8001a58:	f001 faea 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 8001a5c:	4ba2      	ldr	r3, [pc, #648]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2214      	movs	r2, #20
 8001a62:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 8001a64:	4ba0      	ldr	r3, [pc, #640]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2214      	movs	r2, #20
 8001a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001a6c:	f000 bd36 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x20){
 8001a70:	4b9a      	ldr	r3, [pc, #616]	@ (8001cdc <HAL_UART_RxCpltCallback+0x11e8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d139      	bne.n	8001aec <HAL_UART_RxCpltCallback+0xff8>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a7e:	4898      	ldr	r0, [pc, #608]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a80:	f001 fad6 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a8a:	4895      	ldr	r0, [pc, #596]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a8c:	f001 fad0 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2180      	movs	r1, #128	@ 0x80
 8001a94:	4892      	ldr	r0, [pc, #584]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001a96:	f001 facb 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2140      	movs	r1, #64	@ 0x40
 8001a9e:	4890      	ldr	r0, [pc, #576]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001aa0:	f001 fac6 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	488d      	ldr	r0, [pc, #564]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001aaa:	f001 fac1 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	488b      	ldr	r0, [pc, #556]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001ab4:	f001 fabc 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2104      	movs	r1, #4
 8001abc:	4888      	ldr	r0, [pc, #544]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001abe:	f001 fab7 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	4886      	ldr	r0, [pc, #536]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001ac8:	f001 fab2 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ad2:	4884      	ldr	r0, [pc, #528]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x11f0>)
 8001ad4:	f001 faac 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 8001ad8:	4b83      	ldr	r3, [pc, #524]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2228      	movs	r2, #40	@ 0x28
 8001ade:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 8001ae0:	4b81      	ldr	r3, [pc, #516]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2228      	movs	r2, #40	@ 0x28
 8001ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001ae8:	f000 bcf8 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x21){
 8001aec:	4b7b      	ldr	r3, [pc, #492]	@ (8001cdc <HAL_UART_RxCpltCallback+0x11e8>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b21      	cmp	r3, #33	@ 0x21
 8001af2:	d139      	bne.n	8001b68 <HAL_UART_RxCpltCallback+0x1074>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001afa:	4879      	ldr	r0, [pc, #484]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001afc:	f001 fa98 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b06:	4876      	ldr	r0, [pc, #472]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b08:	f001 fa92 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2180      	movs	r1, #128	@ 0x80
 8001b10:	4873      	ldr	r0, [pc, #460]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b12:	f001 fa8d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2140      	movs	r1, #64	@ 0x40
 8001b1a:	4871      	ldr	r0, [pc, #452]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b1c:	f001 fa88 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	2101      	movs	r1, #1
 8001b24:	486e      	ldr	r0, [pc, #440]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b26:	f001 fa83 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	486c      	ldr	r0, [pc, #432]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b30:	f001 fa7e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2104      	movs	r1, #4
 8001b38:	4869      	ldr	r0, [pc, #420]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b3a:	f001 fa79 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2108      	movs	r1, #8
 8001b42:	4867      	ldr	r0, [pc, #412]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b44:	f001 fa74 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b4e:	4865      	ldr	r0, [pc, #404]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x11f0>)
 8001b50:	f001 fa6e 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 8001b54:	4b64      	ldr	r3, [pc, #400]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	223c      	movs	r2, #60	@ 0x3c
 8001b5a:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 8001b5c:	4b62      	ldr	r3, [pc, #392]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	223c      	movs	r2, #60	@ 0x3c
 8001b62:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001b64:	f000 bcba 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x22){
 8001b68:	4b5c      	ldr	r3, [pc, #368]	@ (8001cdc <HAL_UART_RxCpltCallback+0x11e8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b22      	cmp	r3, #34	@ 0x22
 8001b6e:	d139      	bne.n	8001be4 <HAL_UART_RxCpltCallback+0x10f0>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b76:	485a      	ldr	r0, [pc, #360]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b78:	f001 fa5a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b82:	4857      	ldr	r0, [pc, #348]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b84:	f001 fa54 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2180      	movs	r1, #128	@ 0x80
 8001b8c:	4854      	ldr	r0, [pc, #336]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b8e:	f001 fa4f 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2140      	movs	r1, #64	@ 0x40
 8001b96:	4852      	ldr	r0, [pc, #328]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001b98:	f001 fa4a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	484f      	ldr	r0, [pc, #316]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001ba2:	f001 fa45 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2102      	movs	r1, #2
 8001baa:	484d      	ldr	r0, [pc, #308]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001bac:	f001 fa40 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	484a      	ldr	r0, [pc, #296]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001bb6:	f001 fa3b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2108      	movs	r1, #8
 8001bbe:	4848      	ldr	r0, [pc, #288]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001bc0:	f001 fa36 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bca:	4846      	ldr	r0, [pc, #280]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x11f0>)
 8001bcc:	f001 fa30 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 8001bd0:	4b45      	ldr	r3, [pc, #276]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2250      	movs	r2, #80	@ 0x50
 8001bd6:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 8001bd8:	4b43      	ldr	r3, [pc, #268]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2250      	movs	r2, #80	@ 0x50
 8001bde:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001be0:	f000 bc7c 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x23){
 8001be4:	4b3d      	ldr	r3, [pc, #244]	@ (8001cdc <HAL_UART_RxCpltCallback+0x11e8>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b23      	cmp	r3, #35	@ 0x23
 8001bea:	d139      	bne.n	8001c60 <HAL_UART_RxCpltCallback+0x116c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf2:	483b      	ldr	r0, [pc, #236]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001bf4:	f001 fa1c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bfe:	4838      	ldr	r0, [pc, #224]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c00:	f001 fa16 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	2180      	movs	r1, #128	@ 0x80
 8001c08:	4835      	ldr	r0, [pc, #212]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c0a:	f001 fa11 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2140      	movs	r1, #64	@ 0x40
 8001c12:	4833      	ldr	r0, [pc, #204]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c14:	f001 fa0c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4830      	ldr	r0, [pc, #192]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c1e:	f001 fa07 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2102      	movs	r1, #2
 8001c26:	482e      	ldr	r0, [pc, #184]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c28:	f001 fa02 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2104      	movs	r1, #4
 8001c30:	482b      	ldr	r0, [pc, #172]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c32:	f001 f9fd 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2108      	movs	r1, #8
 8001c3a:	4829      	ldr	r0, [pc, #164]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c3c:	f001 f9f8 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c40:	2201      	movs	r2, #1
 8001c42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c46:	4827      	ldr	r0, [pc, #156]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x11f0>)
 8001c48:	f001 f9f2 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8001c4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2264      	movs	r2, #100	@ 0x64
 8001c52:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 8001c54:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2264      	movs	r2, #100	@ 0x64
 8001c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001c5c:	f000 bc3e 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x24){
 8001c60:	4b1e      	ldr	r3, [pc, #120]	@ (8001cdc <HAL_UART_RxCpltCallback+0x11e8>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b24      	cmp	r3, #36	@ 0x24
 8001c66:	d141      	bne.n	8001cec <HAL_UART_RxCpltCallback+0x11f8>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c6e:	481c      	ldr	r0, [pc, #112]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c70:	f001 f9de 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c7a:	4819      	ldr	r0, [pc, #100]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c7c:	f001 f9d8 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2180      	movs	r1, #128	@ 0x80
 8001c84:	4816      	ldr	r0, [pc, #88]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c86:	f001 f9d3 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2140      	movs	r1, #64	@ 0x40
 8001c8e:	4814      	ldr	r0, [pc, #80]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c90:	f001 f9ce 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2101      	movs	r1, #1
 8001c98:	4811      	ldr	r0, [pc, #68]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001c9a:	f001 f9c9 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	480f      	ldr	r0, [pc, #60]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001ca4:	f001 f9c4 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2104      	movs	r1, #4
 8001cac:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001cae:	f001 f9bf 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2108      	movs	r1, #8
 8001cb6:	480a      	ldr	r0, [pc, #40]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x11ec>)
 8001cb8:	f001 f9ba 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cc2:	4808      	ldr	r0, [pc, #32]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x11f0>)
 8001cc4:	f001 f9b4 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 8001cc8:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2214      	movs	r2, #20
 8001cce:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x11f4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2214      	movs	r2, #20
 8001cd6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001cd8:	f000 bc00 	b.w	80024dc <HAL_UART_RxCpltCallback+0x19e8>
 8001cdc:	200001d0 	.word	0x200001d0
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	48000400 	.word	0x48000400
 8001ce8:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x25){
 8001cec:	4b9c      	ldr	r3, [pc, #624]	@ (8001f60 <HAL_UART_RxCpltCallback+0x146c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b25      	cmp	r3, #37	@ 0x25
 8001cf2:	d138      	bne.n	8001d66 <HAL_UART_RxCpltCallback+0x1272>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cfa:	489a      	ldr	r0, [pc, #616]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001cfc:	f001 f998 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d06:	4897      	ldr	r0, [pc, #604]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001d08:	f001 f992 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2180      	movs	r1, #128	@ 0x80
 8001d10:	4894      	ldr	r0, [pc, #592]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001d12:	f001 f98d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	2140      	movs	r1, #64	@ 0x40
 8001d1a:	4892      	ldr	r0, [pc, #584]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001d1c:	f001 f988 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2101      	movs	r1, #1
 8001d24:	488f      	ldr	r0, [pc, #572]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001d26:	f001 f983 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	488d      	ldr	r0, [pc, #564]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001d30:	f001 f97e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2104      	movs	r1, #4
 8001d38:	488a      	ldr	r0, [pc, #552]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001d3a:	f001 f979 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2108      	movs	r1, #8
 8001d42:	4888      	ldr	r0, [pc, #544]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001d44:	f001 f974 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d4e:	4886      	ldr	r0, [pc, #536]	@ (8001f68 <HAL_UART_RxCpltCallback+0x1474>)
 8001d50:	f001 f96e 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 8001d54:	4b85      	ldr	r3, [pc, #532]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2228      	movs	r2, #40	@ 0x28
 8001d5a:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 8001d5c:	4b83      	ldr	r3, [pc, #524]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2228      	movs	r2, #40	@ 0x28
 8001d62:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001d64:	e3ba      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x26){
 8001d66:	4b7e      	ldr	r3, [pc, #504]	@ (8001f60 <HAL_UART_RxCpltCallback+0x146c>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b26      	cmp	r3, #38	@ 0x26
 8001d6c:	d138      	bne.n	8001de0 <HAL_UART_RxCpltCallback+0x12ec>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d74:	487b      	ldr	r0, [pc, #492]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001d76:	f001 f95b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d80:	4878      	ldr	r0, [pc, #480]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001d82:	f001 f955 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2180      	movs	r1, #128	@ 0x80
 8001d8a:	4876      	ldr	r0, [pc, #472]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001d8c:	f001 f950 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	2140      	movs	r1, #64	@ 0x40
 8001d94:	4873      	ldr	r0, [pc, #460]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001d96:	f001 f94b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4871      	ldr	r0, [pc, #452]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001da0:	f001 f946 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001da4:	2201      	movs	r2, #1
 8001da6:	2102      	movs	r1, #2
 8001da8:	486e      	ldr	r0, [pc, #440]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001daa:	f001 f941 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2104      	movs	r1, #4
 8001db2:	486c      	ldr	r0, [pc, #432]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001db4:	f001 f93c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2108      	movs	r1, #8
 8001dbc:	4869      	ldr	r0, [pc, #420]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001dbe:	f001 f937 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dc8:	4867      	ldr	r0, [pc, #412]	@ (8001f68 <HAL_UART_RxCpltCallback+0x1474>)
 8001dca:	f001 f931 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 8001dce:	4b67      	ldr	r3, [pc, #412]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	223c      	movs	r2, #60	@ 0x3c
 8001dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 8001dd6:	4b65      	ldr	r3, [pc, #404]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	223c      	movs	r2, #60	@ 0x3c
 8001ddc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001dde:	e37d      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x27){
 8001de0:	4b5f      	ldr	r3, [pc, #380]	@ (8001f60 <HAL_UART_RxCpltCallback+0x146c>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b27      	cmp	r3, #39	@ 0x27
 8001de6:	d138      	bne.n	8001e5a <HAL_UART_RxCpltCallback+0x1366>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dee:	485d      	ldr	r0, [pc, #372]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001df0:	f001 f91e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dfa:	485a      	ldr	r0, [pc, #360]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001dfc:	f001 f918 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2180      	movs	r1, #128	@ 0x80
 8001e04:	4857      	ldr	r0, [pc, #348]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e06:	f001 f913 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2140      	movs	r1, #64	@ 0x40
 8001e0e:	4855      	ldr	r0, [pc, #340]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e10:	f001 f90e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2101      	movs	r1, #1
 8001e18:	4852      	ldr	r0, [pc, #328]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e1a:	f001 f909 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2102      	movs	r1, #2
 8001e22:	4850      	ldr	r0, [pc, #320]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e24:	f001 f904 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	484d      	ldr	r0, [pc, #308]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e2e:	f001 f8ff 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2108      	movs	r1, #8
 8001e36:	484b      	ldr	r0, [pc, #300]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e38:	f001 f8fa 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e42:	4849      	ldr	r0, [pc, #292]	@ (8001f68 <HAL_UART_RxCpltCallback+0x1474>)
 8001e44:	f001 f8f4 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 8001e48:	4b48      	ldr	r3, [pc, #288]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2250      	movs	r2, #80	@ 0x50
 8001e4e:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 8001e50:	4b46      	ldr	r3, [pc, #280]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2250      	movs	r2, #80	@ 0x50
 8001e56:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001e58:	e340      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x28){
 8001e5a:	4b41      	ldr	r3, [pc, #260]	@ (8001f60 <HAL_UART_RxCpltCallback+0x146c>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b28      	cmp	r3, #40	@ 0x28
 8001e60:	d138      	bne.n	8001ed4 <HAL_UART_RxCpltCallback+0x13e0>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e68:	483e      	ldr	r0, [pc, #248]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e6a:	f001 f8e1 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e74:	483b      	ldr	r0, [pc, #236]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e76:	f001 f8db 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2180      	movs	r1, #128	@ 0x80
 8001e7e:	4839      	ldr	r0, [pc, #228]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e80:	f001 f8d6 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8001e84:	2201      	movs	r2, #1
 8001e86:	2140      	movs	r1, #64	@ 0x40
 8001e88:	4836      	ldr	r0, [pc, #216]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e8a:	f001 f8d1 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2101      	movs	r1, #1
 8001e92:	4834      	ldr	r0, [pc, #208]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e94:	f001 f8cc 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	4831      	ldr	r0, [pc, #196]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001e9e:	f001 f8c7 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	482f      	ldr	r0, [pc, #188]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001ea8:	f001 f8c2 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2108      	movs	r1, #8
 8001eb0:	482c      	ldr	r0, [pc, #176]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001eb2:	f001 f8bd 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ebc:	482a      	ldr	r0, [pc, #168]	@ (8001f68 <HAL_UART_RxCpltCallback+0x1474>)
 8001ebe:	f001 f8b7 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2264      	movs	r2, #100	@ 0x64
 8001ec8:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 8001eca:	4b28      	ldr	r3, [pc, #160]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2264      	movs	r2, #100	@ 0x64
 8001ed0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001ed2:	e303      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x29){
 8001ed4:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <HAL_UART_RxCpltCallback+0x146c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b29      	cmp	r3, #41	@ 0x29
 8001eda:	d149      	bne.n	8001f70 <HAL_UART_RxCpltCallback+0x147c>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ee2:	4820      	ldr	r0, [pc, #128]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001ee4:	f001 f8a4 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eee:	481d      	ldr	r0, [pc, #116]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001ef0:	f001 f89e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2180      	movs	r1, #128	@ 0x80
 8001ef8:	481a      	ldr	r0, [pc, #104]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001efa:	f001 f899 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2140      	movs	r1, #64	@ 0x40
 8001f02:	4818      	ldr	r0, [pc, #96]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001f04:	f001 f894 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4815      	ldr	r0, [pc, #84]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001f0e:	f001 f88f 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2102      	movs	r1, #2
 8001f16:	4813      	ldr	r0, [pc, #76]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001f18:	f001 f88a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	2104      	movs	r1, #4
 8001f20:	4810      	ldr	r0, [pc, #64]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001f22:	f001 f885 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2108      	movs	r1, #8
 8001f2a:	480e      	ldr	r0, [pc, #56]	@ (8001f64 <HAL_UART_RxCpltCallback+0x1470>)
 8001f2c:	f001 f880 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f36:	480c      	ldr	r0, [pc, #48]	@ (8001f68 <HAL_UART_RxCpltCallback+0x1474>)
 8001f38:	f001 f87a 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2214      	movs	r2, #20
 8001f42:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2214      	movs	r2, #20
 8001f4a:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2214      	movs	r2, #20
 8001f52:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <HAL_UART_RxCpltCallback+0x1478>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2214      	movs	r2, #20
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001f5c:	e2be      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
 8001f5e:	bf00      	nop
 8001f60:	200001d0 	.word	0x200001d0
 8001f64:	48000800 	.word	0x48000800
 8001f68:	48000400 	.word	0x48000400
 8001f6c:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x2A){
 8001f70:	4bac      	ldr	r3, [pc, #688]	@ (8002224 <HAL_UART_RxCpltCallback+0x1730>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f76:	d140      	bne.n	8001ffa <HAL_UART_RxCpltCallback+0x1506>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f7e:	48aa      	ldr	r0, [pc, #680]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8001f80:	f001 f856 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f8a:	48a7      	ldr	r0, [pc, #668]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8001f8c:	f001 f850 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 8001f90:	2201      	movs	r2, #1
 8001f92:	2180      	movs	r1, #128	@ 0x80
 8001f94:	48a4      	ldr	r0, [pc, #656]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8001f96:	f001 f84b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2140      	movs	r1, #64	@ 0x40
 8001f9e:	48a2      	ldr	r0, [pc, #648]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8001fa0:	f001 f846 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	489f      	ldr	r0, [pc, #636]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8001faa:	f001 f841 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	489d      	ldr	r0, [pc, #628]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8001fb4:	f001 f83c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	2104      	movs	r1, #4
 8001fbc:	489a      	ldr	r0, [pc, #616]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8001fbe:	f001 f837 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2108      	movs	r1, #8
 8001fc6:	4898      	ldr	r0, [pc, #608]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8001fc8:	f001 f832 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fd2:	4896      	ldr	r0, [pc, #600]	@ (800222c <HAL_UART_RxCpltCallback+0x1738>)
 8001fd4:	f001 f82c 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 8001fd8:	4b95      	ldr	r3, [pc, #596]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2228      	movs	r2, #40	@ 0x28
 8001fde:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 8001fe0:	4b93      	ldr	r3, [pc, #588]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2228      	movs	r2, #40	@ 0x28
 8001fe6:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 8001fe8:	4b91      	ldr	r3, [pc, #580]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2228      	movs	r2, #40	@ 0x28
 8001fee:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 8001ff0:	4b8f      	ldr	r3, [pc, #572]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2228      	movs	r2, #40	@ 0x28
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001ff8:	e270      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x2B){
 8001ffa:	4b8a      	ldr	r3, [pc, #552]	@ (8002224 <HAL_UART_RxCpltCallback+0x1730>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b2b      	cmp	r3, #43	@ 0x2b
 8002000:	d140      	bne.n	8002084 <HAL_UART_RxCpltCallback+0x1590>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002008:	4887      	ldr	r0, [pc, #540]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 800200a:	f001 f811 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002014:	4884      	ldr	r0, [pc, #528]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8002016:	f001 f80b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 800201a:	2201      	movs	r2, #1
 800201c:	2180      	movs	r1, #128	@ 0x80
 800201e:	4882      	ldr	r0, [pc, #520]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8002020:	f001 f806 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8002024:	2200      	movs	r2, #0
 8002026:	2140      	movs	r1, #64	@ 0x40
 8002028:	487f      	ldr	r0, [pc, #508]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 800202a:	f001 f801 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	2101      	movs	r1, #1
 8002032:	487d      	ldr	r0, [pc, #500]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8002034:	f000 fffc 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	2102      	movs	r1, #2
 800203c:	487a      	ldr	r0, [pc, #488]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 800203e:	f000 fff7 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	2104      	movs	r1, #4
 8002046:	4878      	ldr	r0, [pc, #480]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8002048:	f000 fff2 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	2108      	movs	r1, #8
 8002050:	4875      	ldr	r0, [pc, #468]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8002052:	f000 ffed 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800205c:	4873      	ldr	r0, [pc, #460]	@ (800222c <HAL_UART_RxCpltCallback+0x1738>)
 800205e:	f000 ffe7 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 8002062:	4b73      	ldr	r3, [pc, #460]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	223c      	movs	r2, #60	@ 0x3c
 8002068:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 800206a:	4b71      	ldr	r3, [pc, #452]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	223c      	movs	r2, #60	@ 0x3c
 8002070:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 8002072:	4b6f      	ldr	r3, [pc, #444]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	223c      	movs	r2, #60	@ 0x3c
 8002078:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 800207a:	4b6d      	ldr	r3, [pc, #436]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	223c      	movs	r2, #60	@ 0x3c
 8002080:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002082:	e22b      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x2C){
 8002084:	4b67      	ldr	r3, [pc, #412]	@ (8002224 <HAL_UART_RxCpltCallback+0x1730>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b2c      	cmp	r3, #44	@ 0x2c
 800208a:	d140      	bne.n	800210e <HAL_UART_RxCpltCallback+0x161a>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002092:	4865      	ldr	r0, [pc, #404]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8002094:	f000 ffcc 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800209e:	4862      	ldr	r0, [pc, #392]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80020a0:	f000 ffc6 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	2180      	movs	r1, #128	@ 0x80
 80020a8:	485f      	ldr	r0, [pc, #380]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80020aa:	f000 ffc1 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2140      	movs	r1, #64	@ 0x40
 80020b2:	485d      	ldr	r0, [pc, #372]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80020b4:	f000 ffbc 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 80020b8:	2201      	movs	r2, #1
 80020ba:	2101      	movs	r1, #1
 80020bc:	485a      	ldr	r0, [pc, #360]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80020be:	f000 ffb7 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2102      	movs	r1, #2
 80020c6:	4858      	ldr	r0, [pc, #352]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80020c8:	f000 ffb2 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 80020cc:	2201      	movs	r2, #1
 80020ce:	2104      	movs	r1, #4
 80020d0:	4855      	ldr	r0, [pc, #340]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80020d2:	f000 ffad 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2108      	movs	r1, #8
 80020da:	4853      	ldr	r0, [pc, #332]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80020dc:	f000 ffa8 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020e6:	4851      	ldr	r0, [pc, #324]	@ (800222c <HAL_UART_RxCpltCallback+0x1738>)
 80020e8:	f000 ffa2 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 80020ec:	4b50      	ldr	r3, [pc, #320]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2250      	movs	r2, #80	@ 0x50
 80020f2:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 80020f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2250      	movs	r2, #80	@ 0x50
 80020fa:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 80020fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2250      	movs	r2, #80	@ 0x50
 8002102:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 8002104:	4b4a      	ldr	r3, [pc, #296]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2250      	movs	r2, #80	@ 0x50
 800210a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800210c:	e1e6      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x2D){
 800210e:	4b45      	ldr	r3, [pc, #276]	@ (8002224 <HAL_UART_RxCpltCallback+0x1730>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b2d      	cmp	r3, #45	@ 0x2d
 8002114:	d140      	bne.n	8002198 <HAL_UART_RxCpltCallback+0x16a4>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_SET);
 8002116:	2201      	movs	r2, #1
 8002118:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800211c:	4842      	ldr	r0, [pc, #264]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 800211e:	f000 ff87 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002128:	483f      	ldr	r0, [pc, #252]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 800212a:	f000 ff81 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_SET);
 800212e:	2201      	movs	r2, #1
 8002130:	2180      	movs	r1, #128	@ 0x80
 8002132:	483d      	ldr	r0, [pc, #244]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8002134:	f000 ff7c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	2140      	movs	r1, #64	@ 0x40
 800213c:	483a      	ldr	r0, [pc, #232]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 800213e:	f000 ff77 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_SET);
 8002142:	2201      	movs	r2, #1
 8002144:	2101      	movs	r1, #1
 8002146:	4838      	ldr	r0, [pc, #224]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8002148:	f000 ff72 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	2102      	movs	r1, #2
 8002150:	4835      	ldr	r0, [pc, #212]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8002152:	f000 ff6d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_SET);
 8002156:	2201      	movs	r2, #1
 8002158:	2104      	movs	r1, #4
 800215a:	4833      	ldr	r0, [pc, #204]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 800215c:	f000 ff68 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 8002160:	2200      	movs	r2, #0
 8002162:	2108      	movs	r1, #8
 8002164:	4830      	ldr	r0, [pc, #192]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 8002166:	f000 ff63 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002170:	482e      	ldr	r0, [pc, #184]	@ (800222c <HAL_UART_RxCpltCallback+0x1738>)
 8002172:	f000 ff5d 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 8002176:	4b2e      	ldr	r3, [pc, #184]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2264      	movs	r2, #100	@ 0x64
 800217c:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 800217e:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2264      	movs	r2, #100	@ 0x64
 8002184:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 8002186:	4b2a      	ldr	r3, [pc, #168]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2264      	movs	r2, #100	@ 0x64
 800218c:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 800218e:	4b28      	ldr	r3, [pc, #160]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2264      	movs	r2, #100	@ 0x64
 8002194:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002196:	e1a1      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x2E){
 8002198:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <HAL_UART_RxCpltCallback+0x1730>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b2e      	cmp	r3, #46	@ 0x2e
 800219e:	d149      	bne.n	8002234 <HAL_UART_RxCpltCallback+0x1740>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021a6:	4820      	ldr	r0, [pc, #128]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80021a8:	f000 ff42 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021b2:	481d      	ldr	r0, [pc, #116]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80021b4:	f000 ff3c 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2180      	movs	r1, #128	@ 0x80
 80021bc:	481a      	ldr	r0, [pc, #104]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80021be:	f000 ff37 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 80021c2:	2201      	movs	r2, #1
 80021c4:	2140      	movs	r1, #64	@ 0x40
 80021c6:	4818      	ldr	r0, [pc, #96]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80021c8:	f000 ff32 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2101      	movs	r1, #1
 80021d0:	4815      	ldr	r0, [pc, #84]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80021d2:	f000 ff2d 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 80021d6:	2201      	movs	r2, #1
 80021d8:	2102      	movs	r1, #2
 80021da:	4813      	ldr	r0, [pc, #76]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80021dc:	f000 ff28 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2104      	movs	r1, #4
 80021e4:	4810      	ldr	r0, [pc, #64]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80021e6:	f000 ff23 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	2108      	movs	r1, #8
 80021ee:	480e      	ldr	r0, [pc, #56]	@ (8002228 <HAL_UART_RxCpltCallback+0x1734>)
 80021f0:	f000 ff1e 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80021f4:	2201      	movs	r2, #1
 80021f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021fa:	480c      	ldr	r0, [pc, #48]	@ (800222c <HAL_UART_RxCpltCallback+0x1738>)
 80021fc:	f000 ff18 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 20);
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2214      	movs	r2, #20
 8002206:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 20);
 8002208:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2214      	movs	r2, #20
 800220e:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 20);
 8002210:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2214      	movs	r2, #20
 8002216:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 20);
 8002218:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <HAL_UART_RxCpltCallback+0x173c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2214      	movs	r2, #20
 800221e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002220:	e15c      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
 8002222:	bf00      	nop
 8002224:	200001d0 	.word	0x200001d0
 8002228:	48000800 	.word	0x48000800
 800222c:	48000400 	.word	0x48000400
 8002230:	20000028 	.word	0x20000028
	  else if (rx_byte == 0x2F){
 8002234:	4bab      	ldr	r3, [pc, #684]	@ (80024e4 <HAL_UART_RxCpltCallback+0x19f0>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b2f      	cmp	r3, #47	@ 0x2f
 800223a:	d140      	bne.n	80022be <HAL_UART_RxCpltCallback+0x17ca>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002242:	48a9      	ldr	r0, [pc, #676]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002244:	f000 fef4 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 8002248:	2201      	movs	r2, #1
 800224a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800224e:	48a6      	ldr	r0, [pc, #664]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002250:	f000 feee 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8002254:	2200      	movs	r2, #0
 8002256:	2180      	movs	r1, #128	@ 0x80
 8002258:	48a3      	ldr	r0, [pc, #652]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 800225a:	f000 fee9 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 800225e:	2201      	movs	r2, #1
 8002260:	2140      	movs	r1, #64	@ 0x40
 8002262:	48a1      	ldr	r0, [pc, #644]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002264:	f000 fee4 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	2101      	movs	r1, #1
 800226c:	489e      	ldr	r0, [pc, #632]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 800226e:	f000 fedf 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	2102      	movs	r1, #2
 8002276:	489c      	ldr	r0, [pc, #624]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002278:	f000 feda 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 800227c:	2200      	movs	r2, #0
 800227e:	2104      	movs	r1, #4
 8002280:	4899      	ldr	r0, [pc, #612]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002282:	f000 fed5 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 8002286:	2201      	movs	r2, #1
 8002288:	2108      	movs	r1, #8
 800228a:	4897      	ldr	r0, [pc, #604]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 800228c:	f000 fed0 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002290:	2201      	movs	r2, #1
 8002292:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002296:	4895      	ldr	r0, [pc, #596]	@ (80024ec <HAL_UART_RxCpltCallback+0x19f8>)
 8002298:	f000 feca 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 40);
 800229c:	4b94      	ldr	r3, [pc, #592]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2228      	movs	r2, #40	@ 0x28
 80022a2:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 40);
 80022a4:	4b92      	ldr	r3, [pc, #584]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2228      	movs	r2, #40	@ 0x28
 80022aa:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 40);
 80022ac:	4b90      	ldr	r3, [pc, #576]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2228      	movs	r2, #40	@ 0x28
 80022b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 40);
 80022b4:	4b8e      	ldr	r3, [pc, #568]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2228      	movs	r2, #40	@ 0x28
 80022ba:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80022bc:	e10e      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x30){
 80022be:	4b89      	ldr	r3, [pc, #548]	@ (80024e4 <HAL_UART_RxCpltCallback+0x19f0>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b30      	cmp	r3, #48	@ 0x30
 80022c4:	d140      	bne.n	8002348 <HAL_UART_RxCpltCallback+0x1854>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022cc:	4886      	ldr	r0, [pc, #536]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 80022ce:	f000 feaf 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022d8:	4883      	ldr	r0, [pc, #524]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 80022da:	f000 fea9 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	2180      	movs	r1, #128	@ 0x80
 80022e2:	4881      	ldr	r0, [pc, #516]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 80022e4:	f000 fea4 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 80022e8:	2201      	movs	r2, #1
 80022ea:	2140      	movs	r1, #64	@ 0x40
 80022ec:	487e      	ldr	r0, [pc, #504]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 80022ee:	f000 fe9f 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2101      	movs	r1, #1
 80022f6:	487c      	ldr	r0, [pc, #496]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 80022f8:	f000 fe9a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 80022fc:	2201      	movs	r2, #1
 80022fe:	2102      	movs	r1, #2
 8002300:	4879      	ldr	r0, [pc, #484]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002302:	f000 fe95 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	2104      	movs	r1, #4
 800230a:	4877      	ldr	r0, [pc, #476]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 800230c:	f000 fe90 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 8002310:	2201      	movs	r2, #1
 8002312:	2108      	movs	r1, #8
 8002314:	4874      	ldr	r0, [pc, #464]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002316:	f000 fe8b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800231a:	2201      	movs	r2, #1
 800231c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002320:	4872      	ldr	r0, [pc, #456]	@ (80024ec <HAL_UART_RxCpltCallback+0x19f8>)
 8002322:	f000 fe85 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 60);
 8002326:	4b72      	ldr	r3, [pc, #456]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	223c      	movs	r2, #60	@ 0x3c
 800232c:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 60);
 800232e:	4b70      	ldr	r3, [pc, #448]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	223c      	movs	r2, #60	@ 0x3c
 8002334:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 60);
 8002336:	4b6e      	ldr	r3, [pc, #440]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	223c      	movs	r2, #60	@ 0x3c
 800233c:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 60);
 800233e:	4b6c      	ldr	r3, [pc, #432]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	223c      	movs	r2, #60	@ 0x3c
 8002344:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002346:	e0c9      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x31){
 8002348:	4b66      	ldr	r3, [pc, #408]	@ (80024e4 <HAL_UART_RxCpltCallback+0x19f0>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b31      	cmp	r3, #49	@ 0x31
 800234e:	d140      	bne.n	80023d2 <HAL_UART_RxCpltCallback+0x18de>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002356:	4864      	ldr	r0, [pc, #400]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002358:	f000 fe6a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 800235c:	2201      	movs	r2, #1
 800235e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002362:	4861      	ldr	r0, [pc, #388]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002364:	f000 fe64 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8002368:	2200      	movs	r2, #0
 800236a:	2180      	movs	r1, #128	@ 0x80
 800236c:	485e      	ldr	r0, [pc, #376]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 800236e:	f000 fe5f 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 8002372:	2201      	movs	r2, #1
 8002374:	2140      	movs	r1, #64	@ 0x40
 8002376:	485c      	ldr	r0, [pc, #368]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002378:	f000 fe5a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	2101      	movs	r1, #1
 8002380:	4859      	ldr	r0, [pc, #356]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002382:	f000 fe55 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8002386:	2201      	movs	r2, #1
 8002388:	2102      	movs	r1, #2
 800238a:	4857      	ldr	r0, [pc, #348]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 800238c:	f000 fe50 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 8002390:	2200      	movs	r2, #0
 8002392:	2104      	movs	r1, #4
 8002394:	4854      	ldr	r0, [pc, #336]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002396:	f000 fe4b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	2108      	movs	r1, #8
 800239e:	4852      	ldr	r0, [pc, #328]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 80023a0:	f000 fe46 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023aa:	4850      	ldr	r0, [pc, #320]	@ (80024ec <HAL_UART_RxCpltCallback+0x19f8>)
 80023ac:	f000 fe40 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 80023b0:	4b4f      	ldr	r3, [pc, #316]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2250      	movs	r2, #80	@ 0x50
 80023b6:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80);
 80023b8:	4b4d      	ldr	r3, [pc, #308]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2250      	movs	r2, #80	@ 0x50
 80023be:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 80);
 80023c0:	4b4b      	ldr	r3, [pc, #300]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2250      	movs	r2, #80	@ 0x50
 80023c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 80);
 80023c8:	4b49      	ldr	r3, [pc, #292]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2250      	movs	r2, #80	@ 0x50
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80023d0:	e084      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
	  else if (rx_byte == 0x32){
 80023d2:	4b44      	ldr	r3, [pc, #272]	@ (80024e4 <HAL_UART_RxCpltCallback+0x19f0>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b32      	cmp	r3, #50	@ 0x32
 80023d8:	d140      	bne.n	800245c <HAL_UART_RxCpltCallback+0x1968>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023e0:	4841      	ldr	r0, [pc, #260]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 80023e2:	f000 fe25 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_SET);
 80023e6:	2201      	movs	r2, #1
 80023e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023ec:	483e      	ldr	r0, [pc, #248]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 80023ee:	f000 fe1f 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	483c      	ldr	r0, [pc, #240]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 80023f8:	f000 fe1a 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_SET);
 80023fc:	2201      	movs	r2, #1
 80023fe:	2140      	movs	r1, #64	@ 0x40
 8002400:	4839      	ldr	r0, [pc, #228]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002402:	f000 fe15 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	2101      	movs	r1, #1
 800240a:	4837      	ldr	r0, [pc, #220]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 800240c:	f000 fe10 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_SET);
 8002410:	2201      	movs	r2, #1
 8002412:	2102      	movs	r1, #2
 8002414:	4834      	ldr	r0, [pc, #208]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002416:	f000 fe0b 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	2104      	movs	r1, #4
 800241e:	4832      	ldr	r0, [pc, #200]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002420:	f000 fe06 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_SET);
 8002424:	2201      	movs	r2, #1
 8002426:	2108      	movs	r1, #8
 8002428:	482f      	ldr	r0, [pc, #188]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 800242a:	f000 fe01 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800242e:	2201      	movs	r2, #1
 8002430:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002434:	482d      	ldr	r0, [pc, #180]	@ (80024ec <HAL_UART_RxCpltCallback+0x19f8>)
 8002436:	f000 fdfb 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);
 800243a:	4b2d      	ldr	r3, [pc, #180]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2264      	movs	r2, #100	@ 0x64
 8002440:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8002442:	4b2b      	ldr	r3, [pc, #172]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2264      	movs	r2, #100	@ 0x64
 8002448:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 800244a:	4b29      	ldr	r3, [pc, #164]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2264      	movs	r2, #100	@ 0x64
 8002450:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8002452:	4b27      	ldr	r3, [pc, #156]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2264      	movs	r2, #100	@ 0x64
 8002458:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800245a:	e03f      	b.n	80024dc <HAL_UART_RxCpltCallback+0x19e8>
    	  HAL_GPIO_WritePin(IN1_1_GPIO_Port, IN1_1_Pin, GPIO_PIN_RESET);
 800245c:	2200      	movs	r2, #0
 800245e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002462:	4821      	ldr	r0, [pc, #132]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002464:	f000 fde4 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(IN2_1_GPIO_Port, IN2_1_Pin, GPIO_PIN_RESET);
 8002468:	2200      	movs	r2, #0
 800246a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800246e:	481e      	ldr	r0, [pc, #120]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002470:	f000 fdde 	bl	8003030 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN3_1_GPIO_Port, IN3_1_Pin, GPIO_PIN_RESET);
 8002474:	2200      	movs	r2, #0
 8002476:	2180      	movs	r1, #128	@ 0x80
 8002478:	481b      	ldr	r0, [pc, #108]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 800247a:	f000 fdd9 	bl	8003030 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN4_1_GPIO_Port, IN4_1_Pin, GPIO_PIN_RESET);
 800247e:	2200      	movs	r2, #0
 8002480:	2140      	movs	r1, #64	@ 0x40
 8002482:	4819      	ldr	r0, [pc, #100]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002484:	f000 fdd4 	bl	8003030 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN1_2_GPIO_Port, IN1_2_Pin, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	2101      	movs	r1, #1
 800248c:	4816      	ldr	r0, [pc, #88]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 800248e:	f000 fdcf 	bl	8003030 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN2_2_GPIO_Port, IN2_2_Pin, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	2102      	movs	r1, #2
 8002496:	4814      	ldr	r0, [pc, #80]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 8002498:	f000 fdca 	bl	8003030 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN3_2_GPIO_Port, IN3_2_Pin, GPIO_PIN_RESET);
 800249c:	2200      	movs	r2, #0
 800249e:	2104      	movs	r1, #4
 80024a0:	4811      	ldr	r0, [pc, #68]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 80024a2:	f000 fdc5 	bl	8003030 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(IN4_2_GPIO_Port, IN4_2_Pin, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2108      	movs	r1, #8
 80024aa:	480f      	ldr	r0, [pc, #60]	@ (80024e8 <HAL_UART_RxCpltCallback+0x19f4>)
 80024ac:	f000 fdc0 	bl	8003030 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024b6:	480d      	ldr	r0, [pc, #52]	@ (80024ec <HAL_UART_RxCpltCallback+0x19f8>)
 80024b8:	f000 fdba 	bl	8003030 <HAL_GPIO_WritePin>
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80024bc:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2200      	movs	r2, #0
 80024c2:	635a      	str	r2, [r3, #52]	@ 0x34
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80024c4:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2200      	movs	r2, #0
 80024ca:	639a      	str	r2, [r3, #56]	@ 0x38
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80024cc:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2200      	movs	r2, #0
 80024d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80024d4:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_UART_RxCpltCallback+0x19fc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200001d0 	.word	0x200001d0
 80024e8:	48000800 	.word	0x48000800
 80024ec:	48000400 	.word	0x48000400
 80024f0:	20000028 	.word	0x20000028

080024f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f8:	b672      	cpsid	i
}
 80024fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <Error_Handler+0x8>

08002500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002506:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <HAL_MspInit+0x44>)
 8002508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250a:	4a0e      	ldr	r2, [pc, #56]	@ (8002544 <HAL_MspInit+0x44>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6613      	str	r3, [r2, #96]	@ 0x60
 8002512:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <HAL_MspInit+0x44>)
 8002514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <HAL_MspInit+0x44>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	4a08      	ldr	r2, [pc, #32]	@ (8002544 <HAL_MspInit+0x44>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002528:	6593      	str	r3, [r2, #88]	@ 0x58
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_MspInit+0x44>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000

08002548 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a13      	ldr	r2, [pc, #76]	@ (80025a4 <HAL_TIM_Base_MspInit+0x5c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10c      	bne.n	8002574 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800255a:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <HAL_TIM_Base_MspInit+0x60>)
 800255c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255e:	4a12      	ldr	r2, [pc, #72]	@ (80025a8 <HAL_TIM_Base_MspInit+0x60>)
 8002560:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002564:	6613      	str	r3, [r2, #96]	@ 0x60
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_TIM_Base_MspInit+0x60>)
 8002568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002572:	e010      	b.n	8002596 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257c:	d10b      	bne.n	8002596 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_TIM_Base_MspInit+0x60>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	4a09      	ldr	r2, [pc, #36]	@ (80025a8 <HAL_TIM_Base_MspInit+0x60>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6593      	str	r3, [r2, #88]	@ 0x58
 800258a:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <HAL_TIM_Base_MspInit+0x60>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40012c00 	.word	0x40012c00
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	@ 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a32      	ldr	r2, [pc, #200]	@ (8002694 <HAL_TIM_MspPostInit+0xe8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d11e      	bne.n	800260c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ce:	4b32      	ldr	r3, [pc, #200]	@ (8002698 <HAL_TIM_MspPostInit+0xec>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d2:	4a31      	ldr	r2, [pc, #196]	@ (8002698 <HAL_TIM_MspPostInit+0xec>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025da:	4b2f      	ldr	r3, [pc, #188]	@ (8002698 <HAL_TIM_MspPostInit+0xec>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80025e6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80025ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025f8:	2301      	movs	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002606:	f000 fb99 	bl	8002d3c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800260a:	e03f      	b.n	800268c <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002614:	d13a      	bne.n	800268c <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_TIM_MspPostInit+0xec>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261a:	4a1f      	ldr	r2, [pc, #124]	@ (8002698 <HAL_TIM_MspPostInit+0xec>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002622:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <HAL_TIM_MspPostInit+0xec>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	4b1a      	ldr	r3, [pc, #104]	@ (8002698 <HAL_TIM_MspPostInit+0xec>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002632:	4a19      	ldr	r2, [pc, #100]	@ (8002698 <HAL_TIM_MspPostInit+0xec>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800263a:	4b17      	ldr	r3, [pc, #92]	@ (8002698 <HAL_TIM_MspPostInit+0xec>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002646:	f248 0302 	movw	r3, #32770	@ 0x8002
 800264a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002658:	2301      	movs	r3, #1
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	4619      	mov	r1, r3
 8002662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002666:	f000 fb69 	bl	8002d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800266a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800267c:	2301      	movs	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	4619      	mov	r1, r3
 8002686:	4805      	ldr	r0, [pc, #20]	@ (800269c <HAL_TIM_MspPostInit+0xf0>)
 8002688:	f000 fb58 	bl	8002d3c <HAL_GPIO_Init>
}
 800268c:	bf00      	nop
 800268e:	3728      	adds	r7, #40	@ 0x28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40012c00 	.word	0x40012c00
 8002698:	40021000 	.word	0x40021000
 800269c:	48000400 	.word	0x48000400

080026a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0a6      	sub	sp, #152	@ 0x98
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	2268      	movs	r2, #104	@ 0x68
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f004 fa0f 	bl	8006ae4 <memset>
  if(huart->Instance==UART4)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a57      	ldr	r2, [pc, #348]	@ (8002828 <HAL_UART_MspInit+0x188>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d166      	bne.n	800279e <HAL_UART_MspInit+0xfe>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80026d0:	2308      	movs	r3, #8
 80026d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	4618      	mov	r0, r3
 80026de:	f001 fb5b 	bl	8003d98 <HAL_RCCEx_PeriphCLKConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026e8:	f7ff ff04 	bl	80024f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80026ec:	4b4f      	ldr	r3, [pc, #316]	@ (800282c <HAL_UART_MspInit+0x18c>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	4a4e      	ldr	r2, [pc, #312]	@ (800282c <HAL_UART_MspInit+0x18c>)
 80026f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80026f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f8:	4b4c      	ldr	r3, [pc, #304]	@ (800282c <HAL_UART_MspInit+0x18c>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	4b49      	ldr	r3, [pc, #292]	@ (800282c <HAL_UART_MspInit+0x18c>)
 8002706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002708:	4a48      	ldr	r2, [pc, #288]	@ (800282c <HAL_UART_MspInit+0x18c>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002710:	4b46      	ldr	r3, [pc, #280]	@ (800282c <HAL_UART_MspInit+0x18c>)
 8002712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271c:	4b43      	ldr	r3, [pc, #268]	@ (800282c <HAL_UART_MspInit+0x18c>)
 800271e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002720:	4a42      	ldr	r2, [pc, #264]	@ (800282c <HAL_UART_MspInit+0x18c>)
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002728:	4b40      	ldr	r3, [pc, #256]	@ (800282c <HAL_UART_MspInit+0x18c>)
 800272a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002734:	2301      	movs	r3, #1
 8002736:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800274c:	2308      	movs	r3, #8
 800274e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002752:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002756:	4619      	mov	r1, r3
 8002758:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800275c:	f000 faee 	bl	8002d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002760:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002764:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800277a:	2308      	movs	r3, #8
 800277c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002780:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002784:	4619      	mov	r1, r3
 8002786:	482a      	ldr	r0, [pc, #168]	@ (8002830 <HAL_UART_MspInit+0x190>)
 8002788:	f000 fad8 	bl	8002d3c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	2100      	movs	r1, #0
 8002790:	2034      	movs	r0, #52	@ 0x34
 8002792:	f000 fa1e 	bl	8002bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002796:	2034      	movs	r0, #52	@ 0x34
 8002798:	f000 fa37 	bl	8002c0a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800279c:	e040      	b.n	8002820 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a24      	ldr	r2, [pc, #144]	@ (8002834 <HAL_UART_MspInit+0x194>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d13b      	bne.n	8002820 <HAL_UART_MspInit+0x180>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027a8:	2302      	movs	r3, #2
 80027aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 faef 	bl	8003d98 <HAL_RCCEx_PeriphCLKConfig>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_UART_MspInit+0x124>
      Error_Handler();
 80027c0:	f7ff fe98 	bl	80024f4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <HAL_UART_MspInit+0x18c>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c8:	4a18      	ldr	r2, [pc, #96]	@ (800282c <HAL_UART_MspInit+0x18c>)
 80027ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80027d0:	4b16      	ldr	r3, [pc, #88]	@ (800282c <HAL_UART_MspInit+0x18c>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027dc:	4b13      	ldr	r3, [pc, #76]	@ (800282c <HAL_UART_MspInit+0x18c>)
 80027de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e0:	4a12      	ldr	r2, [pc, #72]	@ (800282c <HAL_UART_MspInit+0x18c>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027e8:	4b10      	ldr	r3, [pc, #64]	@ (800282c <HAL_UART_MspInit+0x18c>)
 80027ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027f4:	230c      	movs	r3, #12
 80027f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800280c:	2307      	movs	r3, #7
 800280e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002816:	4619      	mov	r1, r3
 8002818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800281c:	f000 fa8e 	bl	8002d3c <HAL_GPIO_Init>
}
 8002820:	bf00      	nop
 8002822:	3798      	adds	r7, #152	@ 0x98
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40004c00 	.word	0x40004c00
 800282c:	40021000 	.word	0x40021000
 8002830:	48000800 	.word	0x48000800
 8002834:	40004400 	.word	0x40004400

08002838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800283c:	bf00      	nop
 800283e:	e7fd      	b.n	800283c <NMI_Handler+0x4>

08002840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002844:	bf00      	nop
 8002846:	e7fd      	b.n	8002844 <HardFault_Handler+0x4>

08002848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <MemManage_Handler+0x4>

08002850 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <BusFault_Handler+0x4>

08002858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <UsageFault_Handler+0x4>

08002860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800288e:	f000 f8a5 	bl	80029dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800289c:	4802      	ldr	r0, [pc, #8]	@ (80028a8 <UART4_IRQHandler+0x10>)
 800289e:	f002 fe8d 	bl	80055bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200000c0 	.word	0x200000c0

080028ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002908 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028d4:	f7ff ffea 	bl	80028ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	@ (800290c <LoopForever+0x6>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	@ (8002910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <LoopForever+0xe>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	@ (800291c <LoopForever+0x16>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028fe:	f004 f8f9 	bl	8006af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002902:	f7fd fdfd 	bl	8000500 <main>

08002906 <LoopForever>:

LoopForever:
    b LoopForever
 8002906:	e7fe      	b.n	8002906 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002914:	08006bac 	.word	0x08006bac
  ldr r2, =_sbss
 8002918:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800291c:	200001d8 	.word	0x200001d8

08002920 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC1_IRQHandler>
	...

08002924 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800292e:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <HAL_Init+0x3c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a0b      	ldr	r2, [pc, #44]	@ (8002960 <HAL_Init+0x3c>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002938:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293a:	2003      	movs	r0, #3
 800293c:	f000 f93e 	bl	8002bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002940:	2000      	movs	r0, #0
 8002942:	f000 f80f 	bl	8002964 <HAL_InitTick>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	71fb      	strb	r3, [r7, #7]
 8002950:	e001      	b.n	8002956 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002952:	f7ff fdd5 	bl	8002500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002956:	79fb      	ldrb	r3, [r7, #7]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40022000 	.word	0x40022000

08002964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002970:	4b17      	ldr	r3, [pc, #92]	@ (80029d0 <HAL_InitTick+0x6c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d023      	beq.n	80029c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002978:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <HAL_InitTick+0x70>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b14      	ldr	r3, [pc, #80]	@ (80029d0 <HAL_InitTick+0x6c>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	4619      	mov	r1, r3
 8002982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002986:	fbb3 f3f1 	udiv	r3, r3, r1
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f949 	bl	8002c26 <HAL_SYSTICK_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10f      	bne.n	80029ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b0f      	cmp	r3, #15
 800299e:	d809      	bhi.n	80029b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a0:	2200      	movs	r2, #0
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	f000 f913 	bl	8002bd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029ac:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <HAL_InitTick+0x74>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e007      	b.n	80029c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	e004      	b.n	80029c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e001      	b.n	80029c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000008 	.word	0x20000008
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000004 	.word	0x20000004

080029dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_IncTick+0x20>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <HAL_IncTick+0x24>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a04      	ldr	r2, [pc, #16]	@ (8002a00 <HAL_IncTick+0x24>)
 80029ee:	6013      	str	r3, [r2, #0]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20000008 	.word	0x20000008
 8002a00:	200001d4 	.word	0x200001d4

08002a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return uwTick;
 8002a08:	4b03      	ldr	r3, [pc, #12]	@ (8002a18 <HAL_GetTick+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	200001d4 	.word	0x200001d4

08002a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4e:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	60d3      	str	r3, [r2, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <__NVIC_GetPriorityGrouping+0x18>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	f003 0307 	and.w	r3, r3, #7
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	db0b      	blt.n	8002aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	f003 021f 	and.w	r2, r3, #31
 8002a98:	4907      	ldr	r1, [pc, #28]	@ (8002ab8 <__NVIC_EnableIRQ+0x38>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000e100 	.word	0xe000e100

08002abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6039      	str	r1, [r7, #0]
 8002ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	db0a      	blt.n	8002ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	490c      	ldr	r1, [pc, #48]	@ (8002b08 <__NVIC_SetPriority+0x4c>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae4:	e00a      	b.n	8002afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4908      	ldr	r1, [pc, #32]	@ (8002b0c <__NVIC_SetPriority+0x50>)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	3b04      	subs	r3, #4
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	440b      	add	r3, r1
 8002afa:	761a      	strb	r2, [r3, #24]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000e100 	.word	0xe000e100
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b089      	sub	sp, #36	@ 0x24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f1c3 0307 	rsb	r3, r3, #7
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	bf28      	it	cs
 8002b2e:	2304      	movcs	r3, #4
 8002b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d902      	bls.n	8002b40 <NVIC_EncodePriority+0x30>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3b03      	subs	r3, #3
 8002b3e:	e000      	b.n	8002b42 <NVIC_EncodePriority+0x32>
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	401a      	ands	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	43d9      	mvns	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	4313      	orrs	r3, r2
         );
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3724      	adds	r7, #36	@ 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b88:	d301      	bcc.n	8002b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e00f      	b.n	8002bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <SysTick_Config+0x40>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b96:	210f      	movs	r1, #15
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	f7ff ff8e 	bl	8002abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <SysTick_Config+0x40>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba6:	4b04      	ldr	r3, [pc, #16]	@ (8002bb8 <SysTick_Config+0x40>)
 8002ba8:	2207      	movs	r2, #7
 8002baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	e000e010 	.word	0xe000e010

08002bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ff29 	bl	8002a1c <__NVIC_SetPriorityGrouping>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002be4:	f7ff ff3e 	bl	8002a64 <__NVIC_GetPriorityGrouping>
 8002be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f7ff ff8e 	bl	8002b10 <NVIC_EncodePriority>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff5d 	bl	8002abc <__NVIC_SetPriority>
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff31 	bl	8002a80 <__NVIC_EnableIRQ>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ffa2 	bl	8002b78 <SysTick_Config>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d008      	beq.n	8002c68 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e022      	b.n	8002cae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 020e 	bic.w	r2, r2, #14
 8002c76:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8c:	f003 021c 	and.w	r2, r3, #28
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d005      	beq.n	8002cde <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	e029      	b.n	8002d32 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 020e 	bic.w	r2, r2, #14
 8002cec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f003 021c 	and.w	r2, r3, #28
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d10:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
    }
  }
  return status;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4a:	e154      	b.n	8002ff6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8146 	beq.w	8002ff0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d005      	beq.n	8002d7c <HAL_GPIO_Init+0x40>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d130      	bne.n	8002dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2203      	movs	r2, #3
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002db2:	2201      	movs	r2, #1
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 0201 	and.w	r2, r3, #1
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d017      	beq.n	8002e1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d123      	bne.n	8002e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	08da      	lsrs	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3208      	adds	r2, #8
 8002e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	08da      	lsrs	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3208      	adds	r2, #8
 8002e68:	6939      	ldr	r1, [r7, #16]
 8002e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0203 	and.w	r2, r3, #3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80a0 	beq.w	8002ff0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb0:	4b58      	ldr	r3, [pc, #352]	@ (8003014 <HAL_GPIO_Init+0x2d8>)
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb4:	4a57      	ldr	r2, [pc, #348]	@ (8003014 <HAL_GPIO_Init+0x2d8>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ebc:	4b55      	ldr	r3, [pc, #340]	@ (8003014 <HAL_GPIO_Init+0x2d8>)
 8002ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ec8:	4a53      	ldr	r2, [pc, #332]	@ (8003018 <HAL_GPIO_Init+0x2dc>)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	3302      	adds	r3, #2
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	220f      	movs	r2, #15
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ef2:	d019      	beq.n	8002f28 <HAL_GPIO_Init+0x1ec>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a49      	ldr	r2, [pc, #292]	@ (800301c <HAL_GPIO_Init+0x2e0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d013      	beq.n	8002f24 <HAL_GPIO_Init+0x1e8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a48      	ldr	r2, [pc, #288]	@ (8003020 <HAL_GPIO_Init+0x2e4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00d      	beq.n	8002f20 <HAL_GPIO_Init+0x1e4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a47      	ldr	r2, [pc, #284]	@ (8003024 <HAL_GPIO_Init+0x2e8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <HAL_GPIO_Init+0x1e0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a46      	ldr	r2, [pc, #280]	@ (8003028 <HAL_GPIO_Init+0x2ec>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_GPIO_Init+0x1dc>
 8002f14:	2304      	movs	r3, #4
 8002f16:	e008      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f18:	2307      	movs	r3, #7
 8002f1a:	e006      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e004      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e002      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <HAL_GPIO_Init+0x1ee>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	f002 0203 	and.w	r2, r2, #3
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	4093      	lsls	r3, r2
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f3a:	4937      	ldr	r1, [pc, #220]	@ (8003018 <HAL_GPIO_Init+0x2dc>)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	3302      	adds	r3, #2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f48:	4b38      	ldr	r3, [pc, #224]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f72:	4b2e      	ldr	r3, [pc, #184]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f96:	4a25      	ldr	r2, [pc, #148]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f9c:	4b23      	ldr	r3, [pc, #140]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fc6:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fea:	4a10      	ldr	r2, [pc, #64]	@ (800302c <HAL_GPIO_Init+0x2f0>)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f aea3 	bne.w	8002d4c <HAL_GPIO_Init+0x10>
  }
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	371c      	adds	r7, #28
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	40021000 	.word	0x40021000
 8003018:	40010000 	.word	0x40010000
 800301c:	48000400 	.word	0x48000400
 8003020:	48000800 	.word	0x48000800
 8003024:	48000c00 	.word	0x48000c00
 8003028:	48001000 	.word	0x48001000
 800302c:	40010400 	.word	0x40010400

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
 800303c:	4613      	mov	r3, r2
 800303e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800304c:	e002      	b.n	8003054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003064:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <HAL_PWREx_GetVoltageRange+0x18>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40007000 	.word	0x40007000

0800307c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800308a:	d130      	bne.n	80030ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800308c:	4b23      	ldr	r3, [pc, #140]	@ (800311c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003098:	d038      	beq.n	800310c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800309a:	4b20      	ldr	r3, [pc, #128]	@ (800311c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030a2:	4a1e      	ldr	r2, [pc, #120]	@ (800311c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2232      	movs	r2, #50	@ 0x32
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003124 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	0c9b      	lsrs	r3, r3, #18
 80030bc:	3301      	adds	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c0:	e002      	b.n	80030c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c8:	4b14      	ldr	r3, [pc, #80]	@ (800311c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d4:	d102      	bne.n	80030dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f2      	bne.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030dc:	4b0f      	ldr	r3, [pc, #60]	@ (800311c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e8:	d110      	bne.n	800310c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e00f      	b.n	800310e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ee:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fa:	d007      	beq.n	800310c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030fc:	4b07      	ldr	r3, [pc, #28]	@ (800311c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003104:	4a05      	ldr	r2, [pc, #20]	@ (800311c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800310a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40007000 	.word	0x40007000
 8003120:	20000000 	.word	0x20000000
 8003124:	431bde83 	.word	0x431bde83

08003128 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f000 bc02 	b.w	8003940 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313c:	4b96      	ldr	r3, [pc, #600]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003146:	4b94      	ldr	r3, [pc, #592]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80e4 	beq.w	8003326 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_RCC_OscConfig+0x4c>
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	f040 808b 	bne.w	8003282 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b01      	cmp	r3, #1
 8003170:	f040 8087 	bne.w	8003282 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003174:	4b88      	ldr	r3, [pc, #544]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_OscConfig+0x64>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e3d9      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1a      	ldr	r2, [r3, #32]
 8003190:	4b81      	ldr	r3, [pc, #516]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d004      	beq.n	80031a6 <HAL_RCC_OscConfig+0x7e>
 800319c:	4b7e      	ldr	r3, [pc, #504]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a4:	e005      	b.n	80031b2 <HAL_RCC_OscConfig+0x8a>
 80031a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80031a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d223      	bcs.n	80031fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fd8c 	bl	8003cd8 <RCC_SetFlashLatencyFromMSIRange>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e3ba      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ca:	4b73      	ldr	r3, [pc, #460]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a72      	ldr	r2, [pc, #456]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80031d0:	f043 0308 	orr.w	r3, r3, #8
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b70      	ldr	r3, [pc, #448]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	496d      	ldr	r1, [pc, #436]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	4968      	ldr	r1, [pc, #416]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
 80031fc:	e025      	b.n	800324a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031fe:	4b66      	ldr	r3, [pc, #408]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a65      	ldr	r2, [pc, #404]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003204:	f043 0308 	orr.w	r3, r3, #8
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	4b63      	ldr	r3, [pc, #396]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4960      	ldr	r1, [pc, #384]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321c:	4b5e      	ldr	r3, [pc, #376]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	495b      	ldr	r1, [pc, #364]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fd4c 	bl	8003cd8 <RCC_SetFlashLatencyFromMSIRange>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e37a      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800324a:	f000 fc81 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 800324e:	4602      	mov	r2, r0
 8003250:	4b51      	ldr	r3, [pc, #324]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	4950      	ldr	r1, [pc, #320]	@ (800339c <HAL_RCC_OscConfig+0x274>)
 800325c:	5ccb      	ldrb	r3, [r1, r3]
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	4a4e      	ldr	r2, [pc, #312]	@ (80033a0 <HAL_RCC_OscConfig+0x278>)
 8003268:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800326a:	4b4e      	ldr	r3, [pc, #312]	@ (80033a4 <HAL_RCC_OscConfig+0x27c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fb78 	bl	8002964 <HAL_InitTick>
 8003274:	4603      	mov	r3, r0
 8003276:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d052      	beq.n	8003324 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	e35e      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d032      	beq.n	80032f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800328a:	4b43      	ldr	r3, [pc, #268]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a42      	ldr	r2, [pc, #264]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003296:	f7ff fbb5 	bl	8002a04 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800329e:	f7ff fbb1 	bl	8002a04 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e347      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032b0:	4b39      	ldr	r3, [pc, #228]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032bc:	4b36      	ldr	r3, [pc, #216]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a35      	ldr	r2, [pc, #212]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80032c2:	f043 0308 	orr.w	r3, r3, #8
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	4b33      	ldr	r3, [pc, #204]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	4930      	ldr	r1, [pc, #192]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032da:	4b2f      	ldr	r3, [pc, #188]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	492b      	ldr	r1, [pc, #172]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
 80032ee:	e01a      	b.n	8003326 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032f0:	4b29      	ldr	r3, [pc, #164]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a28      	ldr	r2, [pc, #160]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032fc:	f7ff fb82 	bl	8002a04 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003304:	f7ff fb7e 	bl	8002a04 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e314      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003316:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x1dc>
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003324:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d073      	beq.n	800341a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d005      	beq.n	8003344 <HAL_RCC_OscConfig+0x21c>
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d10e      	bne.n	800335c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d10b      	bne.n	800335c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	4b14      	ldr	r3, [pc, #80]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d063      	beq.n	8003418 <HAL_RCC_OscConfig+0x2f0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d15f      	bne.n	8003418 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e2f1      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003364:	d106      	bne.n	8003374 <HAL_RCC_OscConfig+0x24c>
 8003366:	4b0c      	ldr	r3, [pc, #48]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a0b      	ldr	r2, [pc, #44]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e025      	b.n	80033c0 <HAL_RCC_OscConfig+0x298>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800337c:	d114      	bne.n	80033a8 <HAL_RCC_OscConfig+0x280>
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a05      	ldr	r2, [pc, #20]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4b03      	ldr	r3, [pc, #12]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a02      	ldr	r2, [pc, #8]	@ (8003398 <HAL_RCC_OscConfig+0x270>)
 8003390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	e013      	b.n	80033c0 <HAL_RCC_OscConfig+0x298>
 8003398:	40021000 	.word	0x40021000
 800339c:	08006b54 	.word	0x08006b54
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004
 80033a8:	4ba0      	ldr	r3, [pc, #640]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a9f      	ldr	r2, [pc, #636]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80033ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b9d      	ldr	r3, [pc, #628]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a9c      	ldr	r2, [pc, #624]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80033ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7ff fb1c 	bl	8002a04 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d0:	f7ff fb18 	bl	8002a04 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	@ 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e2ae      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e2:	4b92      	ldr	r3, [pc, #584]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x2a8>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7ff fb08 	bl	8002a04 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f8:	f7ff fb04 	bl	8002a04 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	@ 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e29a      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800340a:	4b88      	ldr	r3, [pc, #544]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x2d0>
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d060      	beq.n	80034e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b04      	cmp	r3, #4
 800342a:	d005      	beq.n	8003438 <HAL_RCC_OscConfig+0x310>
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b0c      	cmp	r3, #12
 8003430:	d119      	bne.n	8003466 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d116      	bne.n	8003466 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003438:	4b7c      	ldr	r3, [pc, #496]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_OscConfig+0x328>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e277      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003450:	4b76      	ldr	r3, [pc, #472]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	4973      	ldr	r1, [pc, #460]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003464:	e040      	b.n	80034e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d023      	beq.n	80034b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346e:	4b6f      	ldr	r3, [pc, #444]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6e      	ldr	r2, [pc, #440]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7ff fac3 	bl	8002a04 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003482:	f7ff fabf 	bl	8002a04 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e255      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003494:	4b65      	ldr	r3, [pc, #404]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0f0      	beq.n	8003482 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a0:	4b62      	ldr	r3, [pc, #392]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	495f      	ldr	r1, [pc, #380]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
 80034b4:	e018      	b.n	80034e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b6:	4b5d      	ldr	r3, [pc, #372]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a5c      	ldr	r2, [pc, #368]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80034bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7ff fa9f 	bl	8002a04 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ca:	f7ff fa9b 	bl	8002a04 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e231      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034dc:	4b53      	ldr	r3, [pc, #332]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d03c      	beq.n	800356e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01c      	beq.n	8003536 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fc:	4b4b      	ldr	r3, [pc, #300]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80034fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003502:	4a4a      	ldr	r2, [pc, #296]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7ff fa7a 	bl	8002a04 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003514:	f7ff fa76 	bl	8002a04 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e20c      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003526:	4b41      	ldr	r3, [pc, #260]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0ef      	beq.n	8003514 <HAL_RCC_OscConfig+0x3ec>
 8003534:	e01b      	b.n	800356e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003536:	4b3d      	ldr	r3, [pc, #244]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800353c:	4a3b      	ldr	r2, [pc, #236]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7ff fa5d 	bl	8002a04 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354e:	f7ff fa59 	bl	8002a04 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1ef      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003560:	4b32      	ldr	r3, [pc, #200]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1ef      	bne.n	800354e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 80a6 	beq.w	80036c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357c:	2300      	movs	r3, #0
 800357e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003580:	4b2a      	ldr	r3, [pc, #168]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10d      	bne.n	80035a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358c:	4b27      	ldr	r3, [pc, #156]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003590:	4a26      	ldr	r2, [pc, #152]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003596:	6593      	str	r3, [r2, #88]	@ 0x58
 8003598:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a4:	2301      	movs	r3, #1
 80035a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a8:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <HAL_RCC_OscConfig+0x508>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d118      	bne.n	80035e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <HAL_RCC_OscConfig+0x508>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003630 <HAL_RCC_OscConfig+0x508>)
 80035ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c0:	f7ff fa20 	bl	8002a04 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c8:	f7ff fa1c 	bl	8002a04 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1b2      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035da:	4b15      	ldr	r3, [pc, #84]	@ (8003630 <HAL_RCC_OscConfig+0x508>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d108      	bne.n	8003600 <HAL_RCC_OscConfig+0x4d8>
 80035ee:	4b0f      	ldr	r3, [pc, #60]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f4:	4a0d      	ldr	r2, [pc, #52]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035fe:	e029      	b.n	8003654 <HAL_RCC_OscConfig+0x52c>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b05      	cmp	r3, #5
 8003606:	d115      	bne.n	8003634 <HAL_RCC_OscConfig+0x50c>
 8003608:	4b08      	ldr	r3, [pc, #32]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	4a07      	ldr	r2, [pc, #28]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003610:	f043 0304 	orr.w	r3, r3, #4
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361e:	4a03      	ldr	r2, [pc, #12]	@ (800362c <HAL_RCC_OscConfig+0x504>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003628:	e014      	b.n	8003654 <HAL_RCC_OscConfig+0x52c>
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	40007000 	.word	0x40007000
 8003634:	4b9a      	ldr	r3, [pc, #616]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	4a99      	ldr	r2, [pc, #612]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003644:	4b96      	ldr	r3, [pc, #600]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	4a95      	ldr	r2, [pc, #596]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 800364c:	f023 0304 	bic.w	r3, r3, #4
 8003650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d016      	beq.n	800368a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7ff f9d2 	bl	8002a04 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003662:	e00a      	b.n	800367a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003664:	f7ff f9ce 	bl	8002a04 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e162      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800367a:	4b89      	ldr	r3, [pc, #548]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0ed      	beq.n	8003664 <HAL_RCC_OscConfig+0x53c>
 8003688:	e015      	b.n	80036b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368a:	f7ff f9bb 	bl	8002a04 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003690:	e00a      	b.n	80036a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003692:	f7ff f9b7 	bl	8002a04 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e14b      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036a8:	4b7d      	ldr	r3, [pc, #500]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1ed      	bne.n	8003692 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036b6:	7ffb      	ldrb	r3, [r7, #31]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d105      	bne.n	80036c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036bc:	4b78      	ldr	r3, [pc, #480]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c0:	4a77      	ldr	r2, [pc, #476]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 80036c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d03c      	beq.n	800374e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01c      	beq.n	8003716 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036dc:	4b70      	ldr	r3, [pc, #448]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 80036de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036e2:	4a6f      	ldr	r2, [pc, #444]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7ff f98a 	bl	8002a04 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036f4:	f7ff f986 	bl	8002a04 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e11c      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003706:	4b66      	ldr	r3, [pc, #408]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 8003708:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ef      	beq.n	80036f4 <HAL_RCC_OscConfig+0x5cc>
 8003714:	e01b      	b.n	800374e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003716:	4b62      	ldr	r3, [pc, #392]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 8003718:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800371c:	4a60      	ldr	r2, [pc, #384]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003726:	f7ff f96d 	bl	8002a04 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800372e:	f7ff f969 	bl	8002a04 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e0ff      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003740:	4b57      	ldr	r3, [pc, #348]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 8003742:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1ef      	bne.n	800372e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80f3 	beq.w	800393e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	2b02      	cmp	r3, #2
 800375e:	f040 80c9 	bne.w	80038f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003762:	4b4f      	ldr	r3, [pc, #316]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0203 	and.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	429a      	cmp	r2, r3
 8003774:	d12c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	3b01      	subs	r3, #1
 8003782:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d123      	bne.n	80037d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003792:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d11b      	bne.n	80037d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d113      	bne.n	80037d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	3b01      	subs	r3, #1
 80037b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d109      	bne.n	80037d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	3b01      	subs	r3, #1
 80037ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d06b      	beq.n	80038a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d062      	beq.n	800389c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037d6:	4b32      	ldr	r3, [pc, #200]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0ac      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037e6:	4b2e      	ldr	r3, [pc, #184]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2d      	ldr	r2, [pc, #180]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 80037ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037f2:	f7ff f907 	bl	8002a04 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fa:	f7ff f903 	bl	8002a04 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e099      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800380c:	4b24      	ldr	r3, [pc, #144]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003818:	4b21      	ldr	r3, [pc, #132]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	4b21      	ldr	r3, [pc, #132]	@ (80038a4 <HAL_RCC_OscConfig+0x77c>)
 800381e:	4013      	ands	r3, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003828:	3a01      	subs	r2, #1
 800382a:	0112      	lsls	r2, r2, #4
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003832:	0212      	lsls	r2, r2, #8
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800383a:	0852      	lsrs	r2, r2, #1
 800383c:	3a01      	subs	r2, #1
 800383e:	0552      	lsls	r2, r2, #21
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003846:	0852      	lsrs	r2, r2, #1
 8003848:	3a01      	subs	r2, #1
 800384a:	0652      	lsls	r2, r2, #25
 800384c:	4311      	orrs	r1, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003852:	06d2      	lsls	r2, r2, #27
 8003854:	430a      	orrs	r2, r1
 8003856:	4912      	ldr	r1, [pc, #72]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 8003858:	4313      	orrs	r3, r2
 800385a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800385c:	4b10      	ldr	r3, [pc, #64]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0f      	ldr	r2, [pc, #60]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 8003862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003866:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003868:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a0c      	ldr	r2, [pc, #48]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 800386e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003872:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003874:	f7ff f8c6 	bl	8002a04 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387c:	f7ff f8c2 	bl	8002a04 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e058      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388e:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <HAL_RCC_OscConfig+0x778>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800389a:	e050      	b.n	800393e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e04f      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
 80038a0:	40021000 	.word	0x40021000
 80038a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a8:	4b27      	ldr	r3, [pc, #156]	@ (8003948 <HAL_RCC_OscConfig+0x820>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d144      	bne.n	800393e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038b4:	4b24      	ldr	r3, [pc, #144]	@ (8003948 <HAL_RCC_OscConfig+0x820>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a23      	ldr	r2, [pc, #140]	@ (8003948 <HAL_RCC_OscConfig+0x820>)
 80038ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038c0:	4b21      	ldr	r3, [pc, #132]	@ (8003948 <HAL_RCC_OscConfig+0x820>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4a20      	ldr	r2, [pc, #128]	@ (8003948 <HAL_RCC_OscConfig+0x820>)
 80038c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038cc:	f7ff f89a 	bl	8002a04 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7ff f896 	bl	8002a04 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e02c      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e6:	4b18      	ldr	r3, [pc, #96]	@ (8003948 <HAL_RCC_OscConfig+0x820>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x7ac>
 80038f2:	e024      	b.n	800393e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d01f      	beq.n	800393a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fa:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <HAL_RCC_OscConfig+0x820>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a12      	ldr	r2, [pc, #72]	@ (8003948 <HAL_RCC_OscConfig+0x820>)
 8003900:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7ff f87d 	bl	8002a04 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390e:	f7ff f879 	bl	8002a04 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e00f      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003920:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <HAL_RCC_OscConfig+0x820>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f0      	bne.n	800390e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_RCC_OscConfig+0x820>)
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	4905      	ldr	r1, [pc, #20]	@ (8003948 <HAL_RCC_OscConfig+0x820>)
 8003932:	4b06      	ldr	r3, [pc, #24]	@ (800394c <HAL_RCC_OscConfig+0x824>)
 8003934:	4013      	ands	r3, r2
 8003936:	60cb      	str	r3, [r1, #12]
 8003938:	e001      	b.n	800393e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000
 800394c:	feeefffc 	.word	0xfeeefffc

08003950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0e7      	b.n	8003b34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003964:	4b75      	ldr	r3, [pc, #468]	@ (8003b3c <HAL_RCC_ClockConfig+0x1ec>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d910      	bls.n	8003994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b72      	ldr	r3, [pc, #456]	@ (8003b3c <HAL_RCC_ClockConfig+0x1ec>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0207 	bic.w	r2, r3, #7
 800397a:	4970      	ldr	r1, [pc, #448]	@ (8003b3c <HAL_RCC_ClockConfig+0x1ec>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b6e      	ldr	r3, [pc, #440]	@ (8003b3c <HAL_RCC_ClockConfig+0x1ec>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0cf      	b.n	8003b34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d010      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	4b66      	ldr	r3, [pc, #408]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d908      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b63      	ldr	r3, [pc, #396]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4960      	ldr	r1, [pc, #384]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d04c      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d121      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0a6      	b.n	8003b34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ee:	4b54      	ldr	r3, [pc, #336]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d115      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e09a      	b.n	8003b34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a06:	4b4e      	ldr	r3, [pc, #312]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e08e      	b.n	8003b34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a16:	4b4a      	ldr	r3, [pc, #296]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e086      	b.n	8003b34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a26:	4b46      	ldr	r3, [pc, #280]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f023 0203 	bic.w	r2, r3, #3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	4943      	ldr	r1, [pc, #268]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a38:	f7fe ffe4 	bl	8002a04 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a40:	f7fe ffe0 	bl	8002a04 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e06e      	b.n	8003b34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a56:	4b3a      	ldr	r3, [pc, #232]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 020c 	and.w	r2, r3, #12
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d1eb      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d010      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	4b31      	ldr	r3, [pc, #196]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d208      	bcs.n	8003a96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a84:	4b2e      	ldr	r3, [pc, #184]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	492b      	ldr	r1, [pc, #172]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a96:	4b29      	ldr	r3, [pc, #164]	@ (8003b3c <HAL_RCC_ClockConfig+0x1ec>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d210      	bcs.n	8003ac6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa4:	4b25      	ldr	r3, [pc, #148]	@ (8003b3c <HAL_RCC_ClockConfig+0x1ec>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 0207 	bic.w	r2, r3, #7
 8003aac:	4923      	ldr	r1, [pc, #140]	@ (8003b3c <HAL_RCC_ClockConfig+0x1ec>)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab4:	4b21      	ldr	r3, [pc, #132]	@ (8003b3c <HAL_RCC_ClockConfig+0x1ec>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e036      	b.n	8003b34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	4918      	ldr	r1, [pc, #96]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d009      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003af0:	4b13      	ldr	r3, [pc, #76]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4910      	ldr	r1, [pc, #64]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b04:	f000 f824 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	091b      	lsrs	r3, r3, #4
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	490b      	ldr	r1, [pc, #44]	@ (8003b44 <HAL_RCC_ClockConfig+0x1f4>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b20:	4a09      	ldr	r2, [pc, #36]	@ (8003b48 <HAL_RCC_ClockConfig+0x1f8>)
 8003b22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b24:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <HAL_RCC_ClockConfig+0x1fc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe ff1b 	bl	8002964 <HAL_InitTick>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b32:	7afb      	ldrb	r3, [r7, #11]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40022000 	.word	0x40022000
 8003b40:	40021000 	.word	0x40021000
 8003b44:	08006b54 	.word	0x08006b54
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	20000004 	.word	0x20000004

08003b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b089      	sub	sp, #36	@ 0x24
 8003b54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b68:	4b3b      	ldr	r3, [pc, #236]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x34>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d121      	bne.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d11e      	bne.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b84:	4b34      	ldr	r3, [pc, #208]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b90:	4b31      	ldr	r3, [pc, #196]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b96:	0a1b      	lsrs	r3, r3, #8
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	e005      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bac:	4a2b      	ldr	r2, [pc, #172]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d102      	bne.n	8003bce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bc8:	4b25      	ldr	r3, [pc, #148]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	e004      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bd4:	4b23      	ldr	r3, [pc, #140]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b0c      	cmp	r3, #12
 8003bdc:	d134      	bne.n	8003c48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bde:	4b1e      	ldr	r3, [pc, #120]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d003      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0xac>
 8003bf4:	e005      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bf8:	617b      	str	r3, [r7, #20]
      break;
 8003bfa:	e005      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bfc:	4b19      	ldr	r3, [pc, #100]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bfe:	617b      	str	r3, [r7, #20]
      break;
 8003c00:	e002      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	617b      	str	r3, [r7, #20]
      break;
 8003c06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c08:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	3301      	adds	r3, #1
 8003c14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c16:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	fb03 f202 	mul.w	r2, r3, r2
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	0e5b      	lsrs	r3, r3, #25
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	3301      	adds	r3, #1
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c48:	69bb      	ldr	r3, [r7, #24]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3724      	adds	r7, #36	@ 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	08006b6c 	.word	0x08006b6c
 8003c60:	00f42400 	.word	0x00f42400
 8003c64:	007a1200 	.word	0x007a1200

08003c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c6c:	4b03      	ldr	r3, [pc, #12]	@ (8003c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000000 	.word	0x20000000

08003c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c84:	f7ff fff0 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4904      	ldr	r1, [pc, #16]	@ (8003ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08006b64 	.word	0x08006b64

08003cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cb0:	f7ff ffda 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0adb      	lsrs	r3, r3, #11
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4904      	ldr	r1, [pc, #16]	@ (8003cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	08006b64 	.word	0x08006b64

08003cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cf0:	f7ff f9b6 	bl	8003060 <HAL_PWREx_GetVoltageRange>
 8003cf4:	6178      	str	r0, [r7, #20]
 8003cf6:	e014      	b.n	8003d22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b25      	ldr	r3, [pc, #148]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfc:	4a24      	ldr	r2, [pc, #144]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d04:	4b22      	ldr	r3, [pc, #136]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d10:	f7ff f9a6 	bl	8003060 <HAL_PWREx_GetVoltageRange>
 8003d14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d16:	4b1e      	ldr	r3, [pc, #120]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d28:	d10b      	bne.n	8003d42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b80      	cmp	r3, #128	@ 0x80
 8003d2e:	d919      	bls.n	8003d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d34:	d902      	bls.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d36:	2302      	movs	r3, #2
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	e013      	b.n	8003d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	e010      	b.n	8003d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b80      	cmp	r3, #128	@ 0x80
 8003d46:	d902      	bls.n	8003d4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d48:	2303      	movs	r3, #3
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	e00a      	b.n	8003d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b80      	cmp	r3, #128	@ 0x80
 8003d52:	d102      	bne.n	8003d5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d54:	2302      	movs	r3, #2
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	e004      	b.n	8003d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b70      	cmp	r3, #112	@ 0x70
 8003d5e:	d101      	bne.n	8003d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d60:	2301      	movs	r3, #1
 8003d62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d64:	4b0b      	ldr	r3, [pc, #44]	@ (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f023 0207 	bic.w	r2, r3, #7
 8003d6c:	4909      	ldr	r1, [pc, #36]	@ (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d74:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d001      	beq.n	8003d86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40022000 	.word	0x40022000

08003d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003da0:	2300      	movs	r3, #0
 8003da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003da4:	2300      	movs	r3, #0
 8003da6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d031      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003dbc:	d01a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003dbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003dc2:	d814      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dcc:	d10f      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003dce:	4b5d      	ldr	r3, [pc, #372]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dda:	e00c      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fa44 	bl	8004270 <RCCEx_PLLSAI1_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dec:	e003      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	74fb      	strb	r3, [r7, #19]
      break;
 8003df2:	e000      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003df4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003df6:	7cfb      	ldrb	r3, [r7, #19]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10b      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dfc:	4b51      	ldr	r3, [pc, #324]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0a:	494e      	ldr	r1, [pc, #312]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e12:	e001      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	7cfb      	ldrb	r3, [r7, #19]
 8003e16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 809e 	beq.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e2a:	4b46      	ldr	r3, [pc, #280]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00d      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e40:	4b40      	ldr	r3, [pc, #256]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e44:	4a3f      	ldr	r2, [pc, #252]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a39      	ldr	r2, [pc, #228]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e68:	f7fe fdcc 	bl	8002a04 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e6e:	e009      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e70:	f7fe fdc8 	bl	8002a04 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d902      	bls.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	74fb      	strb	r3, [r7, #19]
        break;
 8003e82:	e005      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e84:	4b30      	ldr	r3, [pc, #192]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ef      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d15a      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e96:	4b2b      	ldr	r3, [pc, #172]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01e      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d019      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eb2:	4b24      	ldr	r3, [pc, #144]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ebc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ebe:	4b21      	ldr	r3, [pc, #132]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ece:	4b1d      	ldr	r3, [pc, #116]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ede:	4a19      	ldr	r2, [pc, #100]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d016      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fd88 	bl	8002a04 <HAL_GetTick>
 8003ef4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef8:	f7fe fd84 	bl	8002a04 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d902      	bls.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	74fb      	strb	r3, [r7, #19]
            break;
 8003f0e:	e006      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f10:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ec      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003f1e:	7cfb      	ldrb	r3, [r7, #19]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f24:	4b07      	ldr	r3, [pc, #28]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f32:	4904      	ldr	r1, [pc, #16]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f3a:	e009      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	74bb      	strb	r3, [r7, #18]
 8003f40:	e006      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f50:	7c7b      	ldrb	r3, [r7, #17]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d105      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f56:	4b9e      	ldr	r3, [pc, #632]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	4a9d      	ldr	r2, [pc, #628]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f6e:	4b98      	ldr	r3, [pc, #608]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f74:	f023 0203 	bic.w	r2, r3, #3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4994      	ldr	r1, [pc, #592]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f90:	4b8f      	ldr	r3, [pc, #572]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f96:	f023 020c 	bic.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	498c      	ldr	r1, [pc, #560]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fb2:	4b87      	ldr	r3, [pc, #540]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	4983      	ldr	r1, [pc, #524]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fd4:	4b7e      	ldr	r3, [pc, #504]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe2:	497b      	ldr	r1, [pc, #492]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ff6:	4b76      	ldr	r3, [pc, #472]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	4972      	ldr	r1, [pc, #456]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004018:	4b6d      	ldr	r3, [pc, #436]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	496a      	ldr	r1, [pc, #424]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800403a:	4b65      	ldr	r3, [pc, #404]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004040:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004048:	4961      	ldr	r1, [pc, #388]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800405c:	4b5c      	ldr	r3, [pc, #368]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004062:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800406a:	4959      	ldr	r1, [pc, #356]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800407e:	4b54      	ldr	r3, [pc, #336]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004084:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408c:	4950      	ldr	r1, [pc, #320]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040a0:	4b4b      	ldr	r3, [pc, #300]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ae:	4948      	ldr	r1, [pc, #288]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040c2:	4b43      	ldr	r3, [pc, #268]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040c8:	f023 0203 	bic.w	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	493f      	ldr	r1, [pc, #252]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d028      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e4:	4b3a      	ldr	r3, [pc, #232]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f2:	4937      	ldr	r1, [pc, #220]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004102:	d106      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004104:	4b32      	ldr	r3, [pc, #200]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a31      	ldr	r2, [pc, #196]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800410a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800410e:	60d3      	str	r3, [r2, #12]
 8004110:	e011      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004116:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800411a:	d10c      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	2101      	movs	r1, #1
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f8a4 	bl	8004270 <RCCEx_PLLSAI1_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004132:	7cfb      	ldrb	r3, [r7, #19]
 8004134:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d028      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004142:	4b23      	ldr	r3, [pc, #140]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004148:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004150:	491f      	ldr	r1, [pc, #124]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004160:	d106      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004162:	4b1b      	ldr	r3, [pc, #108]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	4a1a      	ldr	r2, [pc, #104]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004168:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800416c:	60d3      	str	r3, [r2, #12]
 800416e:	e011      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004174:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004178:	d10c      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3304      	adds	r3, #4
 800417e:	2101      	movs	r1, #1
 8004180:	4618      	mov	r0, r3
 8004182:	f000 f875 	bl	8004270 <RCCEx_PLLSAI1_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d02b      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041a0:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ae:	4908      	ldr	r1, [pc, #32]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041be:	d109      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041c0:	4b03      	ldr	r3, [pc, #12]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a02      	ldr	r2, [pc, #8]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80041c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ca:	60d3      	str	r3, [r2, #12]
 80041cc:	e014      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	3304      	adds	r3, #4
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 f843 	bl	8004270 <RCCEx_PLLSAI1_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
 80041f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01c      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004204:	4b19      	ldr	r3, [pc, #100]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004212:	4916      	ldr	r1, [pc, #88]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004222:	d10c      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	2102      	movs	r1, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f820 	bl	8004270 <RCCEx_PLLSAI1_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800423a:	7cfb      	ldrb	r3, [r7, #19]
 800423c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800424a:	4b08      	ldr	r3, [pc, #32]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004250:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004258:	4904      	ldr	r1, [pc, #16]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004260:	7cbb      	ldrb	r3, [r7, #18]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000

08004270 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800427e:	4b74      	ldr	r3, [pc, #464]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d018      	beq.n	80042bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800428a:	4b71      	ldr	r3, [pc, #452]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0203 	and.w	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d10d      	bne.n	80042b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
       ||
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042a2:	4b6b      	ldr	r3, [pc, #428]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
       ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d047      	beq.n	8004346 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	e044      	b.n	8004346 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d018      	beq.n	80042f6 <RCCEx_PLLSAI1_Config+0x86>
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d825      	bhi.n	8004314 <RCCEx_PLLSAI1_Config+0xa4>
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d002      	beq.n	80042d2 <RCCEx_PLLSAI1_Config+0x62>
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d009      	beq.n	80042e4 <RCCEx_PLLSAI1_Config+0x74>
 80042d0:	e020      	b.n	8004314 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d11d      	bne.n	800431a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e2:	e01a      	b.n	800431a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d116      	bne.n	800431e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f4:	e013      	b.n	800431e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042f6:	4b56      	ldr	r3, [pc, #344]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004302:	4b53      	ldr	r3, [pc, #332]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004312:	e006      	b.n	8004322 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
      break;
 8004318:	e004      	b.n	8004324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004322:	bf00      	nop
    }

    if(status == HAL_OK)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800432a:	4b49      	ldr	r3, [pc, #292]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6819      	ldr	r1, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	3b01      	subs	r3, #1
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	430b      	orrs	r3, r1
 8004340:	4943      	ldr	r1, [pc, #268]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d17c      	bne.n	8004446 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800434c:	4b40      	ldr	r3, [pc, #256]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a3f      	ldr	r2, [pc, #252]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004352:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004358:	f7fe fb54 	bl	8002a04 <HAL_GetTick>
 800435c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800435e:	e009      	b.n	8004374 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004360:	f7fe fb50 	bl	8002a04 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d902      	bls.n	8004374 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	73fb      	strb	r3, [r7, #15]
        break;
 8004372:	e005      	b.n	8004380 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004374:	4b36      	ldr	r3, [pc, #216]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1ef      	bne.n	8004360 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d15f      	bne.n	8004446 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d110      	bne.n	80043ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800438c:	4b30      	ldr	r3, [pc, #192]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004394:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6892      	ldr	r2, [r2, #8]
 800439c:	0211      	lsls	r1, r2, #8
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68d2      	ldr	r2, [r2, #12]
 80043a2:	06d2      	lsls	r2, r2, #27
 80043a4:	430a      	orrs	r2, r1
 80043a6:	492a      	ldr	r1, [pc, #168]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	610b      	str	r3, [r1, #16]
 80043ac:	e027      	b.n	80043fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d112      	bne.n	80043da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043b4:	4b26      	ldr	r3, [pc, #152]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80043bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6892      	ldr	r2, [r2, #8]
 80043c4:	0211      	lsls	r1, r2, #8
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6912      	ldr	r2, [r2, #16]
 80043ca:	0852      	lsrs	r2, r2, #1
 80043cc:	3a01      	subs	r2, #1
 80043ce:	0552      	lsls	r2, r2, #21
 80043d0:	430a      	orrs	r2, r1
 80043d2:	491f      	ldr	r1, [pc, #124]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	610b      	str	r3, [r1, #16]
 80043d8:	e011      	b.n	80043fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043da:	4b1d      	ldr	r3, [pc, #116]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80043e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6892      	ldr	r2, [r2, #8]
 80043ea:	0211      	lsls	r1, r2, #8
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6952      	ldr	r2, [r2, #20]
 80043f0:	0852      	lsrs	r2, r2, #1
 80043f2:	3a01      	subs	r2, #1
 80043f4:	0652      	lsls	r2, r2, #25
 80043f6:	430a      	orrs	r2, r1
 80043f8:	4915      	ldr	r1, [pc, #84]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043fe:	4b14      	ldr	r3, [pc, #80]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a13      	ldr	r2, [pc, #76]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004404:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004408:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fe fafb 	bl	8002a04 <HAL_GetTick>
 800440e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004410:	e009      	b.n	8004426 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004412:	f7fe faf7 	bl	8002a04 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d902      	bls.n	8004426 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	73fb      	strb	r3, [r7, #15]
          break;
 8004424:	e005      	b.n	8004432 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004426:	4b0a      	ldr	r3, [pc, #40]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0ef      	beq.n	8004412 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d106      	bne.n	8004446 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004438:	4b05      	ldr	r3, [pc, #20]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	4903      	ldr	r1, [pc, #12]	@ (8004450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004442:	4313      	orrs	r3, r2
 8004444:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40021000 	.word	0x40021000

08004454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e049      	b.n	80044fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fe f864 	bl	8002548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 fb5a 	bl	8004b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e049      	b.n	80045a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f841 	bl	80045b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f000 fb03 	bl	8004b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d109      	bne.n	80045e8 <HAL_TIM_PWM_Start+0x24>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	e03c      	b.n	8004662 <HAL_TIM_PWM_Start+0x9e>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d109      	bne.n	8004602 <HAL_TIM_PWM_Start+0x3e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	bf14      	ite	ne
 80045fa:	2301      	movne	r3, #1
 80045fc:	2300      	moveq	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	e02f      	b.n	8004662 <HAL_TIM_PWM_Start+0x9e>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d109      	bne.n	800461c <HAL_TIM_PWM_Start+0x58>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	e022      	b.n	8004662 <HAL_TIM_PWM_Start+0x9e>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b0c      	cmp	r3, #12
 8004620:	d109      	bne.n	8004636 <HAL_TIM_PWM_Start+0x72>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	e015      	b.n	8004662 <HAL_TIM_PWM_Start+0x9e>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b10      	cmp	r3, #16
 800463a:	d109      	bne.n	8004650 <HAL_TIM_PWM_Start+0x8c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e008      	b.n	8004662 <HAL_TIM_PWM_Start+0x9e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e083      	b.n	8004772 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <HAL_TIM_PWM_Start+0xb6>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004678:	e023      	b.n	80046c2 <HAL_TIM_PWM_Start+0xfe>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b04      	cmp	r3, #4
 800467e:	d104      	bne.n	800468a <HAL_TIM_PWM_Start+0xc6>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004688:	e01b      	b.n	80046c2 <HAL_TIM_PWM_Start+0xfe>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d104      	bne.n	800469a <HAL_TIM_PWM_Start+0xd6>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004698:	e013      	b.n	80046c2 <HAL_TIM_PWM_Start+0xfe>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b0c      	cmp	r3, #12
 800469e:	d104      	bne.n	80046aa <HAL_TIM_PWM_Start+0xe6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046a8:	e00b      	b.n	80046c2 <HAL_TIM_PWM_Start+0xfe>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d104      	bne.n	80046ba <HAL_TIM_PWM_Start+0xf6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046b8:	e003      	b.n	80046c2 <HAL_TIM_PWM_Start+0xfe>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	6839      	ldr	r1, [r7, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fdd0 	bl	8005270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a29      	ldr	r2, [pc, #164]	@ (800477c <HAL_TIM_PWM_Start+0x1b8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_TIM_PWM_Start+0x12a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a28      	ldr	r2, [pc, #160]	@ (8004780 <HAL_TIM_PWM_Start+0x1bc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_TIM_PWM_Start+0x12a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a26      	ldr	r2, [pc, #152]	@ (8004784 <HAL_TIM_PWM_Start+0x1c0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_PWM_Start+0x12e>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_TIM_PWM_Start+0x130>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004706:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1b      	ldr	r2, [pc, #108]	@ (800477c <HAL_TIM_PWM_Start+0x1b8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_TIM_PWM_Start+0x16c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471a:	d009      	beq.n	8004730 <HAL_TIM_PWM_Start+0x16c>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a19      	ldr	r2, [pc, #100]	@ (8004788 <HAL_TIM_PWM_Start+0x1c4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_TIM_PWM_Start+0x16c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a15      	ldr	r2, [pc, #84]	@ (8004780 <HAL_TIM_PWM_Start+0x1bc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d115      	bne.n	800475c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	4b15      	ldr	r3, [pc, #84]	@ (800478c <HAL_TIM_PWM_Start+0x1c8>)
 8004738:	4013      	ands	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b06      	cmp	r3, #6
 8004740:	d015      	beq.n	800476e <HAL_TIM_PWM_Start+0x1aa>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004748:	d011      	beq.n	800476e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	e008      	b.n	800476e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e000      	b.n	8004770 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40014000 	.word	0x40014000
 8004784:	40014400 	.word	0x40014400
 8004788:	40000400 	.word	0x40000400
 800478c:	00010007 	.word	0x00010007

08004790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e0ff      	b.n	80049ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b14      	cmp	r3, #20
 80047ba:	f200 80f0 	bhi.w	800499e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047be:	a201      	add	r2, pc, #4	@ (adr r2, 80047c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	08004819 	.word	0x08004819
 80047c8:	0800499f 	.word	0x0800499f
 80047cc:	0800499f 	.word	0x0800499f
 80047d0:	0800499f 	.word	0x0800499f
 80047d4:	08004859 	.word	0x08004859
 80047d8:	0800499f 	.word	0x0800499f
 80047dc:	0800499f 	.word	0x0800499f
 80047e0:	0800499f 	.word	0x0800499f
 80047e4:	0800489b 	.word	0x0800489b
 80047e8:	0800499f 	.word	0x0800499f
 80047ec:	0800499f 	.word	0x0800499f
 80047f0:	0800499f 	.word	0x0800499f
 80047f4:	080048db 	.word	0x080048db
 80047f8:	0800499f 	.word	0x0800499f
 80047fc:	0800499f 	.word	0x0800499f
 8004800:	0800499f 	.word	0x0800499f
 8004804:	0800491d 	.word	0x0800491d
 8004808:	0800499f 	.word	0x0800499f
 800480c:	0800499f 	.word	0x0800499f
 8004810:	0800499f 	.word	0x0800499f
 8004814:	0800495d 	.word	0x0800495d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fa0e 	bl	8004c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0208 	orr.w	r2, r2, #8
 8004832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0204 	bic.w	r2, r2, #4
 8004842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6999      	ldr	r1, [r3, #24]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	619a      	str	r2, [r3, #24]
      break;
 8004856:	e0a5      	b.n	80049a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fa6a 	bl	8004d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6999      	ldr	r1, [r3, #24]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	021a      	lsls	r2, r3, #8
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	619a      	str	r2, [r3, #24]
      break;
 8004898:	e084      	b.n	80049a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fac3 	bl	8004e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0208 	orr.w	r2, r2, #8
 80048b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69da      	ldr	r2, [r3, #28]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0204 	bic.w	r2, r2, #4
 80048c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69d9      	ldr	r1, [r3, #28]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	61da      	str	r2, [r3, #28]
      break;
 80048d8:	e064      	b.n	80049a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fb1b 	bl	8004f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69d9      	ldr	r1, [r3, #28]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	021a      	lsls	r2, r3, #8
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	61da      	str	r2, [r3, #28]
      break;
 800491a:	e043      	b.n	80049a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fb58 	bl	8004fd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0208 	orr.w	r2, r2, #8
 8004936:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0204 	bic.w	r2, r2, #4
 8004946:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800495a:	e023      	b.n	80049a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fb90 	bl	8005088 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004976:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004986:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800499c:	e002      	b.n	80049a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	75fb      	strb	r3, [r7, #23]
      break;
 80049a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop

080049b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_TIM_ConfigClockSource+0x1c>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e0b6      	b.n	8004b42 <HAL_TIM_ConfigClockSource+0x18a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a10:	d03e      	beq.n	8004a90 <HAL_TIM_ConfigClockSource+0xd8>
 8004a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a16:	f200 8087 	bhi.w	8004b28 <HAL_TIM_ConfigClockSource+0x170>
 8004a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1e:	f000 8086 	beq.w	8004b2e <HAL_TIM_ConfigClockSource+0x176>
 8004a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a26:	d87f      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x170>
 8004a28:	2b70      	cmp	r3, #112	@ 0x70
 8004a2a:	d01a      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0xaa>
 8004a2c:	2b70      	cmp	r3, #112	@ 0x70
 8004a2e:	d87b      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x170>
 8004a30:	2b60      	cmp	r3, #96	@ 0x60
 8004a32:	d050      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x11e>
 8004a34:	2b60      	cmp	r3, #96	@ 0x60
 8004a36:	d877      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x170>
 8004a38:	2b50      	cmp	r3, #80	@ 0x50
 8004a3a:	d03c      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0xfe>
 8004a3c:	2b50      	cmp	r3, #80	@ 0x50
 8004a3e:	d873      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x170>
 8004a40:	2b40      	cmp	r3, #64	@ 0x40
 8004a42:	d058      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0x13e>
 8004a44:	2b40      	cmp	r3, #64	@ 0x40
 8004a46:	d86f      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x170>
 8004a48:	2b30      	cmp	r3, #48	@ 0x30
 8004a4a:	d064      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x15e>
 8004a4c:	2b30      	cmp	r3, #48	@ 0x30
 8004a4e:	d86b      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x170>
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d060      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x15e>
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d867      	bhi.n	8004b28 <HAL_TIM_ConfigClockSource+0x170>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d05c      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x15e>
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d05a      	beq.n	8004b16 <HAL_TIM_ConfigClockSource+0x15e>
 8004a60:	e062      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a72:	f000 fbdd 	bl	8005230 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	609a      	str	r2, [r3, #8]
      break;
 8004a8e:	e04f      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aa0:	f000 fbc6 	bl	8005230 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ab2:	609a      	str	r2, [r3, #8]
      break;
 8004ab4:	e03c      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f000 fb3a 	bl	800513c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2150      	movs	r1, #80	@ 0x50
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fb93 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004ad4:	e02c      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f000 fb59 	bl	800519a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2160      	movs	r1, #96	@ 0x60
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fb83 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004af4:	e01c      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	461a      	mov	r2, r3
 8004b04:	f000 fb1a 	bl	800513c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2140      	movs	r1, #64	@ 0x40
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fb73 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004b14:	e00c      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f000 fb6a 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004b26:	e003      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2c:	e000      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a34      	ldr	r2, [pc, #208]	@ (8004c30 <TIM_Base_SetConfig+0xe4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <TIM_Base_SetConfig+0x28>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b6a:	d003      	beq.n	8004b74 <TIM_Base_SetConfig+0x28>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a31      	ldr	r2, [pc, #196]	@ (8004c34 <TIM_Base_SetConfig+0xe8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d108      	bne.n	8004b86 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a29      	ldr	r2, [pc, #164]	@ (8004c30 <TIM_Base_SetConfig+0xe4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00f      	beq.n	8004bae <TIM_Base_SetConfig+0x62>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b94:	d00b      	beq.n	8004bae <TIM_Base_SetConfig+0x62>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a26      	ldr	r2, [pc, #152]	@ (8004c34 <TIM_Base_SetConfig+0xe8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <TIM_Base_SetConfig+0x62>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a25      	ldr	r2, [pc, #148]	@ (8004c38 <TIM_Base_SetConfig+0xec>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_Base_SetConfig+0x62>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a24      	ldr	r2, [pc, #144]	@ (8004c3c <TIM_Base_SetConfig+0xf0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d108      	bne.n	8004bc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a12      	ldr	r2, [pc, #72]	@ (8004c30 <TIM_Base_SetConfig+0xe4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d007      	beq.n	8004bfc <TIM_Base_SetConfig+0xb0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a12      	ldr	r2, [pc, #72]	@ (8004c38 <TIM_Base_SetConfig+0xec>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_Base_SetConfig+0xb0>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a11      	ldr	r2, [pc, #68]	@ (8004c3c <TIM_Base_SetConfig+0xf0>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d103      	bne.n	8004c04 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d105      	bne.n	8004c22 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f023 0201 	bic.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	611a      	str	r2, [r3, #16]
  }
}
 8004c22:	bf00      	nop
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40000400 	.word	0x40000400
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400

08004c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f023 0201 	bic.w	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f023 0302 	bic.w	r3, r3, #2
 8004c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a24      	ldr	r2, [pc, #144]	@ (8004d2c <TIM_OC1_SetConfig+0xec>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_OC1_SetConfig+0x70>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a23      	ldr	r2, [pc, #140]	@ (8004d30 <TIM_OC1_SetConfig+0xf0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_OC1_SetConfig+0x70>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a22      	ldr	r2, [pc, #136]	@ (8004d34 <TIM_OC1_SetConfig+0xf4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d10c      	bne.n	8004cca <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 0308 	bic.w	r3, r3, #8
 8004cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 0304 	bic.w	r3, r3, #4
 8004cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a17      	ldr	r2, [pc, #92]	@ (8004d2c <TIM_OC1_SetConfig+0xec>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d007      	beq.n	8004ce2 <TIM_OC1_SetConfig+0xa2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a16      	ldr	r2, [pc, #88]	@ (8004d30 <TIM_OC1_SetConfig+0xf0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_OC1_SetConfig+0xa2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a15      	ldr	r2, [pc, #84]	@ (8004d34 <TIM_OC1_SetConfig+0xf4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d111      	bne.n	8004d06 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	621a      	str	r2, [r3, #32]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400

08004d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	f023 0210 	bic.w	r2, r3, #16
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 0320 	bic.w	r3, r3, #32
 8004d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a22      	ldr	r2, [pc, #136]	@ (8004e20 <TIM_OC2_SetConfig+0xe8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d10d      	bne.n	8004db8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004db6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a19      	ldr	r2, [pc, #100]	@ (8004e20 <TIM_OC2_SetConfig+0xe8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d007      	beq.n	8004dd0 <TIM_OC2_SetConfig+0x98>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a18      	ldr	r2, [pc, #96]	@ (8004e24 <TIM_OC2_SetConfig+0xec>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_OC2_SetConfig+0x98>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a17      	ldr	r2, [pc, #92]	@ (8004e28 <TIM_OC2_SetConfig+0xf0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d113      	bne.n	8004df8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400

08004e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0303 	bic.w	r3, r3, #3
 8004e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a21      	ldr	r2, [pc, #132]	@ (8004f10 <TIM_OC3_SetConfig+0xe4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d10d      	bne.n	8004eaa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a18      	ldr	r2, [pc, #96]	@ (8004f10 <TIM_OC3_SetConfig+0xe4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d007      	beq.n	8004ec2 <TIM_OC3_SetConfig+0x96>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a17      	ldr	r2, [pc, #92]	@ (8004f14 <TIM_OC3_SetConfig+0xe8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d003      	beq.n	8004ec2 <TIM_OC3_SetConfig+0x96>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a16      	ldr	r2, [pc, #88]	@ (8004f18 <TIM_OC3_SetConfig+0xec>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d113      	bne.n	8004eea <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	621a      	str	r2, [r3, #32]
}
 8004f04:	bf00      	nop
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40014400 	.word	0x40014400

08004f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	031b      	lsls	r3, r3, #12
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a14      	ldr	r2, [pc, #80]	@ (8004fcc <TIM_OC4_SetConfig+0xb0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d007      	beq.n	8004f90 <TIM_OC4_SetConfig+0x74>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a13      	ldr	r2, [pc, #76]	@ (8004fd0 <TIM_OC4_SetConfig+0xb4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_OC4_SetConfig+0x74>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a12      	ldr	r2, [pc, #72]	@ (8004fd4 <TIM_OC4_SetConfig+0xb8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d109      	bne.n	8004fa4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	019b      	lsls	r3, r3, #6
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40012c00 	.word	0x40012c00
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40014400 	.word	0x40014400

08004fd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800501c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	041b      	lsls	r3, r3, #16
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a13      	ldr	r2, [pc, #76]	@ (800507c <TIM_OC5_SetConfig+0xa4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <TIM_OC5_SetConfig+0x6a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a12      	ldr	r2, [pc, #72]	@ (8005080 <TIM_OC5_SetConfig+0xa8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d003      	beq.n	8005042 <TIM_OC5_SetConfig+0x6a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a11      	ldr	r2, [pc, #68]	@ (8005084 <TIM_OC5_SetConfig+0xac>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d109      	bne.n	8005056 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005048:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	621a      	str	r2, [r3, #32]
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40014000 	.word	0x40014000
 8005084:	40014400 	.word	0x40014400

08005088 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	021b      	lsls	r3, r3, #8
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	051b      	lsls	r3, r3, #20
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a14      	ldr	r2, [pc, #80]	@ (8005130 <TIM_OC6_SetConfig+0xa8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <TIM_OC6_SetConfig+0x6c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a13      	ldr	r2, [pc, #76]	@ (8005134 <TIM_OC6_SetConfig+0xac>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_OC6_SetConfig+0x6c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a12      	ldr	r2, [pc, #72]	@ (8005138 <TIM_OC6_SetConfig+0xb0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d109      	bne.n	8005108 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	029b      	lsls	r3, r3, #10
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40014000 	.word	0x40014000
 8005138:	40014400 	.word	0x40014400

0800513c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 030a 	bic.w	r3, r3, #10
 8005178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519a:	b480      	push	{r7}
 800519c:	b087      	sub	sp, #28
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f023 0210 	bic.w	r2, r3, #16
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	f043 0307 	orr.w	r3, r3, #7
 800521c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	609a      	str	r2, [r3, #8]
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800524a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	021a      	lsls	r2, r3, #8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	431a      	orrs	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	2201      	movs	r2, #1
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1a      	ldr	r2, [r3, #32]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	43db      	mvns	r3, r3
 8005292:	401a      	ands	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e054      	b.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a24      	ldr	r2, [pc, #144]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d108      	bne.n	8005310 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005304:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a17      	ldr	r2, [pc, #92]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00e      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533c:	d009      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a13      	ldr	r2, [pc, #76]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a11      	ldr	r2, [pc, #68]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d10c      	bne.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005358:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	4313      	orrs	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40012c00 	.word	0x40012c00
 8005390:	40000400 	.word	0x40000400
 8005394:	40014000 	.word	0x40014000

08005398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e060      	b.n	8005476 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	041b      	lsls	r3, r3, #16
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a14      	ldr	r2, [pc, #80]	@ (8005484 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d115      	bne.n	8005464 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	051b      	lsls	r3, r3, #20
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40012c00 	.word	0x40012c00

08005488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e040      	b.n	800551c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fd f8f8 	bl	80026a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2224      	movs	r2, #36	@ 0x24
 80054b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fe20 	bl	8006114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fb97 	bl	8005c08 <UART_SetConfig>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e01b      	b.n	800551c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fe9f 	bl	8006258 <UART_CheckIdleState>
 800551a:	4603      	mov	r3, r0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	@ 0x28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	4613      	mov	r3, r2
 8005530:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005538:	2b20      	cmp	r3, #32
 800553a:	d137      	bne.n	80055ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_UART_Receive_IT+0x24>
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e030      	b.n	80055ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a18      	ldr	r2, [pc, #96]	@ (80055b8 <HAL_UART_Receive_IT+0x94>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d01f      	beq.n	800559c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d018      	beq.n	800559c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	613b      	str	r3, [r7, #16]
   return(result);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	623b      	str	r3, [r7, #32]
 800558a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	69f9      	ldr	r1, [r7, #28]
 800558e:	6a3a      	ldr	r2, [r7, #32]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	61bb      	str	r3, [r7, #24]
   return(result);
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e6      	bne.n	800556a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	461a      	mov	r2, r3
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 ff6e 	bl	8006484 <UART_Start_Receive_IT>
 80055a8:	4603      	mov	r3, r0
 80055aa:	e000      	b.n	80055ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055ac:	2302      	movs	r3, #2
  }
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3728      	adds	r7, #40	@ 0x28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40008000 	.word	0x40008000

080055bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b0ba      	sub	sp, #232	@ 0xe8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80055e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80055ea:	4013      	ands	r3, r2
 80055ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80055f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d115      	bne.n	8005624 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00f      	beq.n	8005624 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 82ca 	beq.w	8005bae <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
      }
      return;
 8005622:	e2c4      	b.n	8005bae <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8117 	beq.w	800585c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800562e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800563a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800563e:	4b85      	ldr	r3, [pc, #532]	@ (8005854 <HAL_UART_IRQHandler+0x298>)
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 810a 	beq.w	800585c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d011      	beq.n	8005678 <HAL_UART_IRQHandler+0xbc>
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2201      	movs	r2, #1
 8005666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800566e:	f043 0201 	orr.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d011      	beq.n	80056a8 <HAL_UART_IRQHandler+0xec>
 8005684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2202      	movs	r2, #2
 8005696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800569e:	f043 0204 	orr.w	r2, r3, #4
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d011      	beq.n	80056d8 <HAL_UART_IRQHandler+0x11c>
 80056b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00b      	beq.n	80056d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2204      	movs	r2, #4
 80056c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ce:	f043 0202 	orr.w	r2, r3, #2
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d017      	beq.n	8005714 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d105      	bne.n	80056fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2208      	movs	r2, #8
 8005702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800570a:	f043 0208 	orr.w	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800571c:	2b00      	cmp	r3, #0
 800571e:	d012      	beq.n	8005746 <HAL_UART_IRQHandler+0x18a>
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005724:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573c:	f043 0220 	orr.w	r2, r3, #32
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8230 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00d      	beq.n	800577a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800575e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005780:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578e:	2b40      	cmp	r3, #64	@ 0x40
 8005790:	d005      	beq.n	800579e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005796:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800579a:	2b00      	cmp	r3, #0
 800579c:	d04f      	beq.n	800583e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 ff36 	bl	8006610 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ae:	2b40      	cmp	r3, #64	@ 0x40
 80057b0:	d141      	bne.n	8005836 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80057c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3308      	adds	r3, #8
 80057da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1d9      	bne.n	80057b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005802:	2b00      	cmp	r3, #0
 8005804:	d013      	beq.n	800582e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800580a:	4a13      	ldr	r2, [pc, #76]	@ (8005858 <HAL_UART_IRQHandler+0x29c>)
 800580c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005812:	4618      	mov	r0, r3
 8005814:	f7fd fa51 	bl	8002cba <HAL_DMA_Abort_IT>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d017      	beq.n	800584e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582c:	e00f      	b.n	800584e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f9d4 	bl	8005bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005834:	e00b      	b.n	800584e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f9d0 	bl	8005bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	e007      	b.n	800584e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f9cc 	bl	8005bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800584c:	e1b1      	b.n	8005bb2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584e:	bf00      	nop
    return;
 8005850:	e1af      	b.n	8005bb2 <HAL_UART_IRQHandler+0x5f6>
 8005852:	bf00      	nop
 8005854:	04000120 	.word	0x04000120
 8005858:	080066d9 	.word	0x080066d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005860:	2b01      	cmp	r3, #1
 8005862:	f040 816a 	bne.w	8005b3a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 8163 	beq.w	8005b3a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 815c 	beq.w	8005b3a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2210      	movs	r2, #16
 8005888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005894:	2b40      	cmp	r3, #64	@ 0x40
 8005896:	f040 80d4 	bne.w	8005a42 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80ad 	beq.w	8005a0a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f080 80a5 	bcs.w	8005a0a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f040 8086 	bne.w	80059e8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	461a      	mov	r2, r3
 8005902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800590a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005912:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800591e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1da      	bne.n	80058dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3308      	adds	r3, #8
 800592c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3308      	adds	r3, #8
 8005946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800594a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800594e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005952:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800595c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e1      	bne.n	8005926 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3308      	adds	r3, #8
 8005982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005988:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800598c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e3      	bne.n	8005962 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059b8:	f023 0310 	bic.w	r3, r3, #16
 80059bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e4      	bne.n	80059a8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fd f92b 	bl	8002c3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	4619      	mov	r1, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8f4 	bl	8005bf0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a08:	e0d5      	b.n	8005bb6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a14:	429a      	cmp	r2, r3
 8005a16:	f040 80ce 	bne.w	8005bb6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	f040 80c5 	bne.w	8005bb6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f8d8 	bl	8005bf0 <HAL_UARTEx_RxEventCallback>
      return;
 8005a40:	e0b9      	b.n	8005bb6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80ab 	beq.w	8005bba <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80a6 	beq.w	8005bba <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e4      	bne.n	8005a6e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ac8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e3      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f023 0310 	bic.w	r3, r3, #16
 8005b04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	69b9      	ldr	r1, [r7, #24]
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e4      	bne.n	8005af0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f85c 	bl	8005bf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b38:	e03f      	b.n	8005bba <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00e      	beq.n	8005b64 <HAL_UART_IRQHandler+0x5a8>
 8005b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d008      	beq.n	8005b64 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005b5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 ffb7 	bl	8006ad0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b62:	e02d      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01c      	beq.n	8005bbe <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4798      	blx	r3
    }
    return;
 8005b8c:	e017      	b.n	8005bbe <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d012      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x604>
 8005b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00c      	beq.n	8005bc0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fdac 	bl	8006704 <UART_EndTransmit_IT>
    return;
 8005bac:	e008      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
      return;
 8005bae:	bf00      	nop
 8005bb0:	e006      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
    return;
 8005bb2:	bf00      	nop
 8005bb4:	e004      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
      return;
 8005bb6:	bf00      	nop
 8005bb8:	e002      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
      return;
 8005bba:	bf00      	nop
 8005bbc:	e000      	b.n	8005bc0 <HAL_UART_IRQHandler+0x604>
    return;
 8005bbe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005bc0:	37e8      	adds	r7, #232	@ 0xe8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop

08005bc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c0c:	b08a      	sub	sp, #40	@ 0x28
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	431a      	orrs	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4ba5      	ldr	r3, [pc, #660]	@ (8005ecc <UART_SetConfig+0x2c4>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a9a      	ldr	r2, [pc, #616]	@ (8005ed0 <UART_SetConfig+0x2c8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	4313      	orrs	r3, r2
 8005c72:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c84:	430a      	orrs	r2, r1
 8005c86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a91      	ldr	r2, [pc, #580]	@ (8005ed4 <UART_SetConfig+0x2cc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d126      	bne.n	8005ce0 <UART_SetConfig+0xd8>
 8005c92:	4b91      	ldr	r3, [pc, #580]	@ (8005ed8 <UART_SetConfig+0x2d0>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d81b      	bhi.n	8005cd8 <UART_SetConfig+0xd0>
 8005ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <UART_SetConfig+0xa0>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005cb9 	.word	0x08005cb9
 8005cac:	08005cc9 	.word	0x08005cc9
 8005cb0:	08005cc1 	.word	0x08005cc1
 8005cb4:	08005cd1 	.word	0x08005cd1
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cbe:	e0d6      	b.n	8005e6e <UART_SetConfig+0x266>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cc6:	e0d2      	b.n	8005e6e <UART_SetConfig+0x266>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cce:	e0ce      	b.n	8005e6e <UART_SetConfig+0x266>
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cd6:	e0ca      	b.n	8005e6e <UART_SetConfig+0x266>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cde:	e0c6      	b.n	8005e6e <UART_SetConfig+0x266>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a7d      	ldr	r2, [pc, #500]	@ (8005edc <UART_SetConfig+0x2d4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d138      	bne.n	8005d5c <UART_SetConfig+0x154>
 8005cea:	4b7b      	ldr	r3, [pc, #492]	@ (8005ed8 <UART_SetConfig+0x2d0>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf0:	f003 030c 	and.w	r3, r3, #12
 8005cf4:	2b0c      	cmp	r3, #12
 8005cf6:	d82d      	bhi.n	8005d54 <UART_SetConfig+0x14c>
 8005cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8005d00 <UART_SetConfig+0xf8>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d35 	.word	0x08005d35
 8005d04:	08005d55 	.word	0x08005d55
 8005d08:	08005d55 	.word	0x08005d55
 8005d0c:	08005d55 	.word	0x08005d55
 8005d10:	08005d45 	.word	0x08005d45
 8005d14:	08005d55 	.word	0x08005d55
 8005d18:	08005d55 	.word	0x08005d55
 8005d1c:	08005d55 	.word	0x08005d55
 8005d20:	08005d3d 	.word	0x08005d3d
 8005d24:	08005d55 	.word	0x08005d55
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	08005d55 	.word	0x08005d55
 8005d30:	08005d4d 	.word	0x08005d4d
 8005d34:	2300      	movs	r3, #0
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d3a:	e098      	b.n	8005e6e <UART_SetConfig+0x266>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d42:	e094      	b.n	8005e6e <UART_SetConfig+0x266>
 8005d44:	2304      	movs	r3, #4
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d4a:	e090      	b.n	8005e6e <UART_SetConfig+0x266>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d52:	e08c      	b.n	8005e6e <UART_SetConfig+0x266>
 8005d54:	2310      	movs	r3, #16
 8005d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d5a:	e088      	b.n	8005e6e <UART_SetConfig+0x266>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a5f      	ldr	r2, [pc, #380]	@ (8005ee0 <UART_SetConfig+0x2d8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d125      	bne.n	8005db2 <UART_SetConfig+0x1aa>
 8005d66:	4b5c      	ldr	r3, [pc, #368]	@ (8005ed8 <UART_SetConfig+0x2d0>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d6c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d70:	2b30      	cmp	r3, #48	@ 0x30
 8005d72:	d016      	beq.n	8005da2 <UART_SetConfig+0x19a>
 8005d74:	2b30      	cmp	r3, #48	@ 0x30
 8005d76:	d818      	bhi.n	8005daa <UART_SetConfig+0x1a2>
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d00a      	beq.n	8005d92 <UART_SetConfig+0x18a>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d814      	bhi.n	8005daa <UART_SetConfig+0x1a2>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <UART_SetConfig+0x182>
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d008      	beq.n	8005d9a <UART_SetConfig+0x192>
 8005d88:	e00f      	b.n	8005daa <UART_SetConfig+0x1a2>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d90:	e06d      	b.n	8005e6e <UART_SetConfig+0x266>
 8005d92:	2302      	movs	r3, #2
 8005d94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d98:	e069      	b.n	8005e6e <UART_SetConfig+0x266>
 8005d9a:	2304      	movs	r3, #4
 8005d9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da0:	e065      	b.n	8005e6e <UART_SetConfig+0x266>
 8005da2:	2308      	movs	r3, #8
 8005da4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da8:	e061      	b.n	8005e6e <UART_SetConfig+0x266>
 8005daa:	2310      	movs	r3, #16
 8005dac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db0:	e05d      	b.n	8005e6e <UART_SetConfig+0x266>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a4b      	ldr	r2, [pc, #300]	@ (8005ee4 <UART_SetConfig+0x2dc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d125      	bne.n	8005e08 <UART_SetConfig+0x200>
 8005dbc:	4b46      	ldr	r3, [pc, #280]	@ (8005ed8 <UART_SetConfig+0x2d0>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005dc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dc8:	d016      	beq.n	8005df8 <UART_SetConfig+0x1f0>
 8005dca:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dcc:	d818      	bhi.n	8005e00 <UART_SetConfig+0x1f8>
 8005dce:	2b80      	cmp	r3, #128	@ 0x80
 8005dd0:	d00a      	beq.n	8005de8 <UART_SetConfig+0x1e0>
 8005dd2:	2b80      	cmp	r3, #128	@ 0x80
 8005dd4:	d814      	bhi.n	8005e00 <UART_SetConfig+0x1f8>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <UART_SetConfig+0x1d8>
 8005dda:	2b40      	cmp	r3, #64	@ 0x40
 8005ddc:	d008      	beq.n	8005df0 <UART_SetConfig+0x1e8>
 8005dde:	e00f      	b.n	8005e00 <UART_SetConfig+0x1f8>
 8005de0:	2300      	movs	r3, #0
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de6:	e042      	b.n	8005e6e <UART_SetConfig+0x266>
 8005de8:	2302      	movs	r3, #2
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dee:	e03e      	b.n	8005e6e <UART_SetConfig+0x266>
 8005df0:	2304      	movs	r3, #4
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df6:	e03a      	b.n	8005e6e <UART_SetConfig+0x266>
 8005df8:	2308      	movs	r3, #8
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfe:	e036      	b.n	8005e6e <UART_SetConfig+0x266>
 8005e00:	2310      	movs	r3, #16
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e06:	e032      	b.n	8005e6e <UART_SetConfig+0x266>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a30      	ldr	r2, [pc, #192]	@ (8005ed0 <UART_SetConfig+0x2c8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d12a      	bne.n	8005e68 <UART_SetConfig+0x260>
 8005e12:	4b31      	ldr	r3, [pc, #196]	@ (8005ed8 <UART_SetConfig+0x2d0>)
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e20:	d01a      	beq.n	8005e58 <UART_SetConfig+0x250>
 8005e22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e26:	d81b      	bhi.n	8005e60 <UART_SetConfig+0x258>
 8005e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e2c:	d00c      	beq.n	8005e48 <UART_SetConfig+0x240>
 8005e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e32:	d815      	bhi.n	8005e60 <UART_SetConfig+0x258>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <UART_SetConfig+0x238>
 8005e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e3c:	d008      	beq.n	8005e50 <UART_SetConfig+0x248>
 8005e3e:	e00f      	b.n	8005e60 <UART_SetConfig+0x258>
 8005e40:	2300      	movs	r3, #0
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e46:	e012      	b.n	8005e6e <UART_SetConfig+0x266>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4e:	e00e      	b.n	8005e6e <UART_SetConfig+0x266>
 8005e50:	2304      	movs	r3, #4
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e56:	e00a      	b.n	8005e6e <UART_SetConfig+0x266>
 8005e58:	2308      	movs	r3, #8
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5e:	e006      	b.n	8005e6e <UART_SetConfig+0x266>
 8005e60:	2310      	movs	r3, #16
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e66:	e002      	b.n	8005e6e <UART_SetConfig+0x266>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a17      	ldr	r2, [pc, #92]	@ (8005ed0 <UART_SetConfig+0x2c8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	f040 808b 	bne.w	8005f90 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d834      	bhi.n	8005eec <UART_SetConfig+0x2e4>
 8005e82:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <UART_SetConfig+0x280>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005ead 	.word	0x08005ead
 8005e8c:	08005eed 	.word	0x08005eed
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005eed 	.word	0x08005eed
 8005e98:	08005ebb 	.word	0x08005ebb
 8005e9c:	08005eed 	.word	0x08005eed
 8005ea0:	08005eed 	.word	0x08005eed
 8005ea4:	08005eed 	.word	0x08005eed
 8005ea8:	08005ec3 	.word	0x08005ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eac:	f7fd fee8 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8005eb0:	61f8      	str	r0, [r7, #28]
        break;
 8005eb2:	e021      	b.n	8005ef8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee8 <UART_SetConfig+0x2e0>)
 8005eb6:	61fb      	str	r3, [r7, #28]
        break;
 8005eb8:	e01e      	b.n	8005ef8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eba:	f7fd fe49 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8005ebe:	61f8      	str	r0, [r7, #28]
        break;
 8005ec0:	e01a      	b.n	8005ef8 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ec6:	61fb      	str	r3, [r7, #28]
        break;
 8005ec8:	e016      	b.n	8005ef8 <UART_SetConfig+0x2f0>
 8005eca:	bf00      	nop
 8005ecc:	efff69f3 	.word	0xefff69f3
 8005ed0:	40008000 	.word	0x40008000
 8005ed4:	40013800 	.word	0x40013800
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40004400 	.word	0x40004400
 8005ee0:	40004800 	.word	0x40004800
 8005ee4:	40004c00 	.word	0x40004c00
 8005ee8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ef6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80fa 	beq.w	80060f4 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d305      	bcc.n	8005f1c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d903      	bls.n	8005f24 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f22:	e0e7      	b.n	80060f4 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2200      	movs	r2, #0
 8005f28:	461c      	mov	r4, r3
 8005f2a:	4615      	mov	r5, r2
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	022b      	lsls	r3, r5, #8
 8005f36:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f3a:	0222      	lsls	r2, r4, #8
 8005f3c:	68f9      	ldr	r1, [r7, #12]
 8005f3e:	6849      	ldr	r1, [r1, #4]
 8005f40:	0849      	lsrs	r1, r1, #1
 8005f42:	2000      	movs	r0, #0
 8005f44:	4688      	mov	r8, r1
 8005f46:	4681      	mov	r9, r0
 8005f48:	eb12 0a08 	adds.w	sl, r2, r8
 8005f4c:	eb43 0b09 	adc.w	fp, r3, r9
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f5e:	4650      	mov	r0, sl
 8005f60:	4659      	mov	r1, fp
 8005f62:	f7fa f937 	bl	80001d4 <__aeabi_uldivmod>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f74:	d308      	bcc.n	8005f88 <UART_SetConfig+0x380>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f7c:	d204      	bcs.n	8005f88 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	60da      	str	r2, [r3, #12]
 8005f86:	e0b5      	b.n	80060f4 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f8e:	e0b1      	b.n	80060f4 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f98:	d15d      	bne.n	8006056 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8005f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d827      	bhi.n	8005ff2 <UART_SetConfig+0x3ea>
 8005fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x3a0>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fd fe58 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8005fd0:	61f8      	str	r0, [r7, #28]
        break;
 8005fd2:	e014      	b.n	8005ffe <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fd fe6a 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
        break;
 8005fda:	e010      	b.n	8005ffe <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b4c      	ldr	r3, [pc, #304]	@ (8006110 <UART_SetConfig+0x508>)
 8005fde:	61fb      	str	r3, [r7, #28]
        break;
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fd fdb5 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8005fe6:	61f8      	str	r0, [r7, #28]
        break;
 8005fe8:	e009      	b.n	8005ffe <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fee:	61fb      	str	r3, [r7, #28]
        break;
 8005ff0:	e005      	b.n	8005ffe <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ffc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d077      	beq.n	80060f4 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005a      	lsls	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	441a      	add	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	fbb2 f3f3 	udiv	r3, r2, r3
 8006018:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b0f      	cmp	r3, #15
 800601e:	d916      	bls.n	800604e <UART_SetConfig+0x446>
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006026:	d212      	bcs.n	800604e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f023 030f 	bic.w	r3, r3, #15
 8006030:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	085b      	lsrs	r3, r3, #1
 8006036:	b29b      	uxth	r3, r3
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	b29a      	uxth	r2, r3
 800603e:	8afb      	ldrh	r3, [r7, #22]
 8006040:	4313      	orrs	r3, r2
 8006042:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	8afa      	ldrh	r2, [r7, #22]
 800604a:	60da      	str	r2, [r3, #12]
 800604c:	e052      	b.n	80060f4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006054:	e04e      	b.n	80060f4 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006056:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800605a:	2b08      	cmp	r3, #8
 800605c:	d827      	bhi.n	80060ae <UART_SetConfig+0x4a6>
 800605e:	a201      	add	r2, pc, #4	@ (adr r2, 8006064 <UART_SetConfig+0x45c>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006089 	.word	0x08006089
 8006068:	08006091 	.word	0x08006091
 800606c:	08006099 	.word	0x08006099
 8006070:	080060af 	.word	0x080060af
 8006074:	0800609f 	.word	0x0800609f
 8006078:	080060af 	.word	0x080060af
 800607c:	080060af 	.word	0x080060af
 8006080:	080060af 	.word	0x080060af
 8006084:	080060a7 	.word	0x080060a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006088:	f7fd fdfa 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 800608c:	61f8      	str	r0, [r7, #28]
        break;
 800608e:	e014      	b.n	80060ba <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006090:	f7fd fe0c 	bl	8003cac <HAL_RCC_GetPCLK2Freq>
 8006094:	61f8      	str	r0, [r7, #28]
        break;
 8006096:	e010      	b.n	80060ba <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006098:	4b1d      	ldr	r3, [pc, #116]	@ (8006110 <UART_SetConfig+0x508>)
 800609a:	61fb      	str	r3, [r7, #28]
        break;
 800609c:	e00d      	b.n	80060ba <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609e:	f7fd fd57 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 80060a2:	61f8      	str	r0, [r7, #28]
        break;
 80060a4:	e009      	b.n	80060ba <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060aa:	61fb      	str	r3, [r7, #28]
        break;
 80060ac:	e005      	b.n	80060ba <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060b8:	bf00      	nop
    }

    if (pclk != 0U)
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d019      	beq.n	80060f4 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	085a      	lsrs	r2, r3, #1
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	441a      	add	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b0f      	cmp	r3, #15
 80060d8:	d909      	bls.n	80060ee <UART_SetConfig+0x4e6>
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e0:	d205      	bcs.n	80060ee <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60da      	str	r2, [r3, #12]
 80060ec:	e002      	b.n	80060f4 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006100:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006104:	4618      	mov	r0, r3
 8006106:	3728      	adds	r7, #40	@ 0x28
 8006108:	46bd      	mov	sp, r7
 800610a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800610e:	bf00      	nop
 8006110:	00f42400 	.word	0x00f42400

08006114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006186:	f003 0304 	and.w	r3, r3, #4
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01a      	beq.n	800622a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006212:	d10a      	bne.n	800622a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b098      	sub	sp, #96	@ 0x60
 800625c:	af02      	add	r7, sp, #8
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006268:	f7fc fbcc 	bl	8002a04 <HAL_GetTick>
 800626c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b08      	cmp	r3, #8
 800627a:	d12e      	bne.n	80062da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800627c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006284:	2200      	movs	r2, #0
 8006286:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f88c 	bl	80063a8 <UART_WaitOnFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d021      	beq.n	80062da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e6      	bne.n	8006296 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e062      	b.n	80063a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d149      	bne.n	800637c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f0:	2200      	movs	r2, #0
 80062f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f856 	bl	80063a8 <UART_WaitOnFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d03c      	beq.n	800637c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	623b      	str	r3, [r7, #32]
   return(result);
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006320:	633b      	str	r3, [r7, #48]	@ 0x30
 8006322:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006324:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006328:	e841 2300 	strex	r3, r2, [r1]
 800632c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800632e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e6      	bne.n	8006302 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3308      	adds	r3, #8
 800633a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	e853 3f00 	ldrex	r3, [r3]
 8006342:	60fb      	str	r3, [r7, #12]
   return(result);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006354:	61fa      	str	r2, [r7, #28]
 8006356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	69b9      	ldr	r1, [r7, #24]
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	617b      	str	r3, [r7, #20]
   return(result);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e5      	bne.n	8006334 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e011      	b.n	80063a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3758      	adds	r7, #88	@ 0x58
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	4613      	mov	r3, r2
 80063b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b8:	e04f      	b.n	800645a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c0:	d04b      	beq.n	800645a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c2:	f7fc fb1f 	bl	8002a04 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d302      	bcc.n	80063d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e04e      	b.n	800647a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d037      	beq.n	800645a <UART_WaitOnFlagUntilTimeout+0xb2>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b80      	cmp	r3, #128	@ 0x80
 80063ee:	d034      	beq.n	800645a <UART_WaitOnFlagUntilTimeout+0xb2>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b40      	cmp	r3, #64	@ 0x40
 80063f4:	d031      	beq.n	800645a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b08      	cmp	r3, #8
 8006402:	d110      	bne.n	8006426 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2208      	movs	r2, #8
 800640a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 f8ff 	bl	8006610 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2208      	movs	r2, #8
 8006416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e029      	b.n	800647a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006434:	d111      	bne.n	800645a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800643e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f8e5 	bl	8006610 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2220      	movs	r2, #32
 800644a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e00f      	b.n	800647a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4013      	ands	r3, r2
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	429a      	cmp	r2, r3
 8006468:	bf0c      	ite	eq
 800646a:	2301      	moveq	r3, #1
 800646c:	2300      	movne	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	461a      	mov	r2, r3
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	429a      	cmp	r2, r3
 8006476:	d0a0      	beq.n	80063ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006484:	b480      	push	{r7}
 8006486:	b097      	sub	sp, #92	@ 0x5c
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b6:	d10e      	bne.n	80064d6 <UART_Start_Receive_IT+0x52>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d105      	bne.n	80064cc <UART_Start_Receive_IT+0x48>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80064c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80064ca:	e02d      	b.n	8006528 <UART_Start_Receive_IT+0xa4>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	22ff      	movs	r2, #255	@ 0xff
 80064d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80064d4:	e028      	b.n	8006528 <UART_Start_Receive_IT+0xa4>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10d      	bne.n	80064fa <UART_Start_Receive_IT+0x76>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <UART_Start_Receive_IT+0x6c>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	22ff      	movs	r2, #255	@ 0xff
 80064ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80064ee:	e01b      	b.n	8006528 <UART_Start_Receive_IT+0xa4>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	227f      	movs	r2, #127	@ 0x7f
 80064f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80064f8:	e016      	b.n	8006528 <UART_Start_Receive_IT+0xa4>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006502:	d10d      	bne.n	8006520 <UART_Start_Receive_IT+0x9c>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <UART_Start_Receive_IT+0x92>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	227f      	movs	r2, #127	@ 0x7f
 8006510:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006514:	e008      	b.n	8006528 <UART_Start_Receive_IT+0xa4>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	223f      	movs	r2, #63	@ 0x3f
 800651a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800651e:	e003      	b.n	8006528 <UART_Start_Receive_IT+0xa4>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2222      	movs	r2, #34	@ 0x22
 8006534:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3308      	adds	r3, #8
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006558:	64ba      	str	r2, [r7, #72]	@ 0x48
 800655a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800655e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e5      	bne.n	8006538 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006574:	d107      	bne.n	8006586 <UART_Start_Receive_IT+0x102>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4a21      	ldr	r2, [pc, #132]	@ (8006608 <UART_Start_Receive_IT+0x184>)
 8006582:	669a      	str	r2, [r3, #104]	@ 0x68
 8006584:	e002      	b.n	800658c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a20      	ldr	r2, [pc, #128]	@ (800660c <UART_Start_Receive_IT+0x188>)
 800658a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d019      	beq.n	80065c8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80065a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80065c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e6      	bne.n	8006594 <UART_Start_Receive_IT+0x110>
 80065c6:	e018      	b.n	80065fa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	613b      	str	r3, [r7, #16]
   return(result);
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f043 0320 	orr.w	r3, r3, #32
 80065dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065e6:	623b      	str	r3, [r7, #32]
 80065e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	69f9      	ldr	r1, [r7, #28]
 80065ec:	6a3a      	ldr	r2, [r7, #32]
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e6      	bne.n	80065c8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	375c      	adds	r7, #92	@ 0x5c
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	08006915 	.word	0x08006915
 800660c:	08006759 	.word	0x08006759

08006610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b095      	sub	sp, #84	@ 0x54
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006628:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800662c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006636:	643b      	str	r3, [r7, #64]	@ 0x40
 8006638:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800663c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e6      	bne.n	8006618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	61fb      	str	r3, [r7, #28]
   return(result);
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800666a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800666c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006682:	2b01      	cmp	r3, #1
 8006684:	d118      	bne.n	80066b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	60bb      	str	r3, [r7, #8]
   return(result);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f023 0310 	bic.w	r3, r3, #16
 800669a:	647b      	str	r3, [r7, #68]	@ 0x44
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6979      	ldr	r1, [r7, #20]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	613b      	str	r3, [r7, #16]
   return(result);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e6      	bne.n	8006686 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066cc:	bf00      	nop
 80066ce:	3754      	adds	r7, #84	@ 0x54
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff fa70 	bl	8005bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	60bb      	str	r3, [r7, #8]
   return(result);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6979      	ldr	r1, [r7, #20]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	613b      	str	r3, [r7, #16]
   return(result);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e6      	bne.n	800670c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff fa3c 	bl	8005bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006750:	bf00      	nop
 8006752:	3720      	adds	r7, #32
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b09c      	sub	sp, #112	@ 0x70
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006766:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006770:	2b22      	cmp	r3, #34	@ 0x22
 8006772:	f040 80be 	bne.w	80068f2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800677c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006780:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006784:	b2d9      	uxtb	r1, r3
 8006786:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800678a:	b2da      	uxtb	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006790:	400a      	ands	r2, r1
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f040 80a3 	bne.w	8006906 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e6      	bne.n	80067c0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3308      	adds	r3, #8
 80067f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006804:	f023 0301 	bic.w	r3, r3, #1
 8006808:	667b      	str	r3, [r7, #100]	@ 0x64
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006812:	647a      	str	r2, [r7, #68]	@ 0x44
 8006814:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e5      	bne.n	80067f2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a34      	ldr	r2, [pc, #208]	@ (8006910 <UART_RxISR_8BIT+0x1b8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d01f      	beq.n	8006884 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d018      	beq.n	8006884 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	623b      	str	r3, [r7, #32]
   return(result);
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006866:	663b      	str	r3, [r7, #96]	@ 0x60
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006870:	633b      	str	r3, [r7, #48]	@ 0x30
 8006872:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e6      	bne.n	8006852 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006888:	2b01      	cmp	r3, #1
 800688a:	d12e      	bne.n	80068ea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0310 	bic.w	r3, r3, #16
 80068a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	69b9      	ldr	r1, [r7, #24]
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	617b      	str	r3, [r7, #20]
   return(result);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e6      	bne.n	8006892 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f003 0310 	and.w	r3, r3, #16
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d103      	bne.n	80068da <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2210      	movs	r2, #16
 80068d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff f984 	bl	8005bf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068e8:	e00d      	b.n	8006906 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fa f902 	bl	8000af4 <HAL_UART_RxCpltCallback>
}
 80068f0:	e009      	b.n	8006906 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	8b1b      	ldrh	r3, [r3, #24]
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0208 	orr.w	r2, r2, #8
 8006902:	b292      	uxth	r2, r2
 8006904:	831a      	strh	r2, [r3, #24]
}
 8006906:	bf00      	nop
 8006908:	3770      	adds	r7, #112	@ 0x70
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40008000 	.word	0x40008000

08006914 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b09c      	sub	sp, #112	@ 0x70
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006922:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800692c:	2b22      	cmp	r3, #34	@ 0x22
 800692e:	f040 80be 	bne.w	8006aae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006938:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006940:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006942:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006946:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800694a:	4013      	ands	r3, r2
 800694c:	b29a      	uxth	r2, r3
 800694e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006950:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006956:	1c9a      	adds	r2, r3, #2
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006962:	b29b      	uxth	r3, r3
 8006964:	3b01      	subs	r3, #1
 8006966:	b29a      	uxth	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	f040 80a3 	bne.w	8006ac2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800698a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800698c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006990:	667b      	str	r3, [r7, #100]	@ 0x64
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800699a:	657b      	str	r3, [r7, #84]	@ 0x54
 800699c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80069a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e6      	bne.n	800697c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3308      	adds	r3, #8
 80069b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80069ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80069d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e5      	bne.n	80069ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a34      	ldr	r2, [pc, #208]	@ (8006acc <UART_RxISR_16BIT+0x1b8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d01f      	beq.n	8006a40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d018      	beq.n	8006a40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e6      	bne.n	8006a0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d12e      	bne.n	8006aa6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f023 0310 	bic.w	r3, r3, #16
 8006a62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6979      	ldr	r1, [r7, #20]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e6      	bne.n	8006a4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b10      	cmp	r3, #16
 8006a8c:	d103      	bne.n	8006a96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2210      	movs	r2, #16
 8006a94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff f8a6 	bl	8005bf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aa4:	e00d      	b.n	8006ac2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fa f824 	bl	8000af4 <HAL_UART_RxCpltCallback>
}
 8006aac:	e009      	b.n	8006ac2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	8b1b      	ldrh	r3, [r3, #24]
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0208 	orr.w	r2, r2, #8
 8006abe:	b292      	uxth	r2, r2
 8006ac0:	831a      	strh	r2, [r3, #24]
}
 8006ac2:	bf00      	nop
 8006ac4:	3770      	adds	r7, #112	@ 0x70
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	40008000 	.word	0x40008000

08006ad0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <memset>:
 8006ae4:	4402      	add	r2, r0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d100      	bne.n	8006aee <memset+0xa>
 8006aec:	4770      	bx	lr
 8006aee:	f803 1b01 	strb.w	r1, [r3], #1
 8006af2:	e7f9      	b.n	8006ae8 <memset+0x4>

08006af4 <__libc_init_array>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	4d0d      	ldr	r5, [pc, #52]	@ (8006b2c <__libc_init_array+0x38>)
 8006af8:	4c0d      	ldr	r4, [pc, #52]	@ (8006b30 <__libc_init_array+0x3c>)
 8006afa:	1b64      	subs	r4, r4, r5
 8006afc:	10a4      	asrs	r4, r4, #2
 8006afe:	2600      	movs	r6, #0
 8006b00:	42a6      	cmp	r6, r4
 8006b02:	d109      	bne.n	8006b18 <__libc_init_array+0x24>
 8006b04:	4d0b      	ldr	r5, [pc, #44]	@ (8006b34 <__libc_init_array+0x40>)
 8006b06:	4c0c      	ldr	r4, [pc, #48]	@ (8006b38 <__libc_init_array+0x44>)
 8006b08:	f000 f818 	bl	8006b3c <_init>
 8006b0c:	1b64      	subs	r4, r4, r5
 8006b0e:	10a4      	asrs	r4, r4, #2
 8006b10:	2600      	movs	r6, #0
 8006b12:	42a6      	cmp	r6, r4
 8006b14:	d105      	bne.n	8006b22 <__libc_init_array+0x2e>
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1c:	4798      	blx	r3
 8006b1e:	3601      	adds	r6, #1
 8006b20:	e7ee      	b.n	8006b00 <__libc_init_array+0xc>
 8006b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b26:	4798      	blx	r3
 8006b28:	3601      	adds	r6, #1
 8006b2a:	e7f2      	b.n	8006b12 <__libc_init_array+0x1e>
 8006b2c:	08006ba4 	.word	0x08006ba4
 8006b30:	08006ba4 	.word	0x08006ba4
 8006b34:	08006ba4 	.word	0x08006ba4
 8006b38:	08006ba8 	.word	0x08006ba8

08006b3c <_init>:
 8006b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3e:	bf00      	nop
 8006b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b42:	bc08      	pop	{r3}
 8006b44:	469e      	mov	lr, r3
 8006b46:	4770      	bx	lr

08006b48 <_fini>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	bf00      	nop
 8006b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4e:	bc08      	pop	{r3}
 8006b50:	469e      	mov	lr, r3
 8006b52:	4770      	bx	lr
